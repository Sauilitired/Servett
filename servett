#!/usr/bin/env bash

# get base dir regardless of execution location
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$(cd -P "$(dirname "$SOURCE")" && pwd)"
  SOURCE="$(readlink "$SOURCE")"
  [[ "$SOURCE" != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
SOURCE=$([[ "$SOURCE" == /* ]] && echo "$SOURCE" || echo "$PWD/${SOURCE#./}")
basedir=$(dirname "$SOURCE")
. $basedir/scripts/init.sh

servettstash() {
  STASHED=$(git stash)
}

servettunstash() {
  if [[ "$STASHED" != "No local changes to save" ]]; then
    git stash pop
  fi
}

case "$1" in
"rb" | "rbp" | "rebuild")
  (
    set -e
    cd "$basedir"
    scripts/rebuildpatches.sh "$basedir"
  )
  ;;
"p" | "patch" | "apply")
  (
    set -e
    cd "$basedir"
    if [ "$2" != "fast" ]; then
      scripts/upstream.sh
    fi
    scripts/apply.sh "$basedir"
  )
  ;;
"b" | "bu" | "build")
  (
    basedir
    mvn -N install
    cd ${FORK_NAME}-API
    mvn clean install && cd ../${FORK_NAME}-Server && mvn clean install
  )
  ;;
"jar" | "paperclip" | "servettclip")
  (
    basedir
    cd "$basedir"
    if [ "$2" != "fast" ]; then
      scripts/upstream.sh
    fi
    ./scripts/apply.sh "$basedir"
    cd "$basedir"
    mvn -N install
    cd ${FORK_NAME}-API
    mvn -e clean install && cd ../${FORK_NAME}-Server && mvn -e clean install
    cd "$basedir"
    ./scripts/servettclip.sh
  )
  ;;
"d" | "de" | "deploy")
  (
    basedir
    mvn -N install
    cd ${FORK_NAME}-API
    mvn clean deploy && cd ../${FORK_NAME}-Server && mvn clean install
  )
  ;;
"up" | "upstream")
  (
    cd "$basedir"
    scripts/upstream.sh "$2"
  )
  ;;
"r" | "root")
  cd "$basedir"
  ;;
"a" | "api")
  cd "$basedir/Servett-API"
  ;;
"s" | "server")
  cd "$basedir/Servett-Server"
  ;;
"e" | "edit")
  case "$2" in
  "s" | "server")
    export PAPER_LAST_EDIT="$basedir/${FORK_NAME}-Server"
    cd "$basedir/${FORK_NAME}-Server"
    (
      set -e

      paperstash
      git rebase -i upstream/upstream
      paperunstash
    )
    ;;
  "a" | "api")
    export PAPER_LAST_EDIT="$basedir/${FORK_NAME}-API"
    cd "$basedir/${FORK_NAME}-API"
    (
      set -e

      paperstash
      git rebase -i upstream/upstream
      paperunstash
    )
    ;;
  "c" | "continue")
    cd "$PAPER_LAST_EDIT"
    unset PAPER_LAST_EDIT
    (
      set -e

      git add .
      git commit --amend
      git rebase --continue

      cd "$basedir"
      scripts/rebuildPatches.sh "$basedir"
    )
    ;;
  *)
    echo "You must edit either the api or server."
    ;;
  esac
  ;;
"setup")
  if [[ -f ~/.bashrc ]]; then
    NAME="servett"
    if [[ ! -z "${2+x}" ]]; then
      NAME="$2"
    fi
    (grep "alias $NAME=" ~/.bashrc >/dev/null) && (sed -i "s|alias $NAME=.*|alias $NAME='. $SOURCE'|g" ~/.bashrc) || (echo "alias $NAME='. $SOURCE'" >>~/.bashrc)
    alias "$NAME=. $SOURCE"
    echo "You can now just type '$NAME' at any time to access the servett tool."
  fi
  ;;
*)
  echo "Servett build tool command. This provides a variety of commands to build and manage the Servett build"
  echo "environment. For all of the functionality of this command to be available, you must first run the"
  echo "'setup' command. View below for details. For essential building and patching, you do not need to do the setup."
  echo ""
  echo " Normal commands:"
  echo "  * rb, rebuild  | Rebuild patches, can be called from anywhere."
  echo "  * p, patch     | Apply all patches to top of Paper without building it. Can be run from anywhere."
  echo "  * up, upstream | Build Paper upstream, pass arg up to update servett. Can be run from anywhere."
  echo "  * b, build    | Build API and Server but no deploy. Can be ran anywhere."
  echo "  * d, deploy    | Build and Deploy API jar and build Server. Can be ran anywhere."
  echo ""
  echo " These commands require the setup command before use:"
  echo "  * r, root      | Change directory to the root of the project."
  echo "  * a. api       | Move to the Paper-API directory."
  echo "  * s, server    | Move to the Paper-Server directory."
  echo "  * e, edit      | Use to edit a specific patch, give it the argument \"server\" or \"api\""
  echo "                 | respectively to edit the correct project. Use the argument \"continue\" after"
  echo "                 | the changes have been made to finish and rebuild patches. Can be called from anywhere."
  echo ""
  echo "  * setup        | Add an alias to .bashrc to allow full functionality of this script. Run as:"
  echo "                 |     . ./servett setup"
  echo "                 | After you run this command you'll be able to just run 'servett' from anywhere."
  echo "                 | The default name for the resulting alias is 'servett', you can give an argument to override"
  echo "                 | this default, such as:"
  echo "                 |     . ./servett setup example"
  echo "                 | Which will allow you to run 'example' instead."
  ;;
esac

unset -f servettstash
unset -f servettunstash
