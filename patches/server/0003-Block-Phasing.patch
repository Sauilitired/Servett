From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Alexander=20S=C3=B6derberg?= <sauilitired@gmail.com>
Date: Fri, 20 Mar 2020 22:23:56 +0100
Subject: [PATCH] Block Phasing


diff --git a/src/main/java/net/minecraft/server/BlockAccessAir.java b/src/main/java/net/minecraft/server/BlockAccessAir.java
index 30cbfc8eac20910aa55951e3dce63862f5a43c37..18e8d7182e4cf46d1e31abdeae33efca96bb7cb5 100644
--- a/src/main/java/net/minecraft/server/BlockAccessAir.java
+++ b/src/main/java/net/minecraft/server/BlockAccessAir.java
@@ -35,4 +35,11 @@ public enum BlockAccessAir implements IBlockAccess {
     public Fluid getFluid(BlockPosition blockposition) {
         return FluidTypes.EMPTY.h();
     }
+
+    // Servett Start
+    @Override public IBlockData getType(BlockPosition position, EntityPlayer tickingPlayer) {
+        return getType(position);
+    }
+    // Servett End
+
 }
diff --git a/src/main/java/net/minecraft/server/BlockPosition.java b/src/main/java/net/minecraft/server/BlockPosition.java
index 2d07d350d2b73197b6ea73cf90ff59679da7e0e7..04dd68f43cd6ff6a7be417a185f0b099e74be14c 100644
--- a/src/main/java/net/minecraft/server/BlockPosition.java
+++ b/src/main/java/net/minecraft/server/BlockPosition.java
@@ -4,6 +4,10 @@ import com.google.common.collect.AbstractIterator;
 import com.google.common.collect.Lists;
 import com.mojang.datafixers.Dynamic;
 import com.mojang.datafixers.types.DynamicOps;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+import javax.annotation.concurrent.Immutable;
 import java.util.List;
 import java.util.Spliterator.OfInt;
 import java.util.Spliterators.AbstractSpliterator;
@@ -11,9 +15,6 @@ import java.util.function.Consumer;
 import java.util.stream.IntStream;
 import java.util.stream.Stream;
 import java.util.stream.StreamSupport;
-import javax.annotation.concurrent.Immutable;
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
 
 @Immutable
 public class BlockPosition extends BaseBlockPosition implements MinecraftSerializable {
@@ -99,6 +100,13 @@ public class BlockPosition extends BaseBlockPosition implements MinecraftSeriali
         return new BlockPosition(b(i), c(i), d(i));
     }
 
+    // Servett Start
+    // Obfuscation Helper
+    public static long at(int x, int y, int z) {
+        return a(x, y, z);
+    }
+    // Servett End
+
     public static long a(int i, int j, int k) {
         long l = 0L;
 
diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java
index 8b8e1d900e1a5e6c4418fc3822afb6de4ba87983..2bdfd89def08c05530284f9d76d4fe09c8e504e9 100644
--- a/src/main/java/net/minecraft/server/Chunk.java
+++ b/src/main/java/net/minecraft/server/Chunk.java
@@ -7,30 +7,37 @@ import it.unimi.dsi.fastutil.longs.LongOpenHashSet;
 import it.unimi.dsi.fastutil.longs.LongSet;
 import it.unimi.dsi.fastutil.shorts.ShortList;
 import it.unimi.dsi.fastutil.shorts.ShortListIterator;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+import javax.annotation.Nullable;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
-import java.util.Set;
 import java.util.Map.Entry;
+import java.util.Set;
 import java.util.function.Consumer;
 import java.util.function.Predicate;
 import java.util.function.Supplier;
 import java.util.stream.Stream;
 import java.util.stream.StreamSupport;
-import javax.annotation.Nullable;
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
 
 public class Chunk implements IChunkAccess {
 
     private static final Logger LOGGER = LogManager.getLogger();
-    public static final ChunkSection a = null; public static final ChunkSection EMPTY_CHUNK_SECTION = Chunk.a; // Paper - OBFHELPER
+    public static final ChunkSection a = null;
+    public static final ChunkSection EMPTY_CHUNK_SECTION = Chunk.a; // Paper - OBFHELPER
     private final ChunkSection[] sections;
     private BiomeStorage d;
     private final Map<BlockPosition, NBTTagCompound> e;
-    public boolean loaded; public boolean isLoaded() { return loaded; } // Paper - OBFHELPER
+    public boolean loaded;
+
+    public boolean isLoaded() {
+        return loaded;
+    } // Paper - OBFHELPER
+
     public final World world;
     public final Map<HeightMap.Type, HeightMap> heightMap;
     private final ChunkConverter i;
@@ -45,25 +52,27 @@ public class Chunk implements IChunkAccess {
     public long lastSaved; // Paper
     private volatile boolean s;
     private long inhabitedTime;
-    @Nullable
-    private Supplier<PlayerChunk.State> u;
-    @Nullable
-    private Consumer<Chunk> v;
-    private final ChunkCoordIntPair loc; public final long coordinateKey; // Paper - cache coordinate key
+    @Nullable private Supplier<PlayerChunk.State> u;
+    @Nullable private Consumer<Chunk> v;
+    private final ChunkCoordIntPair loc;
+    public final long coordinateKey; // Paper - cache coordinate key
     private volatile boolean x;
 
-    final com.destroystokyo.paper.util.maplist.IBlockDataList tickingList = new com.destroystokyo.paper.util.maplist.IBlockDataList(); // Paper
+    final com.destroystokyo.paper.util.maplist.IBlockDataList tickingList =
+        new com.destroystokyo.paper.util.maplist.IBlockDataList(); // Paper
 
     public Chunk(World world, ChunkCoordIntPair chunkcoordintpair, BiomeStorage biomestorage) {
-        this(world, chunkcoordintpair, biomestorage, ChunkConverter.a, TickListEmpty.b(), TickListEmpty.b(), 0L, (ChunkSection[]) null, (Consumer) null);
+        this(world, chunkcoordintpair, biomestorage, ChunkConverter.a, TickListEmpty.b(),
+            TickListEmpty.b(), 0L, (ChunkSection[]) null, (Consumer) null);
     }
 
     // Paper start
     public final co.aikar.util.Counter<String> entityCounts = new co.aikar.util.Counter<>();
     public final co.aikar.util.Counter<String> tileEntityCounts = new co.aikar.util.Counter<>();
+
+
     private class TileEntityHashMap extends java.util.HashMap<BlockPosition, TileEntity> {
-        @Override
-        public TileEntity put(BlockPosition key, TileEntity value) {
+        @Override public TileEntity put(BlockPosition key, TileEntity value) {
             TileEntity replaced = super.put(key, value);
             if (replaced != null) {
                 replaced.setCurrentChunk(null);
@@ -76,8 +85,7 @@ public class Chunk implements IChunkAccess {
             return replaced;
         }
 
-        @Override
-        public TileEntity remove(Object key) {
+        @Override public TileEntity remove(Object key) {
             TileEntity removed = super.remove(key);
             if (removed != null) {
                 removed.setCurrentChunk(null);
@@ -86,13 +94,17 @@ public class Chunk implements IChunkAccess {
             return removed;
         }
     }
+
+
     // Track the number of minecarts and items
     // Keep this synced with entitySlices.add() and entitySlices.remove()
     private final int[] itemCounts = new int[16];
     private final int[] inventoryEntityCounts = new int[16];
     // Paper end
 
-    public Chunk(World world, ChunkCoordIntPair chunkcoordintpair, BiomeStorage biomestorage, ChunkConverter chunkconverter, TickList<Block> ticklist, TickList<FluidType> ticklist1, long i, @Nullable ChunkSection[] achunksection, @Nullable Consumer<Chunk> consumer) {
+    public Chunk(World world, ChunkCoordIntPair chunkcoordintpair, BiomeStorage biomestorage,
+        ChunkConverter chunkconverter, TickList<Block> ticklist, TickList<FluidType> ticklist1,
+        long i, @Nullable ChunkSection[] achunksection, @Nullable Consumer<Chunk> consumer) {
         this.sections = new ChunkSection[16];
         this.e = Maps.newHashMap();
         this.heightMap = Maps.newEnumMap(HeightMap.Type.class);
@@ -102,7 +114,9 @@ public class Chunk implements IChunkAccess {
         this.n = new ShortList[16];
         this.entitySlices = (List[]) (new List[16]); // Spigot
         this.world = world;
-        this.loc = chunkcoordintpair; this.coordinateKey = MCUtil.getCoordinateKey(chunkcoordintpair); // Paper - cache coordinate key
+        this.loc = chunkcoordintpair;
+        this.coordinateKey =
+            MCUtil.getCoordinateKey(chunkcoordintpair); // Paper - cache coordinate key
         this.i = chunkconverter;
         HeightMap.Type[] aheightmap_type = HeightMap.Type.values();
         int j = aheightmap_type.length;
@@ -130,17 +144,24 @@ public class Chunk implements IChunkAccess {
                 for (ChunkSection section : achunksection) {
                     if (section != null) {
                         section.chunk = this;
-                        int offset = com.destroystokyo.paper.util.maplist.IBlockDataList.getLocationKey(0, section.yPos, 0);
-                        for (it.unimi.dsi.fastutil.longs.LongIterator iterator = section.tickingList.getRawIterator(); iterator.hasNext();) {
+                        int offset = com.destroystokyo.paper.util.maplist.IBlockDataList
+                            .getLocationKey(0, section.yPos, 0);
+                        for (it.unimi.dsi.fastutil.longs.LongIterator iterator =
+                             section.tickingList.getRawIterator(); iterator.hasNext(); ) {
                             long raw = iterator.nextLong();
-                            this.tickingList.add(com.destroystokyo.paper.util.maplist.IBlockDataList.getLocationFromRaw(raw) + offset, com.destroystokyo.paper.util.maplist.IBlockDataList.getBlockDataFromRaw(raw));
+                            this.tickingList.add(com.destroystokyo.paper.util.maplist.IBlockDataList
+                                    .getLocationFromRaw(raw) + offset,
+                                com.destroystokyo.paper.util.maplist.IBlockDataList
+                                    .getBlockDataFromRaw(raw));
                         }
                     }
                 }
                 // Paper end
                 System.arraycopy(achunksection, 0, this.sections, 0, this.sections.length);
             } else {
-                Chunk.LOGGER.warn("Could not set level chunk sections, array length is {} instead of {}", achunksection.length, this.sections.length);
+                Chunk.LOGGER
+                    .warn("Could not set level chunk sections, array length is {} instead of {}",
+                        achunksection.length, this.sections.length);
             }
         }
 
@@ -149,6 +170,7 @@ public class Chunk implements IChunkAccess {
     }
 
     public org.bukkit.Chunk bukkitChunk;
+
     public org.bukkit.Chunk getBukkitChunk() {
         return bukkitChunk;
     }
@@ -158,7 +180,8 @@ public class Chunk implements IChunkAccess {
     // CraftBukkit end
 
     // Paper start
-    public final com.destroystokyo.paper.util.maplist.EntityList entities = new com.destroystokyo.paper.util.maplist.EntityList();
+    public final com.destroystokyo.paper.util.maplist.EntityList entities =
+        new com.destroystokyo.paper.util.maplist.EntityList();
     public PlayerChunk playerChunk;
     // Paper end
 
@@ -175,12 +198,14 @@ public class Chunk implements IChunkAccess {
     boolean loadedTicketLevel;
 
     private long neighbourChunksLoadedBitset;
-    private final Chunk[] loadedNeighbourChunks = new Chunk[(NEIGHBOUR_CACHE_RADIUS * 2 + 1) * (NEIGHBOUR_CACHE_RADIUS * 2 + 1)];
+    private final Chunk[] loadedNeighbourChunks =
+        new Chunk[(NEIGHBOUR_CACHE_RADIUS * 2 + 1) * (NEIGHBOUR_CACHE_RADIUS * 2 + 1)];
 
     private static int getNeighbourIndex(final int relativeX, final int relativeZ) {
         // index = (relativeX + NEIGHBOUR_CACHE_RADIUS) + (relativeZ + NEIGHBOUR_CACHE_RADIUS) * (NEIGHBOUR_CACHE_RADIUS * 2 + 1)
         // optimised variant of the above by moving some of the ops to compile time
-        return relativeX + (relativeZ * (NEIGHBOUR_CACHE_RADIUS * 2 + 1)) + (NEIGHBOUR_CACHE_RADIUS + NEIGHBOUR_CACHE_RADIUS * ((NEIGHBOUR_CACHE_RADIUS * 2 + 1)));
+        return relativeX + (relativeZ * (NEIGHBOUR_CACHE_RADIUS * 2 + 1)) + (NEIGHBOUR_CACHE_RADIUS
+            + NEIGHBOUR_CACHE_RADIUS * ((NEIGHBOUR_CACHE_RADIUS * 2 + 1)));
     }
 
     public final Chunk getRelativeNeighbourIfLoaded(final int relativeX, final int relativeZ) {
@@ -188,12 +213,16 @@ public class Chunk implements IChunkAccess {
     }
 
     public final boolean isNeighbourLoaded(final int relativeX, final int relativeZ) {
-        return (this.neighbourChunksLoadedBitset & (1L << getNeighbourIndex(relativeX, relativeZ))) != 0;
+        return (this.neighbourChunksLoadedBitset & (1L << getNeighbourIndex(relativeX, relativeZ)))
+            != 0;
     }
 
-    public final void setNeighbourLoaded(final int relativeX, final int relativeZ, final Chunk chunk) {
+    public final void setNeighbourLoaded(final int relativeX, final int relativeZ,
+        final Chunk chunk) {
         if (chunk == null) {
-            throw new IllegalArgumentException("Chunk must be non-null, neighbour: (" + relativeX + "," + relativeZ + "), chunk: " + this.loc);
+            throw new IllegalArgumentException(
+                "Chunk must be non-null, neighbour: (" + relativeX + "," + relativeZ + "), chunk: "
+                    + this.loc);
         }
         final int index = getNeighbourIndex(relativeX, relativeZ);
         this.loadedNeighbourChunks[index] = chunk;
@@ -251,7 +280,9 @@ public class Chunk implements IChunkAccess {
     // Tuinity end
 
     public Chunk(World world, ProtoChunk protochunk) {
-        this(world, protochunk.getPos(), protochunk.getBiomeIndex(), protochunk.p(), protochunk.n(), protochunk.o(), protochunk.getInhabitedTime(), protochunk.getSections(), (Consumer) null);
+        this(world, protochunk.getPos(), protochunk.getBiomeIndex(), protochunk.p(), protochunk.n(),
+            protochunk.o(), protochunk.getInhabitedTime(), protochunk.getSections(),
+            (Consumer) null);
         Iterator iterator = protochunk.y().iterator();
 
         while (iterator.hasNext()) {
@@ -294,33 +325,57 @@ public class Chunk implements IChunkAccess {
         this.needsDecoration = true; // CraftBukkit
     }
 
-    @Override
-    public HeightMap a(HeightMap.Type heightmap_type) {
+    @Override public HeightMap a(HeightMap.Type heightmap_type) {
         return (HeightMap) this.heightMap.computeIfAbsent(heightmap_type, (heightmap_type1) -> {
             return new HeightMap(this, heightmap_type1);
         });
     }
 
-    @Override
-    public Set<BlockPosition> c() {
+    @Override public Set<BlockPosition> c() {
         Set<BlockPosition> set = Sets.newHashSet(this.e.keySet());
 
         set.addAll(this.tileEntities.keySet());
         return set;
     }
 
-    @Override
-    public ChunkSection[] getSections() {
+    @Override public ChunkSection[] getSections() {
         return this.sections;
     }
 
     // Paper start - Optimize getBlockData to reduce instructions
-    public final IBlockData getBlockData(BlockPosition pos) { return getBlockData(pos.getX(), pos.getY(), pos.getZ()); } // Paper
+    public final IBlockData getBlockData(BlockPosition pos) {
+        return getBlockData(pos.getX(), pos.getY(), pos.getZ());
+    } // Paper
+
     public IBlockData getType(BlockPosition blockposition) {
         return this.getBlockData(blockposition.getX(), blockposition.getY(), blockposition.getZ());
     }
 
     public final IBlockData getBlockData(final int x, final int y, final int z) {
+        // Servett Start
+        try {
+            synchronized (world.tickingPlayerLock) {
+                if (world.tickingPlayer != null &&
+                    world.tickingPlayer.modifiedBlocks != null) {
+                    final PlayerBlockModification blockModification =
+                        world.tickingPlayer.modifiedBlocks.get(BlockPosition.at(x, y, z));
+                    if (blockModification != null) {
+                        return blockModification.getModifiedBlock();
+                    }
+                }
+            }
+        } catch (final Exception e) {
+            System.err.printf(
+                "FAILED TO READ PLAYER SPECIFIC BLOCK. TICKING PLAYER = %s. READING DEFAULT.\n",
+                world.tickingPlayer);
+            e.printStackTrace();
+        }
+        return getBlockDataInternal(x, y, z);
+        // Servett End
+    }
+
+    // Servett Start
+    public final IBlockData getBlockDataInternal(final int x, final int y, final int z) {
         // Method body / logic copied from below
         final int i = y >> 4;
         if (y >= 0 && i < this.sections.length && this.sections[i] != null) {
@@ -329,6 +384,7 @@ public class Chunk implements IChunkAccess {
         }
         return Blocks.AIR.getBlockData();
     }
+    // Servett End
 
     public IBlockData getBlockData_unused(int i, int j, int k) {
         // Paper end
@@ -357,7 +413,8 @@ public class Chunk implements IChunkAccess {
                 return Blocks.AIR.getBlockData();
             } catch (Throwable throwable) {
                 CrashReport crashreport = CrashReport.a(throwable, "Getting block state");
-                CrashReportSystemDetails crashreportsystemdetails = crashreport.a("Block being got");
+                CrashReportSystemDetails crashreportsystemdetails =
+                    crashreport.a("Block being got");
 
                 crashreportsystemdetails.a("Location", () -> {
                     return CrashReportSystemDetails.a(i, j, k);
@@ -368,19 +425,16 @@ public class Chunk implements IChunkAccess {
     }
 
     // Paper start - If loaded util
-    @Override
-    public Fluid getFluidIfLoaded(BlockPosition blockposition) {
+    @Override public Fluid getFluidIfLoaded(BlockPosition blockposition) {
         return this.getFluid(blockposition);
     }
 
-    @Override
-    public IBlockData getTypeIfLoaded(BlockPosition blockposition) {
+    @Override public IBlockData getTypeIfLoaded(BlockPosition blockposition) {
         return this.getType(blockposition);
     }
     // Paper end
 
-    @Override
-    public Fluid getFluid(BlockPosition blockposition) {
+    @Override public Fluid getFluid(BlockPosition blockposition) {
         return this.a(blockposition.getX(), blockposition.getY(), blockposition.getZ());
     }
 
@@ -411,14 +465,14 @@ public class Chunk implements IChunkAccess {
     }
 
     // CraftBukkit start
-    @Nullable
-    @Override
-    public IBlockData setType(BlockPosition blockposition, IBlockData iblockdata, boolean flag) {
+    @Nullable @Override public IBlockData setType(BlockPosition blockposition,
+        IBlockData iblockdata, boolean flag) {
         return this.setType(blockposition, iblockdata, flag, true);
     }
 
     @Nullable
-    public IBlockData setType(BlockPosition blockposition, IBlockData iblockdata, boolean flag, boolean doPlace) {
+    public IBlockData setType(BlockPosition blockposition, IBlockData iblockdata, boolean flag,
+        boolean doPlace) {
         // CraftBukkit end
         int i = blockposition.getX() & 15;
         int j = blockposition.getY();
@@ -430,7 +484,8 @@ public class Chunk implements IChunkAccess {
                 return null;
             }
 
-            chunksection = new ChunkSection(j >> 4 << 4, this, this.world, true); // Paper - Anti-Xray
+            chunksection =
+                new ChunkSection(world, j >> 4 << 4, this, this.world, true); // Paper - Anti-Xray
             this.sections[j >> 4] = chunksection;
         }
 
@@ -444,7 +499,8 @@ public class Chunk implements IChunkAccess {
             Block block1 = iblockdata1.getBlock();
 
             ((HeightMap) this.heightMap.get(HeightMap.Type.MOTION_BLOCKING)).a(i, j, k, iblockdata);
-            ((HeightMap) this.heightMap.get(HeightMap.Type.MOTION_BLOCKING_NO_LEAVES)).a(i, j, k, iblockdata);
+            ((HeightMap) this.heightMap.get(HeightMap.Type.MOTION_BLOCKING_NO_LEAVES))
+                .a(i, j, k, iblockdata);
             ((HeightMap) this.heightMap.get(HeightMap.Type.OCEAN_FLOOR)).a(i, j, k, iblockdata);
             ((HeightMap) this.heightMap.get(HeightMap.Type.WORLD_SURFACE)).a(i, j, k, iblockdata);
             boolean flag2 = chunksection.c();
@@ -472,7 +528,8 @@ public class Chunk implements IChunkAccess {
                 }
 
                 // CraftBukkit - Don't place while processing the BlockPlaceEvent, unless it's a BlockContainer. Prevents blocks such as TNT from activating when cancelled.
-                if (!this.world.isClientSide && doPlace && (!this.world.captureBlockStates || block instanceof BlockTileEntity)) {
+                if (!this.world.isClientSide && doPlace && (!this.world.captureBlockStates
+                    || block instanceof BlockTileEntity)) {
                     iblockdata.onPlace(this.world, blockposition, iblockdata1, flag);
                 }
 
@@ -492,20 +549,19 @@ public class Chunk implements IChunkAccess {
         }
     }
 
-    @Nullable
-    public LightEngine e() {
+    @Nullable public LightEngine e() {
         return this.world.getChunkProvider().getLightEngine();
     }
 
-    @Override
-    public void a(Entity entity) {
+    @Override public void a(Entity entity) {
         com.tuinity.tuinity.util.TickThread.softEnsureTickThread("Async addEntity call"); // Tuinity
         this.q = true;
         int i = MathHelper.floor(entity.locX() / 16.0D);
         int j = MathHelper.floor(entity.locZ() / 16.0D);
 
         if (i != this.loc.x || j != this.loc.z) {
-            Chunk.LOGGER.warn("Wrong location! ({}, {}) should be ({}, {}), {}", i, j, this.loc.x, this.loc.z, entity);
+            Chunk.LOGGER.warn("Wrong location! ({}, {}) should be ({}, {}), {}", i, j, this.loc.x,
+                this.loc.z, entity);
             entity.dead = true;
             return; // Paper
         }
@@ -523,23 +579,29 @@ public class Chunk implements IChunkAccess {
         List<Entity> nextSlice = this.entitySlices[k]; // the next list to be added to
         List<Entity> currentSlice = entity.entitySlice;
         if (nextSlice == currentSlice) {
-            if (World.DEBUG_ENTITIES) MinecraftServer.LOGGER.warn("Entity was already in this chunk!" + entity, new Throwable());
+            if (World.DEBUG_ENTITIES)
+                MinecraftServer.LOGGER
+                    .warn("Entity was already in this chunk!" + entity, new Throwable());
             return; // ??? silly plugins
         }
         if (currentSlice != null && currentSlice.contains(entity)) {
             // Still in an old chunk...
-            if (World.DEBUG_ENTITIES) MinecraftServer.LOGGER.warn("Entity is still in another chunk!" + entity, new Throwable());
+            if (World.DEBUG_ENTITIES)
+                MinecraftServer.LOGGER
+                    .warn("Entity is still in another chunk!" + entity, new Throwable());
             Chunk chunk = entity.getCurrentChunk();
             if (chunk != null) {
                 chunk.removeEntity(entity);
             } else {
                 removeEntity(entity);
             }
-            currentSlice.remove(entity); // Just incase the above did not remove from the previous slice
+            currentSlice
+                .remove(entity); // Just incase the above did not remove from the previous slice
         }
         // Paper end
 
-        if (!entity.inChunk || entity.getCurrentChunk() != this) entityCounts.increment(entity.getMinecraftKeyString()); // Paper
+        if (!entity.inChunk || entity.getCurrentChunk() != this)
+            entityCounts.increment(entity.getMinecraftKeyString()); // Paper
         entity.inChunk = true;
         entity.setCurrentChunk(this); // Paper
         entity.chunkX = this.loc.x;
@@ -558,18 +620,21 @@ public class Chunk implements IChunkAccess {
         this.markDirty(); // Paper
     }
 
-    @Override
-    public void a(HeightMap.Type heightmap_type, long[] along) {
+    @Override public void a(HeightMap.Type heightmap_type, long[] along) {
         ((HeightMap) this.heightMap.get(heightmap_type)).a(along);
     }
 
-    public void removeEntity(Entity entity) { this.b(entity); } // Paper - OBFHELPER
+    public void removeEntity(Entity entity) {
+        this.b(entity);
+    } // Paper - OBFHELPER
+
     public void b(Entity entity) {
         this.a(entity, entity.chunkY);
     }
 
     public void a(Entity entity, int i) {
-        com.tuinity.tuinity.util.TickThread.softEnsureTickThread("Async removeEntity call"); // Tuinity
+        com.tuinity.tuinity.util.TickThread
+            .softEnsureTickThread("Async removeEntity call"); // Tuinity
         if (i < 0) {
             i = 0;
         }
@@ -579,7 +644,8 @@ public class Chunk implements IChunkAccess {
         }
 
         // Paper start
-        if (entity.currentChunk != null && entity.currentChunk.get() == this) entity.setCurrentChunk(null);
+        if (entity.currentChunk != null && entity.currentChunk.get() == this)
+            entity.setCurrentChunk(null);
         if (entitySlices[i] == entity.entitySlice) {
             entity.entitySlice = null;
         }
@@ -597,7 +663,10 @@ public class Chunk implements IChunkAccess {
         this.entities.remove(entity); // Paper
     }
 
-    public int getHighestBlockY(HeightMap.Type heightmap_type, int i, int j) { return this.a(heightmap_type, i, j) + 1; } // Paper - sort of an obfhelper, but without -1
+    public int getHighestBlockY(HeightMap.Type heightmap_type, int i, int j) {
+        return this.a(heightmap_type, i, j) + 1;
+    } // Paper - sort of an obfhelper, but without -1
+
     @Override public int a(HeightMap.Type heightmap_type, int i, int j) { // Paper
         return ((HeightMap) this.heightMap.get(heightmap_type)).a(i & 15, j & 15) - 1;
     }
@@ -608,23 +677,23 @@ public class Chunk implements IChunkAccess {
     }
     // Tuinity end
 
-    @Nullable
-    private TileEntity j(BlockPosition blockposition) {
+    @Nullable private TileEntity j(BlockPosition blockposition) {
         IBlockData iblockdata = this.getType(blockposition);
         Block block = iblockdata.getBlock();
 
         return !block.isTileEntity() ? null : ((ITileEntity) block).createTile(this.world);
     }
 
-    @Nullable
-    @Override
-    public TileEntity getTileEntity(BlockPosition blockposition) {
+    @Nullable @Override public TileEntity getTileEntity(BlockPosition blockposition) {
         return this.a(blockposition, Chunk.EnumTileEntityState.CHECK);
     }
 
-    @Nullable public final TileEntity getTileEntityImmediately(BlockPosition pos) { return this.a(pos, EnumTileEntityState.IMMEDIATE); } // Paper - OBFHELPER
-    @Nullable
-    public TileEntity a(BlockPosition blockposition, Chunk.EnumTileEntityState chunk_enumtileentitystate) {
+    @Nullable public final TileEntity getTileEntityImmediately(BlockPosition pos) {
+        return this.a(pos, EnumTileEntityState.IMMEDIATE);
+    } // Paper - OBFHELPER
+
+    @Nullable public TileEntity a(BlockPosition blockposition,
+        Chunk.EnumTileEntityState chunk_enumtileentitystate) {
         // CraftBukkit start
         TileEntity tileentity = world.capturedTileEntities.get(blockposition);
         if (tileentity == null) {
@@ -665,12 +734,12 @@ public class Chunk implements IChunkAccess {
 
     }
 
-    @Override
-    public void setTileEntity(BlockPosition blockposition, TileEntity tileentity) {
+    @Override public void setTileEntity(BlockPosition blockposition, TileEntity tileentity) {
         if (this.getType(blockposition).getBlock() instanceof ITileEntity) {
             tileentity.setLocation(this.world, blockposition);
             tileentity.r();
-            TileEntity tileentity1 = (TileEntity) this.tileEntities.put(blockposition.immutableCopy(), tileentity);
+            TileEntity tileentity1 =
+                (TileEntity) this.tileEntities.put(blockposition.immutableCopy(), tileentity);
 
             if (tileentity1 != null && tileentity1 != tileentity) {
                 tileentity1.ab_();
@@ -678,16 +747,18 @@ public class Chunk implements IChunkAccess {
 
             // CraftBukkit start
             // Paper start - Remove invalid mob spawner tile entities
-        } else if (tileentity instanceof TileEntityMobSpawner && !(getBlockData(blockposition.getX(), blockposition.getY(), blockposition.getZ()).getBlock() instanceof BlockMobSpawner)) {
+        } else if (tileentity instanceof TileEntityMobSpawner && !(getBlockData(
+            blockposition.getX(), blockposition.getY(), blockposition.getZ())
+            .getBlock() instanceof BlockMobSpawner)) {
             this.tileEntities.remove(blockposition);
             // Paper end
         } else {
             // Paper start
             ServerInternalException e = new ServerInternalException(
-                    "Attempted to place a tile entity (" + tileentity + ") at " + tileentity.position.getX() + ","
-                            + tileentity.position.getY() + "," + tileentity.position.getZ()
-                            + " (" + getType(blockposition) + ") where there was no entity tile!\n" +
-                            "Chunk coordinates: " + (this.loc.x * 16) + "," + (this.loc.z * 16));
+                "Attempted to place a tile entity (" + tileentity + ") at " + tileentity.position
+                    .getX() + "," + tileentity.position.getY() + "," + tileentity.position.getZ()
+                    + " (" + getType(blockposition) + ") where there was no entity tile!\n"
+                    + "Chunk coordinates: " + (this.loc.x * 16) + "," + (this.loc.z * 16));
             e.printStackTrace();
             ServerInternalException.reportInternalException(e);
 
@@ -701,14 +772,12 @@ public class Chunk implements IChunkAccess {
         }
     }
 
-    @Override
-    public void a(NBTTagCompound nbttagcompound) {
-        this.e.put(new BlockPosition(nbttagcompound.getInt("x"), nbttagcompound.getInt("y"), nbttagcompound.getInt("z")), nbttagcompound);
+    @Override public void a(NBTTagCompound nbttagcompound) {
+        this.e.put(new BlockPosition(nbttagcompound.getInt("x"), nbttagcompound.getInt("y"),
+            nbttagcompound.getInt("z")), nbttagcompound);
     }
 
-    @Nullable
-    @Override
-    public NBTTagCompound i(BlockPosition blockposition) {
+    @Nullable @Override public NBTTagCompound i(BlockPosition blockposition) {
         TileEntity tileentity = this.getTileEntity(blockposition);
         NBTTagCompound nbttagcompound;
 
@@ -727,8 +796,7 @@ public class Chunk implements IChunkAccess {
         }
     }
 
-    @Override
-    public void removeTileEntity(BlockPosition blockposition) {
+    @Override public void removeTileEntity(BlockPosition blockposition) {
         if (this.loaded || this.world.p_()) {
             TileEntity tileentity = (TileEntity) this.tileEntities.remove(blockposition);
 
@@ -752,10 +820,11 @@ public class Chunk implements IChunkAccess {
         // Tuinity start - neighbour cache
         int chunkX = this.loc.x;
         int chunkZ = this.loc.z;
-        ChunkProviderServer chunkProvider = ((WorldServer)this.world).getChunkProvider();
+        ChunkProviderServer chunkProvider = ((WorldServer) this.world).getChunkProvider();
         for (int dx = -NEIGHBOUR_CACHE_RADIUS; dx <= NEIGHBOUR_CACHE_RADIUS; ++dx) {
             for (int dz = -NEIGHBOUR_CACHE_RADIUS; dz <= NEIGHBOUR_CACHE_RADIUS; ++dz) {
-                Chunk neighbour = chunkProvider.getChunkAtIfLoadedMainThreadNoCache(chunkX + dx, chunkZ + dz);
+                Chunk neighbour =
+                    chunkProvider.getChunkAtIfLoadedMainThreadNoCache(chunkX + dx, chunkZ + dz);
                 if (neighbour != null) {
                     neighbour.setNeighbourLoaded(-dx, -dz, this);
                     // should be in cached already
@@ -767,38 +836,43 @@ public class Chunk implements IChunkAccess {
         this.loadedTicketLevel = true;
         // Tuinity end - neighbour cache
 
-        ((WorldServer)this.world).onChunkLoad(this); // Tuinity - optimise entity list iteration
+        ((WorldServer) this.world).onChunkLoad(this); // Tuinity - optimise entity list iteration
         org.bukkit.Server server = this.world.getServer();
-        ((WorldServer)this.world).getChunkProvider().addLoadedChunk(this); // Paper
+        ((WorldServer) this.world).getChunkProvider().addLoadedChunk(this); // Paper
         if (server != null) {
             /*
              * If it's a new world, the first few chunks are generated inside
              * the World constructor. We can't reliably alter that, so we have
              * no way of creating a CraftWorld/CraftServer at that point.
              */
-            server.getPluginManager().callEvent(new org.bukkit.event.world.ChunkLoadEvent(this.bukkitChunk, this.needsDecoration));
+            server.getPluginManager().callEvent(
+                new org.bukkit.event.world.ChunkLoadEvent(this.bukkitChunk, this.needsDecoration));
 
             if (this.needsDecoration) {
-                try (co.aikar.timings.Timing ignored = this.world.timings.syncChunkLoadPopulateTimer.startTiming()) { // Paper
-                this.needsDecoration = false;
-                java.util.Random random = new java.util.Random();
-                random.setSeed(world.getSeed());
-                long xRand = random.nextLong() / 2L * 2L + 1L;
-                long zRand = random.nextLong() / 2L * 2L + 1L;
-                random.setSeed((long) this.loc.x * xRand + (long) this.loc.z * zRand ^ world.getSeed());
-
-                org.bukkit.World world = this.world.getWorld();
-                if (world != null) {
-                    this.world.populating = true;
-                    try {
-                        for (org.bukkit.generator.BlockPopulator populator : world.getPopulators()) {
-                            populator.populate(world, random, bukkitChunk);
+                try (co.aikar.timings.Timing ignored = this.world.timings.syncChunkLoadPopulateTimer
+                    .startTiming()) { // Paper
+                    this.needsDecoration = false;
+                    java.util.Random random = new java.util.Random();
+                    random.setSeed(world.getSeed());
+                    long xRand = random.nextLong() / 2L * 2L + 1L;
+                    long zRand = random.nextLong() / 2L * 2L + 1L;
+                    random.setSeed(
+                        (long) this.loc.x * xRand + (long) this.loc.z * zRand ^ world.getSeed());
+
+                    org.bukkit.World world = this.world.getWorld();
+                    if (world != null) {
+                        this.world.populating = true;
+                        try {
+                            for (org.bukkit.generator.BlockPopulator populator : world
+                                .getPopulators()) {
+                                populator.populate(world, random, bukkitChunk);
+                            }
+                        } finally {
+                            this.world.populating = false;
                         }
-                    } finally {
-                        this.world.populating = false;
                     }
-                }
-                server.getPluginManager().callEvent(new org.bukkit.event.world.ChunkPopulateEvent(bukkitChunk));
+                    server.getPluginManager()
+                        .callEvent(new org.bukkit.event.world.ChunkPopulateEvent(bukkitChunk));
                 } // Paper
             }
         }
@@ -806,18 +880,20 @@ public class Chunk implements IChunkAccess {
 
     public void unloadCallback() {
         org.bukkit.Server server = this.world.getServer();
-        org.bukkit.event.world.ChunkUnloadEvent unloadEvent = new org.bukkit.event.world.ChunkUnloadEvent(this.bukkitChunk, this.isNeedsSaving());
+        org.bukkit.event.world.ChunkUnloadEvent unloadEvent =
+            new org.bukkit.event.world.ChunkUnloadEvent(this.bukkitChunk, this.isNeedsSaving());
         server.getPluginManager().callEvent(unloadEvent);
         // note: saving can be prevented, but not forced if no saving is actually required
         this.mustNotSave = !unloadEvent.isSaveChunk();
-        ((WorldServer)this.world).getChunkProvider().removeLoadedChunk(this); // Paper
+        ((WorldServer) this.world).getChunkProvider().removeLoadedChunk(this); // Paper
         // Tuinity start - neighbour cache
         int chunkX = this.loc.x;
         int chunkZ = this.loc.z;
-        ChunkProviderServer chunkProvider = ((WorldServer)this.world).getChunkProvider();
+        ChunkProviderServer chunkProvider = ((WorldServer) this.world).getChunkProvider();
         for (int dx = -NEIGHBOUR_CACHE_RADIUS; dx <= NEIGHBOUR_CACHE_RADIUS; ++dx) {
             for (int dz = -NEIGHBOUR_CACHE_RADIUS; dz <= NEIGHBOUR_CACHE_RADIUS; ++dz) {
-                Chunk neighbour = chunkProvider.getChunkAtIfLoadedMainThreadNoCache(chunkX + dx, chunkZ + dz);
+                Chunk neighbour =
+                    chunkProvider.getChunkAtIfLoadedMainThreadNoCache(chunkX + dx, chunkZ + dz);
                 if (neighbour != null) {
                     neighbour.setNeighbourUnloaded(-dx, -dz);
                 }
@@ -827,7 +903,7 @@ public class Chunk implements IChunkAccess {
         this.resetNeighbours();
         // Tuinity end - neighbour cache
 
-        ((WorldServer)this.world).onChunkUnload(this); // Tuinity - optimise entity list iteration
+        ((WorldServer) this.world).onChunkUnload(this); // Tuinity - optimise entity list iteration
     }
     // CraftBukkit end
 
@@ -835,8 +911,10 @@ public class Chunk implements IChunkAccess {
         this.s = true;
     }
 
-    public void a(@Nullable Entity entity, AxisAlignedBB axisalignedbb, List<Entity> list, @Nullable Predicate<? super Entity> predicate) {
-        com.tuinity.tuinity.util.TickThread.softEnsureTickThread("Async getEntities call"); // Tuinity
+    public void a(@Nullable Entity entity, AxisAlignedBB axisalignedbb, List<Entity> list,
+        @Nullable Predicate<? super Entity> predicate) {
+        com.tuinity.tuinity.util.TickThread
+            .softEnsureTickThread("Async getEntities call"); // Tuinity
         int i = MathHelper.floor((axisalignedbb.minY - 2.0D) / 16.0D);
         int j = MathHelper.floor((axisalignedbb.maxY + 2.0D) / 16.0D);
 
@@ -849,7 +927,8 @@ public class Chunk implements IChunkAccess {
 
                 while (iterator.hasNext()) {
                     Entity entity1 = (Entity) iterator.next();
-                    if (entity1.shouldBeRemoved) continue; // Paper
+                    if (entity1.shouldBeRemoved)
+                        continue; // Paper
 
                     if (entity1.getBoundingBox().c(axisalignedbb) && entity1 != entity) {
                         if (predicate == null || predicate.test(entity1)) {
@@ -857,13 +936,16 @@ public class Chunk implements IChunkAccess {
                         }
 
                         if (entity1 instanceof EntityEnderDragon) {
-                            EntityComplexPart[] aentitycomplexpart = ((EntityEnderDragon) entity1).eo();
+                            EntityComplexPart[] aentitycomplexpart =
+                                ((EntityEnderDragon) entity1).eo();
                             int l = aentitycomplexpart.length;
 
                             for (int i1 = 0; i1 < l; ++i1) {
                                 EntityComplexPart entitycomplexpart = aentitycomplexpart[i1];
 
-                                if (entitycomplexpart != entity && entitycomplexpart.getBoundingBox().c(axisalignedbb) && (predicate == null || predicate.test(entitycomplexpart))) {
+                                if (entitycomplexpart != entity && entitycomplexpart
+                                    .getBoundingBox().c(axisalignedbb) && (predicate == null
+                                    || predicate.test(entitycomplexpart))) {
                                     list.add(entitycomplexpart);
                                 }
                             }
@@ -875,8 +957,10 @@ public class Chunk implements IChunkAccess {
 
     }
 
-    public <T extends Entity> void a(@Nullable EntityTypes<?> entitytypes, AxisAlignedBB axisalignedbb, List<? super T> list, Predicate<? super T> predicate) {
-        com.tuinity.tuinity.util.TickThread.softEnsureTickThread("Async getEntities call"); // Tuinity
+    public <T extends Entity> void a(@Nullable EntityTypes<?> entitytypes,
+        AxisAlignedBB axisalignedbb, List<? super T> list, Predicate<? super T> predicate) {
+        com.tuinity.tuinity.util.TickThread
+            .softEnsureTickThread("Async getEntities call"); // Tuinity
         int i = MathHelper.floor((axisalignedbb.minY - 2.0D) / 16.0D);
         int j = MathHelper.floor((axisalignedbb.maxY + 2.0D) / 16.0D);
 
@@ -888,9 +972,11 @@ public class Chunk implements IChunkAccess {
 
             while (iterator.hasNext()) {
                 T entity = (T) iterator.next(); // CraftBukkit - decompile error
-                if (entity.shouldBeRemoved) continue; // Paper
+                if (entity.shouldBeRemoved)
+                    continue; // Paper
 
-                if ((entitytypes == null || entity.getEntityType() == entitytypes) && entity.getBoundingBox().c(axisalignedbb) && predicate.test(entity)) {
+                if ((entitytypes == null || entity.getEntityType() == entitytypes) && entity
+                    .getBoundingBox().c(axisalignedbb) && predicate.test(entity)) {
                     list.add(entity);
                 }
             }
@@ -898,8 +984,10 @@ public class Chunk implements IChunkAccess {
 
     }
 
-    public <T extends Entity> void a(Class<? extends T> oclass, AxisAlignedBB axisalignedbb, List<T> list, @Nullable Predicate<? super T> predicate) {
-        com.tuinity.tuinity.util.TickThread.softEnsureTickThread("Async getEntities call"); // Tuinity
+    public <T extends Entity> void a(Class<? extends T> oclass, AxisAlignedBB axisalignedbb,
+        List<T> list, @Nullable Predicate<? super T> predicate) {
+        com.tuinity.tuinity.util.TickThread
+            .softEnsureTickThread("Async getEntities call"); // Tuinity
         int i = MathHelper.floor((axisalignedbb.minY - 2.0D) / 16.0D);
         int j = MathHelper.floor((axisalignedbb.maxY + 2.0D) / 16.0D);
 
@@ -917,7 +1005,8 @@ public class Chunk implements IChunkAccess {
         }
         // Paper end
         for (int k = i; k <= j; ++k) {
-            if (counts != null && counts[k] <= 0) continue; // Paper - Don't check a chunk if it doesn't have the type we are looking for
+            if (counts != null && counts[k] <= 0)
+                continue; // Paper - Don't check a chunk if it doesn't have the type we are looking for
             Iterator iterator = this.entitySlices[k].iterator(); // Spigot
 
             // Paper start - Don't search for inventories if we have none, and that is all we want
@@ -927,13 +1016,16 @@ public class Chunk implements IChunkAccess {
              * Make sure the inventory selector stays in sync.
              * It should be the one that checks `var1 instanceof IInventory && var1.isAlive()`
              */
-            if (predicate == IEntitySelector.isInventory() && inventoryEntityCounts[k] <= 0) continue;
+            if (predicate == IEntitySelector.isInventory() && inventoryEntityCounts[k] <= 0)
+                continue;
             // Paper end
             while (iterator.hasNext()) {
                 T t0 = (T) iterator.next(); // CraftBukkit - decompile error
-                if (t0.shouldBeRemoved) continue; // Paper
+                if (t0.shouldBeRemoved)
+                    continue; // Paper
 
-                if (oclass.isInstance(t0) && t0.getBoundingBox().c(axisalignedbb) && (predicate == null || predicate.test(t0))) { // Spigot - instance check
+                if (oclass.isInstance(t0) && t0.getBoundingBox().c(axisalignedbb) && (
+                    predicate == null || predicate.test(t0))) { // Spigot - instance check
                     list.add(t0);
                 }
             }
@@ -945,13 +1037,11 @@ public class Chunk implements IChunkAccess {
         return false;
     }
 
-    @Override
-    public ChunkCoordIntPair getPos() {
+    @Override public ChunkCoordIntPair getPos() {
         return this.loc;
     }
 
-    @Override
-    public BiomeStorage getBiomeIndex() {
+    @Override public BiomeStorage getBiomeIndex() {
         return this.d;
     }
 
@@ -963,8 +1053,7 @@ public class Chunk implements IChunkAccess {
         return this.world;
     }
 
-    @Override
-    public Collection<Entry<HeightMap.Type, HeightMap>> f() {
+    @Override public Collection<Entry<HeightMap.Type, HeightMap>> f() {
         return Collections.unmodifiableSet(this.heightMap.entrySet());
     }
 
@@ -976,101 +1065,88 @@ public class Chunk implements IChunkAccess {
         return this.entitySlices;
     }
 
-    @Override
-    public NBTTagCompound f(BlockPosition blockposition) {
+    @Override public NBTTagCompound f(BlockPosition blockposition) {
         return (NBTTagCompound) this.e.get(blockposition);
     }
 
-    @Override
-    public Stream<BlockPosition> m() {
-        return StreamSupport.stream(BlockPosition.b(this.loc.d(), 0, this.loc.e(), this.loc.f(), 255, this.loc.g()).spliterator(), false).filter((blockposition) -> {
+    @Override public Stream<BlockPosition> m() {
+        return StreamSupport.stream(
+            BlockPosition.b(this.loc.d(), 0, this.loc.e(), this.loc.f(), 255, this.loc.g())
+                .spliterator(), false).filter((blockposition) -> {
             return this.getType(blockposition).h() != 0;
         });
     }
 
-    @Override
-    public TickList<Block> n() {
+    @Override public TickList<Block> n() {
         return this.o;
     }
 
-    @Override
-    public TickList<FluidType> o() {
+    @Override public TickList<FluidType> o() {
         return this.p;
     }
 
-    @Override
-    public void setNeedsSaving(boolean flag) {
+    @Override public void setNeedsSaving(boolean flag) {
         this.s = flag;
     }
 
-    @Override
-    public boolean isNeedsSaving() {
-        return (this.s || this.q && this.world.getTime() != this.lastSaved) && !this.mustNotSave; // CraftBukkit
+    @Override public boolean isNeedsSaving() {
+        return (this.s || this.q && this.world.getTime() != this.lastSaved)
+            && !this.mustNotSave; // CraftBukkit
     }
 
     public void d(boolean flag) {
         this.q = flag;
     }
 
-    @Override
-    public void setLastSaved(long i) {
+    @Override public void setLastSaved(long i) {
         this.lastSaved = i;
     }
 
-    @Nullable
-    @Override
-    public StructureStart a(String s) {
+    @Nullable @Override public StructureStart a(String s) {
         return (StructureStart) this.l.get(s);
     }
 
-    @Override
-    public void a(String s, StructureStart structurestart) {
+    @Override public void a(String s, StructureStart structurestart) {
         this.l.put(s, structurestart);
     }
 
-    @Override
-    public Map<String, StructureStart> h() {
+    @Override public Map<String, StructureStart> h() {
         return this.l;
     }
 
-    @Override
-    public void a(Map<String, StructureStart> map) {
+    @Override public void a(Map<String, StructureStart> map) {
         this.l.clear();
         this.l.putAll(map);
     }
 
-    @Override
-    public LongSet b(String s) {
+    @Override public LongSet b(String s) {
         return (LongSet) this.m.computeIfAbsent(s, (s1) -> {
             return new LongOpenHashSet();
         });
     }
 
-    @Override
-    public void a(String s, long i) {
+    @Override public void a(String s, long i) {
         ((LongSet) this.m.computeIfAbsent(s, (s1) -> {
             return new LongOpenHashSet();
         })).add(i);
     }
 
-    @Override
-    public Map<String, LongSet> v() {
+    @Override public Map<String, LongSet> v() {
         return this.m;
     }
 
-    @Override
-    public void b(Map<String, LongSet> map) {
+    @Override public void b(Map<String, LongSet> map) {
         this.m.clear();
         this.m.putAll(map);
     }
 
-    @Override
-    public long getInhabitedTime() {
-        return world.paperConfig.fixedInhabitedTime < 0 ? this.inhabitedTime : world.paperConfig.fixedInhabitedTime; // Paper
+    @Override public long getInhabitedTime() {
+        return world.paperConfig.fixedInhabitedTime < 0 ?
+            this.inhabitedTime :
+            world.paperConfig.fixedInhabitedTime; // Paper
     }
 
-    @Override
-    public void setInhabitedTime(long i) {
+    @Override public void setInhabitedTime(long i) {
         this.inhabitedTime = i;
     }
 
@@ -1085,7 +1161,8 @@ public class Chunk implements IChunkAccess {
                     Short oshort = (Short) shortlistiterator.next();
                     BlockPosition blockposition = ProtoChunk.a(oshort, i, chunkcoordintpair);
                     IBlockData iblockdata = this.getType(blockposition);
-                    IBlockData iblockdata1 = Block.b(iblockdata, (GeneratorAccess) this.world, blockposition);
+                    IBlockData iblockdata1 =
+                        Block.b(iblockdata, (GeneratorAccess) this.world, blockposition);
 
                     this.world.setTypeAndData(blockposition, iblockdata1, 20);
                 }
@@ -1107,8 +1184,7 @@ public class Chunk implements IChunkAccess {
         this.i.a(this);
     }
 
-    @Nullable
-    private TileEntity a(BlockPosition blockposition, NBTTagCompound nbttagcompound) {
+    @Nullable private TileEntity a(BlockPosition blockposition, NBTTagCompound nbttagcompound) {
         TileEntity tileentity;
 
         if ("DUMMY".equals(nbttagcompound.getString("id"))) {
@@ -1118,7 +1194,9 @@ public class Chunk implements IChunkAccess {
                 tileentity = ((ITileEntity) block).createTile(this.world);
             } else {
                 tileentity = null;
-                Chunk.LOGGER.warn("Tried to load a DUMMY block entity @ {} but found not block entity block {} at location", blockposition, this.getType(blockposition));
+                Chunk.LOGGER.warn(
+                    "Tried to load a DUMMY block entity @ {} but found not block entity block {} at location",
+                    blockposition, this.getType(blockposition));
             }
         } else {
             tileentity = TileEntity.create(nbttagcompound);
@@ -1128,27 +1206,27 @@ public class Chunk implements IChunkAccess {
             tileentity.setLocation(this.world, blockposition);
             this.a(tileentity);
         } else {
-            Chunk.LOGGER.warn("Tried to load a block entity for block {} but failed at location {}", this.getType(blockposition), blockposition);
+            Chunk.LOGGER.warn("Tried to load a block entity for block {} but failed at location {}",
+                this.getType(blockposition), blockposition);
         }
 
         return tileentity;
     }
 
-    @Override
-    public ChunkConverter p() {
+    @Override public ChunkConverter p() {
         return this.i;
     }
 
-    @Override
-    public ShortList[] l() {
+    @Override public ShortList[] l() {
         return this.n;
     }
 
     public void B() {
         if (this.o instanceof ProtoChunkTickList) {
-            ((ProtoChunkTickList<Block>) this.o).a(this.world.getBlockTickList(), (blockposition) -> { // CraftBukkit - decompile error
-                return this.getType(blockposition).getBlock();
-            });
+            ((ProtoChunkTickList<Block>) this.o).a(this.world.getBlockTickList(),
+                (blockposition) -> { // CraftBukkit - decompile error
+                    return this.getType(blockposition).getBlock();
+                });
             this.o = TickListEmpty.b();
         } else if (this.o instanceof TickListChunk) {
             this.world.getBlockTickList().a(((TickListChunk) this.o).b());
@@ -1156,9 +1234,10 @@ public class Chunk implements IChunkAccess {
         }
 
         if (this.p instanceof ProtoChunkTickList) {
-            ((ProtoChunkTickList<FluidType>) this.p).a(this.world.getFluidTickList(), (blockposition) -> { // CraftBukkit - decompile error
-                return this.getFluid(blockposition).getType();
-            });
+            ((ProtoChunkTickList<FluidType>) this.p).a(this.world.getFluidTickList(),
+                (blockposition) -> { // CraftBukkit - decompile error
+                    return this.getFluid(blockposition).getType();
+                });
             this.p = TickListEmpty.b();
         } else if (this.p instanceof TickListChunk) {
             this.world.getFluidTickList().a(((TickListChunk) this.p).b());
@@ -1169,19 +1248,20 @@ public class Chunk implements IChunkAccess {
 
     public void a(WorldServer worldserver) {
         if (this.o == TickListEmpty.<Block>b()) { // CraftBukkit - decompile error
-            this.o = new TickListChunk<>(IRegistry.BLOCK::getKey, worldserver.getBlockTickList().a(this.loc, true, false));
+            this.o = new TickListChunk<>(IRegistry.BLOCK::getKey,
+                worldserver.getBlockTickList().a(this.loc, true, false));
             this.setNeedsSaving(true);
         }
 
         if (this.p == TickListEmpty.<FluidType>b()) { // CraftBukkit - decompile error
-            this.p = new TickListChunk<>(IRegistry.FLUID::getKey, worldserver.getFluidTickList().a(this.loc, true, false));
+            this.p = new TickListChunk<>(IRegistry.FLUID::getKey,
+                worldserver.getFluidTickList().a(this.loc, true, false));
             this.setNeedsSaving(true);
         }
 
     }
 
-    @Override
-    public ChunkStatus getChunkStatus() {
+    @Override public ChunkStatus getChunkStatus() {
         return ChunkStatus.FULL;
     }
 
@@ -1193,13 +1273,11 @@ public class Chunk implements IChunkAccess {
         this.u = supplier;
     }
 
-    @Override
-    public boolean r() {
+    @Override public boolean r() {
         return this.x;
     }
 
-    @Override
-    public void b(boolean flag) {
+    @Override public void b(boolean flag) {
         this.x = flag;
         this.setNeedsSaving(true);
     }
@@ -1208,6 +1286,52 @@ public class Chunk implements IChunkAccess {
 
         IMMEDIATE, QUEUED, CHECK;
 
-        private EnumTileEntityState() {}
+        private EnumTileEntityState() {
+        }
+    }
+
+
+    // Servett Start
+    public void addPlayerModifiedBlock(final int x, final int y, final int z,
+        final EntityPlayer entityPlayer, final IBlockData blockData) {
+        final long position = BlockPosition.at(x, y, z);
+        entityPlayer.modifiedBlocks
+            .put(position, new PlayerBlockModification(entityPlayer.getId(), blockData));
     }
+
+    public void removePlayerModifiedBlock(int x, int y, int z, EntityPlayer entityPlayer) {
+        final long position = BlockPosition.at(x, y, z);
+        entityPlayer.modifiedBlocks.remove(position);
+    }
+
+    public static class PlayerBlockModification {
+
+        private final int playerID;
+        private final IBlockData modifiedBlock;
+
+        private PlayerBlockModification(final int playerID, final IBlockData modifiedBlock) {
+            this.playerID = playerID;
+            this.modifiedBlock = modifiedBlock;
+        }
+
+        public int getPlayerID() {
+            return this.playerID;
+        }
+
+        public IBlockData getModifiedBlock() {
+            return this.modifiedBlock;
+        }
+    }
+
+    @Override public IBlockData getType(BlockPosition position, EntityPlayer tickingPlayer) {
+        final PlayerBlockModification playerBlockModification =
+            tickingPlayer.modifiedBlocks.get(position.asLong());
+        if (playerBlockModification != null) {
+            return playerBlockModification.getModifiedBlock();
+        } else {
+            return getBlockDataInternal(position.x, position.y, position.z);
+        }
+    }
+    // Servett End
+
 }
diff --git a/src/main/java/net/minecraft/server/ChunkCache.java b/src/main/java/net/minecraft/server/ChunkCache.java
index 29c66b983dc503903a76bab753bb9035ec10f54c..5eb0146aee59f5ec1a43a8203193efcb6377133f 100644
--- a/src/main/java/net/minecraft/server/ChunkCache.java
+++ b/src/main/java/net/minecraft/server/ChunkCache.java
@@ -95,11 +95,21 @@ public class ChunkCache implements IBlockAccess, ICollisionAccess {
 
     @Override
     public IBlockData getType(BlockPosition blockposition) {
+        // Servett Start
+        synchronized (e.tickingPlayerLock) {
+            if (e.tickingPlayer != null) {
+                final Chunk.PlayerBlockModification playerBlockModification =
+                    e.tickingPlayer.modifiedBlocks.get(blockposition.asLong());
+                if (playerBlockModification != null) {
+                    return playerBlockModification.getModifiedBlock();
+                }
+            }
+        }
+        // Servett End
         if (World.isOutsideWorld(blockposition)) {
             return Blocks.AIR.getBlockData();
         } else {
             IChunkAccess ichunkaccess = this.d(blockposition);
-
             return ichunkaccess.getType(blockposition);
         }
     }
@@ -114,4 +124,22 @@ public class ChunkCache implements IBlockAccess, ICollisionAccess {
             return ichunkaccess.getFluid(blockposition);
         }
     }
+
+    // Servett Start
+    @Override
+    public IBlockData getType(BlockPosition position, EntityPlayer tickingPlayer) {
+        final Chunk.PlayerBlockModification playerBlockModification =
+            tickingPlayer.modifiedBlocks.get(position.asLong());
+        if (playerBlockModification != null) {
+            return playerBlockModification.getModifiedBlock();
+        }
+        if (World.isOutsideWorld(position)) {
+            return Blocks.AIR.getBlockData();
+        } else {
+            IChunkAccess ichunkaccess = this.d(position);
+            return ichunkaccess.getType(position);
+        }
+    }
+    // Servett End
+
 }
diff --git a/src/main/java/net/minecraft/server/ChunkRegionLoader.java b/src/main/java/net/minecraft/server/ChunkRegionLoader.java
index d529b795c5434328a81c015558708b4994203099..9e8a8482e17a54c6878b469ac3297b300c08b460 100644
--- a/src/main/java/net/minecraft/server/ChunkRegionLoader.java
+++ b/src/main/java/net/minecraft/server/ChunkRegionLoader.java
@@ -1,23 +1,23 @@
 package net.minecraft.server;
 
-import co.aikar.timings.Timings;
 import com.google.common.collect.Maps;
 import it.unimi.dsi.fastutil.longs.LongOpenHashSet;
 import it.unimi.dsi.fastutil.longs.LongSet;
 import it.unimi.dsi.fastutil.shorts.ShortList;
 import it.unimi.dsi.fastutil.shorts.ShortListIterator;
-import java.util.ArrayDeque; // Paper
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+import javax.annotation.Nullable;
+import java.util.ArrayDeque;
 import java.util.Arrays;
 import java.util.BitSet;
 import java.util.EnumSet;
 import java.util.Iterator;
 import java.util.Map;
-import java.util.Objects;
 import java.util.Map.Entry;
+import java.util.Objects;
 import java.util.function.Function;
-import javax.annotation.Nullable;
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
 
 public class ChunkRegionLoader {
 
@@ -97,7 +97,7 @@ public class ChunkRegionLoader {
             byte b0 = nbttagcompound2.getByte("Y");
 
             if (nbttagcompound2.hasKeyOfType("Palette", 9) && nbttagcompound2.hasKeyOfType("BlockStates", 12)) {
-                ChunkSection chunksection = new ChunkSection(b0 << 4, null, worldserver, false); // Paper - Anti-Xray
+                ChunkSection chunksection = new ChunkSection(worldserver, b0 << 4, null, worldserver, false); // Paper - Anti-Xray // Servett: Add world
 
                 chunksection.getBlocks().a(nbttagcompound2.getList("Palette", 10), nbttagcompound2.getLongArray("BlockStates"));
                 chunksection.recalcBlockCounts();
diff --git a/src/main/java/net/minecraft/server/ChunkSection.java b/src/main/java/net/minecraft/server/ChunkSection.java
index 426221f7c329647444442b8fbe229857167a1088..1c3480486221606341c4abfd19e29bf22c6800cf 100644
--- a/src/main/java/net/minecraft/server/ChunkSection.java
+++ b/src/main/java/net/minecraft/server/ChunkSection.java
@@ -10,24 +10,25 @@ public class ChunkSection {
     short tickingBlockCount; // Paper - private -> package-private
     private short e;
     final DataPaletteBlock<IBlockData> blockIds;
+    private final World world; // Servett
 
     Chunk chunk; // Paper
     final com.destroystokyo.paper.util.maplist.IBlockDataList tickingList = new com.destroystokyo.paper.util.maplist.IBlockDataList(); // Paper
 
-    public ChunkSection(int i) {
+    public ChunkSection(World world, int i) { // Servett: Add world
         // Paper start - add parameters
-        this(i, (IChunkAccess)null, (IWorldReader)null, true);
+        this(world, i, (IChunkAccess)null, (IWorldReader)null, true);
     }
-    public ChunkSection(int i, IChunkAccess chunk, IWorldReader world, boolean initializeBlocks) {
-        this(i, (short) 0, (short) 0, (short) 0, chunk, world, initializeBlocks);
+    public ChunkSection(World worldObject, int i, IChunkAccess chunk, IWorldReader world, boolean initializeBlocks) { // Servett: Add world
+        this(worldObject, i, (short) 0, (short) 0, (short) 0, chunk, world, initializeBlocks);
         // Paper end
     }
 
-    public ChunkSection(int i, short short0, short short1, short short2) {
+    public ChunkSection(World world, int i, short short0, short short1, short short2) { // Servett: Add world
         // Paper start - add parameters
-        this(i, short0, short1, short2, (IChunkAccess)null, (IWorldReader)null, true);
+        this(world, i, short0, short1, short2, (IChunkAccess)null, (IWorldReader)null, true);
     }
-    public ChunkSection(int i, short short0, short short1, short short2, IChunkAccess chunk, IWorldReader world, boolean initializeBlocks) {
+    public ChunkSection(World worldObject, int i, short short0, short short1, short short2, IChunkAccess chunk, IWorldReader world, boolean initializeBlocks) { // Servett: Add world
         // Paper end
         this.yPos = i;
         this.nonEmptyBlockCount = short0;
@@ -39,9 +40,31 @@ public class ChunkSection {
             this.chunk = (Chunk)chunk;
         }
         // Paper end
+        // Servett Start
+        this.world = worldObject;
+        // Servett end
     }
 
     public IBlockData getType(int i, int j, int k) {
+        if (this.world != null) {
+            synchronized (world.tickingPlayerLock) {
+                if (world.tickingPlayer != null) {
+                    final Chunk.PlayerBlockModification playerBlockModification =
+                        world.tickingPlayer.modifiedBlocks.get(BlockPosition.at(i, j, k));
+                    if (playerBlockModification != null) {
+                        return playerBlockModification.getModifiedBlock();
+                    }
+                }
+            }
+        } else {
+            synchronized (EntityPlayer.tickingPlayerLock) {
+                final Chunk.PlayerBlockModification playerBlockModification = EntityPlayer.tickingPlayer
+                    .modifiedBlocks.get(BlockPosition.at(i, j, k));
+                if (playerBlockModification != null) {
+                    return playerBlockModification.getModifiedBlock();
+                }
+            }
+        }
         return (IBlockData) this.blockIds.a(i, j, k);
     }
 
diff --git a/src/main/java/net/minecraft/server/EntityPlayer.java b/src/main/java/net/minecraft/server/EntityPlayer.java
index d49c45ce7fa14b28c28f8f1daa713f394be4de95..695bed49926cf6e96a696e8ed2f489d311dc553a 100644
--- a/src/main/java/net/minecraft/server/EntityPlayer.java
+++ b/src/main/java/net/minecraft/server/EntityPlayer.java
@@ -4,20 +4,8 @@ import com.destroystokyo.paper.event.entity.PlayerNaturallySpawnCreaturesEvent;
 import com.google.common.collect.Lists;
 import com.mojang.authlib.GameProfile;
 import com.mojang.datafixers.util.Either;
-import io.netty.util.concurrent.Future;
-import java.util.ArrayDeque; // Paper
-import java.util.Collection;
-import java.util.Deque; // Paper
-import java.util.Iterator;
-import java.util.List;
-import java.util.OptionalInt;
-import java.util.Random;
-import javax.annotation.Nullable;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
-
-// CraftBukkit start
-import com.google.common.base.Preconditions;
 import org.bukkit.Bukkit;
 import org.bukkit.GameMode;
 import org.bukkit.Location;
@@ -35,11 +23,30 @@ import org.bukkit.event.player.PlayerPortalEvent;
 import org.bukkit.event.player.PlayerTeleportEvent;
 import org.bukkit.event.player.PlayerTeleportEvent.TeleportCause;
 import org.bukkit.inventory.MainHand;
+
+import javax.annotation.Nullable;
+import java.util.ArrayDeque;
+import java.util.Collection;
+import java.util.Deque;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.OptionalInt;
+import java.util.Random;
+
+// CraftBukkit start
 // CraftBukkit end
 
 public class EntityPlayer extends EntityHuman implements ICrafting {
 
+    // Servett Start
+    public static EntityPlayer tickingPlayer;
+    public static final Object tickingPlayerLock = new Object();
+    // Servett End
+
     private static final Logger LOGGER = LogManager.getLogger();
+    public final Map<Long, Chunk.PlayerBlockModification> modifiedBlocks = new HashMap<>(); // Servett
     public String locale = null; // CraftBukkit - lowercase // Paper - default to null
     public PlayerConnection playerConnection;
     public final MinecraftServer server;
@@ -397,69 +404,77 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
 
     @Override
     public void tick() {
-        // CraftBukkit start
-        if (this.joining) {
-            this.joining = false;
-        }
-        // CraftBukkit end
-        this.playerInteractManager.a();
-        --this.invulnerableTicks;
-        if (this.noDamageTicks > 0) {
-            --this.noDamageTicks;
-        }
+        synchronized (world.tickingPlayerLock) { // Servett Start
+            world.tickingPlayer = this; // Servett
+            tickingPlayer = this; // Servett
 
-        // Paper start - Configurable container update tick rate
-        if (--containerUpdateDelay <= 0) {
-            this.activeContainer.c();
-            containerUpdateDelay = world.paperConfig.containerUpdateTickRate;
-        }
-        // Paper end
-        if (!this.world.isClientSide && !this.activeContainer.canUse(this)) {
-            this.closeInventory(org.bukkit.event.inventory.InventoryCloseEvent.Reason.CANT_USE); // Paper
-            this.activeContainer = this.defaultContainer;
-        }
+            // CraftBukkit start
+            if (this.joining) {
+                this.joining = false;
+            }
+            // CraftBukkit end
+            this.playerInteractManager.a();
+            --this.invulnerableTicks;
+            if (this.noDamageTicks > 0) {
+                --this.noDamageTicks;
+            }
+
+            // Paper start - Configurable container update tick rate
+            if (--containerUpdateDelay <= 0) {
+                this.activeContainer.c();
+                containerUpdateDelay = world.paperConfig.containerUpdateTickRate;
+            }
+            // Paper end
+            if (!this.world.isClientSide && !this.activeContainer.canUse(this)) {
+                this.closeInventory(org.bukkit.event.inventory.InventoryCloseEvent.Reason.CANT_USE); // Paper
+                this.activeContainer = this.defaultContainer;
+            }
 
-        while (!this.removeQueue.isEmpty()) {
-            int i = Math.min(this.removeQueue.size(), Integer.MAX_VALUE);
-            int[] aint = new int[i];
-            //Iterator<Integer> iterator = this.removeQueue.iterator(); // Paper
-            int j = 0;
+            while (!this.removeQueue.isEmpty()) {
+                int i = Math.min(this.removeQueue.size(), Integer.MAX_VALUE);
+                int[] aint = new int[i];
+                //Iterator<Integer> iterator = this.removeQueue.iterator(); // Paper
+                int j = 0;
 
-            // Paper start
+                // Paper start
             /* while (iterator.hasNext() && j < i) {
                 aint[j++] = (Integer) iterator.next();
                 iterator.remove();
             } */
 
-            Integer integer;
-            while (j < i && (integer = this.removeQueue.poll()) != null) {
-                aint[j++] = integer.intValue();
-            }
-            // Paper end
+                Integer integer;
+                while (j < i && (integer = this.removeQueue.poll()) != null) {
+                    aint[j++] = integer.intValue();
+                }
+                // Paper end
 
-            this.playerConnection.sendPacket(new PacketPlayOutEntityDestroy(aint));
-        }
+                this.playerConnection.sendPacket(new PacketPlayOutEntityDestroy(aint));
+            }
 
-        Entity entity = this.getSpecatorTarget();
+            Entity entity = this.getSpecatorTarget();
 
-        if (entity != this) {
-            if (entity.isAlive()) {
-                this.setLocation(entity.locX(), entity.locY(), entity.locZ(), entity.yaw, entity.pitch);
-                this.getWorldServer().getChunkProvider().movePlayer(this);
-                if (this.dU()) {
+            if (entity != this) {
+                if (entity.isAlive()) {
+                    this.setLocation(entity.locX(), entity.locY(), entity.locZ(), entity.yaw, entity.pitch);
+                    this.getWorldServer().getChunkProvider().movePlayer(this);
+                    if (this.dU()) {
+                        this.setSpectatorTarget(this);
+                    }
+                } else {
                     this.setSpectatorTarget(this);
                 }
-            } else {
-                this.setSpectatorTarget(this);
             }
-        }
 
-        CriterionTriggers.w.a(this);
-        if (this.co != null) {
-            CriterionTriggers.u.a(this, this.co, this.ticksLived - this.cp);
-        }
+            CriterionTriggers.w.a(this);
+            if (this.co != null) {
+                CriterionTriggers.u.a(this, this.co, this.ticksLived - this.cp);
+            }
+
+            this.advancementDataPlayer.b(this);
 
-        this.advancementDataPlayer.b(this);
+            world.tickingPlayer = null; // Servett
+            tickingPlayer = null; // Servett
+        }
     }
 
     public void playerTick() {
@@ -651,7 +666,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
                 ichatbasecomponent = org.bukkit.craftbukkit.util.CraftChatMessage.fromStringOrNull(deathMessage);
             }
 
-            this.playerConnection.a((Packet) (new PacketPlayOutCombatEvent(this.getCombatTracker(), PacketPlayOutCombatEvent.EnumCombatEventType.ENTITY_DIED, ichatbasecomponent)), (future) -> {
+            this.playerConnection.a(playerConnection, (Packet) (new PacketPlayOutCombatEvent(this.getCombatTracker(), PacketPlayOutCombatEvent.EnumCombatEventType.ENTITY_DIED, ichatbasecomponent)), (future) -> {
                 if (!future.isSuccess()) {
                     boolean flag1 = true;
                     String s = ichatbasecomponent.a(256);
@@ -2001,4 +2016,5 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
         return (CraftPlayer) super.getBukkitEntity();
     }
     // CraftBukkit end
+    
 }
diff --git a/src/main/java/net/minecraft/server/IBlockAccess.java b/src/main/java/net/minecraft/server/IBlockAccess.java
index 29cdc00875aa5004132820f36e781c7bf4573162..9c9339930a163e5fec8a5c2029fa2ec8a6f890e3 100644
--- a/src/main/java/net/minecraft/server/IBlockAccess.java
+++ b/src/main/java/net/minecraft/server/IBlockAccess.java
@@ -1,8 +1,8 @@
 package net.minecraft.server;
 
+import javax.annotation.Nullable;
 import java.util.function.BiFunction;
 import java.util.function.Function;
-import javax.annotation.Nullable;
 
 public interface IBlockAccess {
 
@@ -11,6 +11,7 @@ public interface IBlockAccess {
 
     IBlockData getTypeIfLoaded(BlockPosition blockposition); // Paper - if loaded util
     IBlockData getType(BlockPosition blockposition);
+    IBlockData getType(BlockPosition position, EntityPlayer tickingPlayer); // Servett
 
     Fluid getFluidIfLoaded(BlockPosition blockposition); // Paper - if loaded util
     Fluid getFluid(BlockPosition blockposition);
diff --git a/src/main/java/net/minecraft/server/ItemBucket.java b/src/main/java/net/minecraft/server/ItemBucket.java
index ffe4b9eb868ecd9582ba1d3fc3aef0f82372e852..e2beb1464aaf977f84f33925f2ee27f7b76b7761 100644
--- a/src/main/java/net/minecraft/server/ItemBucket.java
+++ b/src/main/java/net/minecraft/server/ItemBucket.java
@@ -1,12 +1,14 @@
 package net.minecraft.server;
 
-import javax.annotation.Nullable;
-// CraftBukkit start
 import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.craftbukkit.util.DummyGeneratorAccess;
 import org.bukkit.event.player.PlayerBucketEmptyEvent;
 import org.bukkit.event.player.PlayerBucketFillEvent;
+
+import javax.annotation.Nullable;
+
+// CraftBukkit start
 // CraftBukkit end
 
 public class ItemBucket extends Item {
@@ -44,7 +46,7 @@ public class ItemBucket extends Item {
                         PlayerBucketFillEvent event = CraftEventFactory.callPlayerBucketFillEvent(world, entityhuman, blockposition, blockposition, movingobjectpositionblock.getDirection(), itemstack, dummyFluid.a(), enumhand);
 
                         if (event.isCancelled()) {
-                            ((EntityPlayer) entityhuman).playerConnection.sendPacket(new PacketPlayOutBlockChange(world, blockposition)); // SPIGOT-5163 (see PlayerInteractManager)
+                            ((EntityPlayer) entityhuman).playerConnection.sendPacket(new PacketPlayOutBlockChange((EntityPlayer) entityhuman, world, blockposition)); // SPIGOT-5163 (see PlayerInteractManager)
                             ((EntityPlayer) entityhuman).getBukkitEntity().updateInventory(); // SPIGOT-4541
                             return new InteractionResultWrapper(EnumInteractionResult.FAIL, itemstack);
                         }
@@ -136,7 +138,7 @@ public class ItemBucket extends Item {
                 if (entityhuman != null) {
                     PlayerBucketEmptyEvent event = CraftEventFactory.callPlayerBucketEmptyEvent(world, entityhuman, blockposition, clicked, enumdirection, itemstack, enumhand);
                     if (event.isCancelled()) {
-                        ((EntityPlayer) entityhuman).playerConnection.sendPacket(new PacketPlayOutBlockChange(world, blockposition)); // SPIGOT-4238: needed when looking through entity
+                        ((EntityPlayer) entityhuman).playerConnection.sendPacket(new PacketPlayOutBlockChange((EntityPlayer) entityhuman, world, blockposition)); // SPIGOT-4238: needed when looking through entity
                         ((EntityPlayer) entityhuman).getBukkitEntity().updateInventory(); // SPIGOT-4541
                         return false;
                     }
diff --git a/src/main/java/net/minecraft/server/ItemStack.java b/src/main/java/net/minecraft/server/ItemStack.java
index d6e43313bf0c678cf78fe77de2f8f4b6f819e3f4..4582c8606de2124882256e08e9e6bc0435dd8e72 100644
--- a/src/main/java/net/minecraft/server/ItemStack.java
+++ b/src/main/java/net/minecraft/server/ItemStack.java
@@ -5,24 +5,9 @@ import com.google.common.collect.Multimap;
 import com.google.gson.JsonParseException;
 import com.mojang.brigadier.StringReader;
 import com.mojang.brigadier.exceptions.CommandSyntaxException;
-import java.text.DecimalFormat;
-import java.text.DecimalFormatSymbols;
-import java.util.Collections;
-import java.util.Comparator;
-import java.util.Locale;
-import java.util.Objects;
-import java.util.Random;
-import java.util.function.Consumer;
-import java.util.function.Predicate;
-import javax.annotation.Nullable;
+import com.mojang.datafixers.Dynamic;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
-
-// CraftBukkit start
-import com.mojang.datafixers.Dynamic;
-import java.util.List;
-import java.util.Map;
-
 import org.bukkit.Location;
 import org.bukkit.TreeType;
 import org.bukkit.block.BlockState;
@@ -34,6 +19,20 @@ import org.bukkit.entity.Player;
 import org.bukkit.event.block.BlockFertilizeEvent;
 import org.bukkit.event.player.PlayerItemDamageEvent;
 import org.bukkit.event.world.StructureGrowEvent;
+
+import javax.annotation.Nullable;
+import java.text.DecimalFormat;
+import java.text.DecimalFormatSymbols;
+import java.util.Comparator;
+import java.util.List;
+import java.util.Locale;
+import java.util.Map;
+import java.util.Objects;
+import java.util.Random;
+import java.util.function.Consumer;
+import java.util.function.Predicate;
+
+// CraftBukkit start
 // CraftBukkit end
 
 public final class ItemStack {
@@ -249,7 +248,7 @@ public final class ItemStack {
                     // Brute force all possible updates
                     BlockPosition placedPos = ((CraftBlock) placeEvent.getBlock()).getPosition();
                     for (EnumDirection dir : EnumDirection.values()) {
-                        ((EntityPlayer) entityhuman).playerConnection.sendPacket(new PacketPlayOutBlockChange(world, placedPos.shift(dir)));
+                        ((EntityPlayer) entityhuman).playerConnection.sendPacket(new PacketPlayOutBlockChange((EntityPlayer) entityhuman, world, placedPos.shift(dir)));
                     }
                 } else {
                     // Change the stack to its new contents if it hasn't been tampered with.
diff --git a/src/main/java/net/minecraft/server/Packet.java b/src/main/java/net/minecraft/server/Packet.java
index 8d0965a0535b16f19eda21b97a44464b85b05460..9b64d7203b61e3a6dba150984154be8c881af6a9 100644
--- a/src/main/java/net/minecraft/server/Packet.java
+++ b/src/main/java/net/minecraft/server/Packet.java
@@ -20,4 +20,9 @@ public interface Packet<T extends PacketListener> {
     default boolean a() {
         return false;
     }
+
+    // Servett Start
+    default void process(PlayerConnection playerConnection) {}
+    // Servett End
+
 }
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutBlockChange.java b/src/main/java/net/minecraft/server/PacketPlayOutBlockChange.java
index 68b00a6e41c0b0115c47256032a65ae42570fc89..4823a8cebf186f67878fd33bcb9ca58bff74f9bf 100644
--- a/src/main/java/net/minecraft/server/PacketPlayOutBlockChange.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutBlockChange.java
@@ -4,14 +4,31 @@ import java.io.IOException;
 
 public class PacketPlayOutBlockChange implements Packet<PacketListenerPlayOut> {
 
-    private BlockPosition a;
+    public BlockPosition a;
+    private IBlockAccess iBlockAccess;
     public IBlockData block;
 
     public PacketPlayOutBlockChange() {}
 
     public PacketPlayOutBlockChange(IBlockAccess iblockaccess, BlockPosition blockposition) {
-        this.a = blockposition;
-        this.block = iblockaccess.getType(blockposition);
+        this(null, iblockaccess, blockposition);
+    }
+
+    public PacketPlayOutBlockChange(EntityPlayer player, IBlockAccess iBlockAccess, BlockPosition position) {
+        this.a = position;
+        this.iBlockAccess = iBlockAccess;
+        if (player != null) {
+            this.process(player.playerConnection);
+        } else {
+            this.block = iBlockAccess.getType(position);
+        }
+    }
+
+    @Override public void process(PlayerConnection playerConnection) {
+        if (playerConnection == null || playerConnection.player == null) {
+            return;
+        }
+        this.block = iBlockAccess.getType(a, playerConnection.player);
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutMultiBlockChange.java b/src/main/java/net/minecraft/server/PacketPlayOutMultiBlockChange.java
index fe7566659a02b3fd3daee0b1bf3875e513030df0..ddcf78762d66b62ff5f0eb046f0b951dfea3afe7 100644
--- a/src/main/java/net/minecraft/server/PacketPlayOutMultiBlockChange.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutMultiBlockChange.java
@@ -9,12 +9,12 @@ public class PacketPlayOutMultiBlockChange implements Packet<PacketListenerPlayO
 
     public PacketPlayOutMultiBlockChange() {}
 
-    public PacketPlayOutMultiBlockChange(int i, short[] ashort, Chunk chunk) {
+    public PacketPlayOutMultiBlockChange(final EntityPlayer entityPlayer, int i, short[] ashort, Chunk chunk) {
         this.a = chunk.getPos();
         this.b = new PacketPlayOutMultiBlockChange.MultiBlockChangeInfo[i];
 
         for (int j = 0; j < this.b.length; ++j) {
-            this.b[j] = new PacketPlayOutMultiBlockChange.MultiBlockChangeInfo(ashort[j], chunk);
+            this.b[j] = new PacketPlayOutMultiBlockChange.MultiBlockChangeInfo(entityPlayer, ashort[j], chunk);
         }
 
     }
@@ -61,9 +61,9 @@ public class PacketPlayOutMultiBlockChange implements Packet<PacketListenerPlayO
             this.c = iblockdata;
         }
 
-        public MultiBlockChangeInfo(short short0, Chunk chunk) {
+        public MultiBlockChangeInfo(EntityPlayer entityPlayer, short short0, Chunk chunk) {
             this.b = short0;
-            this.c = chunk.getType(this.a());
+            this.c = chunk.getType(this.a(), entityPlayer);
         }
 
         public BlockPosition a() {
diff --git a/src/main/java/net/minecraft/server/PlayerChunk.java b/src/main/java/net/minecraft/server/PlayerChunk.java
index cc5ae6eef4f8356a1778506c465f267a27283ab7..a468b4f97c46d5f4ee4c8eaf2854f9c5e639e96b 100644
--- a/src/main/java/net/minecraft/server/PlayerChunk.java
+++ b/src/main/java/net/minecraft/server/PlayerChunk.java
@@ -1,14 +1,16 @@
 package net.minecraft.server;
 
 import com.mojang.datafixers.util.Either;
+
+import javax.annotation.Nullable;
 import java.util.List;
 import java.util.Optional;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.atomic.AtomicReferenceArray;
+import java.util.function.Function;
 import java.util.function.IntConsumer;
 import java.util.function.IntSupplier;
 import java.util.stream.Stream;
-import javax.annotation.Nullable;
 
 public class PlayerChunk {
 
@@ -257,11 +259,13 @@ public class PlayerChunk {
             int j;
 
             if (this.u != 0 || this.t != 0) {
-                this.a(new PacketPlayOutLightUpdate(chunk.getPos(), this.lightEngine, this.u & ~this.s, this.t & ~this.s), true);
+                this.a(player -> new PacketPlayOutLightUpdate(chunk.getPos(), this.lightEngine, this.u & ~this.s, this.t & ~this.s), true);
                 i = this.u & this.s;
                 j = this.t & this.s;
                 if (i != 0 || j != 0) {
-                    this.a(new PacketPlayOutLightUpdate(chunk.getPos(), this.lightEngine, i, j), false);
+                    int finalI = i;
+                    int finalJ = j;
+                    this.a(player -> new PacketPlayOutLightUpdate(chunk.getPos(), this.lightEngine, finalI, finalJ), false);
                 }
 
                 this.u = 0;
@@ -277,14 +281,14 @@ public class PlayerChunk {
                 k = (this.dirtyBlocks[0] >> 8 & 15) + this.location.z * 16;
                 BlockPosition blockposition = new BlockPosition(i, j, k);
 
-                this.a(new PacketPlayOutBlockChange(world, blockposition), false);
+                this.a(player -> new PacketPlayOutBlockChange(player, world, blockposition), false);
                 if (world.getType(blockposition).getBlock().isTileEntity()) {
                     this.a(world, blockposition);
                 }
             } else if (this.dirtyCount == 64) {
-                this.a(new PacketPlayOutMapChunk(chunk, this.r, true), false); // Paper - Anti-Xray
+                this.a(player -> new PacketPlayOutMapChunk(chunk, this.r, true), false); // Paper - Anti-Xray
             } else if (this.dirtyCount != 0) {
-                this.a(new PacketPlayOutMultiBlockChange(this.dirtyCount, this.dirtyBlocks, chunk), false);
+                this.a(player -> new PacketPlayOutMultiBlockChange(player, this.dirtyCount, this.dirtyBlocks, chunk), false);
 
                 for (i = 0; i < this.dirtyCount; ++i) {
                     j = (this.dirtyBlocks[i] >> 12 & 15) + this.location.x * 16;
@@ -310,13 +314,13 @@ public class PlayerChunk {
             PacketPlayOutTileEntityData packetplayouttileentitydata = tileentity.getUpdatePacket();
 
             if (packetplayouttileentitydata != null) {
-                this.a(packetplayouttileentitydata, false);
+                this.a(player -> packetplayouttileentitydata, false);
             }
         }
 
     }
 
-    private void a(Packet<?> packet, boolean flag) {
+    private void a(Function<EntityPlayer, Packet<?>> packetFunction, boolean flag) {
         // Tuinity start - per player view distance
         // there can be potential desync with player's last mapped section and the view distance map, so use the
         // view distance map here.
@@ -337,6 +341,9 @@ public class PlayerChunk {
                     continue;
                 }
                 EntityPlayer player = (EntityPlayer)temp;
+                final Packet<?> packet = packetFunction.apply(player);
+                packet.process(player.playerConnection);
+
                 if (!player.loadedChunks.contains(coordinate)) {
                     continue;
                 }
@@ -359,6 +366,8 @@ public class PlayerChunk {
                     continue;
                 }
                 EntityPlayer player = (EntityPlayer)temp;
+                final Packet<?> packet = packetFunction.apply(player);
+                packet.process(player.playerConnection);
                 if (!player.loadedChunks.contains(coordinate)) {
                     continue;
                 }
diff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java
index 7929fcc800064fa23b260c3ecbed75f846bb375a..293ebc003917225abc8f86de5a2a1508c1822fb3 100644
--- a/src/main/java/net/minecraft/server/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/PlayerConnection.java
@@ -1,5 +1,7 @@
 package net.minecraft.server;
 
+import co.aikar.timings.MinecraftTimings;
+import com.destroystokyo.paper.event.player.PlayerJumpEvent;
 import com.google.common.primitives.Doubles;
 import com.google.common.primitives.Floats;
 import com.mojang.brigadier.ParseResults;
@@ -9,19 +11,9 @@ import io.netty.util.concurrent.Future;
 import io.netty.util.concurrent.GenericFutureListener;
 import it.unimi.dsi.fastutil.ints.Int2ShortMap;
 import it.unimi.dsi.fastutil.ints.Int2ShortOpenHashMap;
-import java.util.Collections;
-import java.util.Iterator;
-import java.util.Optional;
-import java.util.Set;
-import javax.annotation.Nullable;
-import org.apache.commons.lang3.StringEscapeUtils;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
-
-// CraftBukkit start
-import java.util.concurrent.ExecutionException;
-import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
 import org.bukkit.Location;
 import org.bukkit.craftbukkit.entity.CraftPlayer;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
@@ -59,11 +51,20 @@ import org.bukkit.inventory.CraftingInventory;
 import org.bukkit.inventory.EquipmentSlot;
 import org.bukkit.inventory.InventoryView;
 import org.bukkit.util.NumberConversions;
-import com.destroystokyo.paper.event.player.IllegalPacketEvent; // Paper
-import com.destroystokyo.paper.event.player.PlayerJumpEvent; // Paper
-import co.aikar.timings.MinecraftTimings; // Paper
+
+import javax.annotation.Nullable;
+import java.lang.reflect.Field;
+import java.util.Collections;
+import java.util.Iterator;
+import java.util.Optional;
+import java.util.Set;
+import java.util.concurrent.ExecutionException;
+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
+
+// CraftBukkit start
 // CraftBukkit end
 
+
 public class PlayerConnection implements PacketListenerPlayIn {
 
     private static final Logger LOGGER = LogManager.getLogger();
@@ -71,13 +72,51 @@ public class PlayerConnection implements PacketListenerPlayIn {
     private final MinecraftServer minecraftServer;
     public EntityPlayer player;
     private int e;
-    private long lastKeepAlive = SystemUtils.getMonotonicMillis(); private void setLastPing(long lastPing) { this.lastKeepAlive = lastPing;}; private long getLastPing() { return this.lastKeepAlive;}; // Paper - OBFHELPER
-    private boolean awaitingKeepAlive; private void setPendingPing(boolean isPending) { this.awaitingKeepAlive = isPending;}; private boolean isPendingPing() { return this.awaitingKeepAlive;}; // Paper - OBFHELPER
-    private long h; private void setKeepAliveID(long keepAliveID) { this.h = keepAliveID;}; private long getKeepAliveID() {return this.h; };  // Paper - OBFHELPER
+    private long lastKeepAlive = SystemUtils.getMonotonicMillis();
+
+    private void setLastPing(long lastPing) {
+        this.lastKeepAlive = lastPing;
+    }
+
+    ;
+
+    private long getLastPing() {
+        return this.lastKeepAlive;
+    }
+
+    ; // Paper - OBFHELPER
+    private boolean awaitingKeepAlive;
+
+    private void setPendingPing(boolean isPending) {
+        this.awaitingKeepAlive = isPending;
+    }
+
+    ;
+
+    private boolean isPendingPing() {
+        return this.awaitingKeepAlive;
+    }
+
+    ; // Paper - OBFHELPER
+    private long h;
+
+    private void setKeepAliveID(long keepAliveID) {
+        this.h = keepAliveID;
+    }
+
+    ;
+
+    private long getKeepAliveID() {
+        return this.h;
+    }
+
+    ;  // Paper - OBFHELPER
     // CraftBukkit start - multithreaded fields
     private volatile int chatThrottle;
-    private static final AtomicIntegerFieldUpdater chatSpamField = AtomicIntegerFieldUpdater.newUpdater(PlayerConnection.class, "chatThrottle");
-    private final java.util.concurrent.atomic.AtomicInteger tabSpamLimiter = new java.util.concurrent.atomic.AtomicInteger(); // Paper - configurable tab spam limits
+    private static final AtomicIntegerFieldUpdater chatSpamField =
+        AtomicIntegerFieldUpdater.newUpdater(PlayerConnection.class, "chatThrottle");
+    private final java.util.concurrent.atomic.AtomicInteger tabSpamLimiter =
+        new java.util.concurrent.atomic.AtomicInteger(); // Paper - configurable tab spam limits
     // CraftBukkit end
     private int j;
     private final Int2ShortMap k = new Int2ShortOpenHashMap();
@@ -104,9 +143,12 @@ public class PlayerConnection implements PacketListenerPlayIn {
     private int receivedMovePackets;
     private int processedMovePackets;
     private static final int MAX_SIGN_LINE_LENGTH = Integer.getInteger("Paper.maxSignLength", 80);
-    private static final long KEEPALIVE_LIMIT = Long.getLong("paper.playerconnection.keepalive", 30) * 1000; // Paper - provide property to set keepalive limit
+    private static final long KEEPALIVE_LIMIT =
+        Long.getLong("paper.playerconnection.keepalive", 30) * 1000;
+    // Paper - provide property to set keepalive limit
 
-    public PlayerConnection(MinecraftServer minecraftserver, NetworkManager networkmanager, EntityPlayer entityplayer) {
+    public PlayerConnection(MinecraftServer minecraftserver, NetworkManager networkmanager,
+        EntityPlayer entityplayer) {
         this.minecraftServer = minecraftserver;
         this.networkManager = networkmanager;
         networkmanager.setPacketListener(this);
@@ -122,7 +164,7 @@ public class PlayerConnection implements PacketListenerPlayIn {
     private int lastTick = MinecraftServer.currentTick;
     private int allowedPlayerTicks = 1;
     private int lastDropTick = MinecraftServer.currentTick;
-    private int lastBookTick  = MinecraftServer.currentTick;
+    private int lastBookTick = MinecraftServer.currentTick;
     private int dropCount = 0;
     private static final int SURVIVAL_PLACE_DISTANCE_SQUARED = 6 * 6;
     private static final int CREATIVE_PLACE_DISTANCE_SQUARED = 7 * 7;
@@ -152,8 +194,10 @@ public class PlayerConnection implements PacketListenerPlayIn {
         this.processedMovePackets = this.receivedMovePackets;
         if (this.B) {
             if (++this.C > 80) {
-                PlayerConnection.LOGGER.warn("{} was kicked for floating too long!", this.player.getDisplayName().getString());
-                this.disconnect(com.destroystokyo.paper.PaperConfig.flyingKickPlayerMessage); // Paper - use configurable kick message
+                PlayerConnection.LOGGER.warn("{} was kicked for floating too long!",
+                    this.player.getDisplayName().getString());
+                this.disconnect(
+                    com.destroystokyo.paper.PaperConfig.flyingKickPlayerMessage); // Paper - use configurable kick message
                 return;
             }
         } else {
@@ -171,8 +215,10 @@ public class PlayerConnection implements PacketListenerPlayIn {
             this.x = this.r.locZ();
             if (this.D && this.player.getRootVehicle().getRidingPassenger() == this.player) {
                 if (++this.E > 80) {
-                    PlayerConnection.LOGGER.warn("{} was kicked for floating a vehicle too long!", this.player.getDisplayName().getString());
-                    this.disconnect(com.destroystokyo.paper.PaperConfig.flyingKickVehicleMessage); // Paper - use configurable kick message
+                    PlayerConnection.LOGGER.warn("{} was kicked for floating a vehicle too long!",
+                        this.player.getDisplayName().getString());
+                    this.disconnect(
+                        com.destroystokyo.paper.PaperConfig.flyingKickVehicleMessage); // Paper - use configurable kick message
                     return;
                 }
             } else {
@@ -192,8 +238,10 @@ public class PlayerConnection implements PacketListenerPlayIn {
         long elapsedTime = currentTime - this.getLastPing();
 
         if (this.isPendingPing()) {
-            if (!this.processedDisconnect && elapsedTime >= KEEPALIVE_LIMIT) { // check keepalive limit, don't fire if already disconnected
-                PlayerConnection.LOGGER.warn("{} was kicked due to keepalive timeout!", this.player.getName()); // more info
+            if (!this.processedDisconnect && elapsedTime
+                >= KEEPALIVE_LIMIT) { // check keepalive limit, don't fire if already disconnected
+                PlayerConnection.LOGGER.warn("{} was kicked due to keepalive timeout!",
+                    this.player.getName()); // more info
                 this.disconnect(new ChatMessage("disconnect.timeout", new Object[0]));
             }
         } else {
@@ -209,8 +257,11 @@ public class PlayerConnection implements PacketListenerPlayIn {
 
         this.minecraftServer.getMethodProfiler().exit();
         // CraftBukkit start
-        for (int spam; (spam = this.chatThrottle) > 0 && !chatSpamField.compareAndSet(this, spam, spam - 1); ) ;
-        if (tabSpamLimiter.get() > 0) tabSpamLimiter.getAndDecrement(); // Paper - split to seperate variable
+        for (int spam;
+             (spam = this.chatThrottle) > 0 && !chatSpamField.compareAndSet(this, spam, spam - 1); )
+            ;
+        if (tabSpamLimiter.get() > 0)
+            tabSpamLimiter.getAndDecrement(); // Paper - split to seperate variable
         /* Use thread-safe field access instead
         if (this.chatThrottle > 0) {
             --this.chatThrottle;
@@ -222,7 +273,9 @@ public class PlayerConnection implements PacketListenerPlayIn {
             --this.j;
         }
 
-        if (this.player.F() > 0L && this.minecraftServer.getIdleTimeout() > 0 && SystemUtils.getMonotonicMillis() - this.player.F() > (long) (this.minecraftServer.getIdleTimeout() * 1000 * 60)) {
+        if (this.player.F() > 0L && this.minecraftServer.getIdleTimeout() > 0
+            && SystemUtils.getMonotonicMillis() - this.player.F() > (long) (
+            this.minecraftServer.getIdleTimeout() * 1000 * 60)) {
             this.player.resetIdleTimer(); // CraftBukkit - SPIGOT-854
             this.disconnect(new ChatMessage("multiplayer.disconnect.idling", new Object[0]));
         }
@@ -238,8 +291,7 @@ public class PlayerConnection implements PacketListenerPlayIn {
         this.q = this.player.locZ();
     }
 
-    @Override
-    public NetworkManager a() {
+    @Override public NetworkManager a() {
         return this.networkManager;
     }
 
@@ -248,8 +300,7 @@ public class PlayerConnection implements PacketListenerPlayIn {
     }
 
     // CraftBukkit start
-    @Deprecated
-    public void disconnect(IChatBaseComponent ichatbasecomponent) {
+    @Deprecated public void disconnect(IChatBaseComponent ichatbasecomponent) {
         disconnect(CraftChatMessage.fromComponent(ichatbasecomponent, EnumChatFormat.WHITE));
     }
     // CraftBukkit end
@@ -261,7 +312,8 @@ public class PlayerConnection implements PacketListenerPlayIn {
         }
         String leaveMessage = EnumChatFormat.YELLOW + this.player.getName() + " left the game.";
 
-        PlayerKickEvent event = new PlayerKickEvent(this.server.getPlayer(this.player), s, leaveMessage);
+        PlayerKickEvent event =
+            new PlayerKickEvent(this.server.getPlayer(this.player), s, leaveMessage);
 
         if (this.server.getServer().isRunning()) {
             this.server.getPluginManager().callEvent(event);
@@ -276,9 +328,10 @@ public class PlayerConnection implements PacketListenerPlayIn {
         // CraftBukkit end
         final ChatComponentText ichatbasecomponent = new ChatComponentText(s);
 
-        this.networkManager.sendPacket(new PacketPlayOutKickDisconnect(ichatbasecomponent), (future) -> {
-            this.networkManager.close(ichatbasecomponent);
-        });
+        this.networkManager
+            .sendPacket(new PacketPlayOutKickDisconnect(ichatbasecomponent), (future) -> {
+                this.networkManager.close(ichatbasecomponent);
+            });
         this.a(ichatbasecomponent); // CraftBukkit - fire quit instantly
         this.networkManager.stopReading();
         MinecraftServer minecraftserver = this.minecraftServer;
@@ -289,29 +342,43 @@ public class PlayerConnection implements PacketListenerPlayIn {
         minecraftserver.scheduleOnMain(networkmanager::handleDisconnection); // Paper
     }
 
-    @Override
-    public void a(PacketPlayInSteerVehicle packetplayinsteervehicle) {
-        PlayerConnectionUtils.ensureMainThread(packetplayinsteervehicle, this, this.player.getWorldServer());
-        this.player.a(packetplayinsteervehicle.b(), packetplayinsteervehicle.c(), packetplayinsteervehicle.d(), packetplayinsteervehicle.e());
+    @Override public void a(PacketPlayInSteerVehicle packetplayinsteervehicle) {
+        PlayerConnectionUtils
+            .ensureMainThread(packetplayinsteervehicle, this, this.player.getWorldServer());
+        this.player.a(packetplayinsteervehicle.b(), packetplayinsteervehicle.c(),
+            packetplayinsteervehicle.d(), packetplayinsteervehicle.e());
     }
 
     private static boolean b(PacketPlayInFlying packetplayinflying) {
-        return Doubles.isFinite(packetplayinflying.a(0.0D)) && Doubles.isFinite(packetplayinflying.b(0.0D)) && Doubles.isFinite(packetplayinflying.c(0.0D)) && Floats.isFinite(packetplayinflying.b(0.0F)) && Floats.isFinite(packetplayinflying.a(0.0F)) ? Math.abs(packetplayinflying.a(0.0D)) > 3.0E7D || Math.abs(packetplayinflying.b(0.0D)) > 3.0E7D || Math.abs(packetplayinflying.c(0.0D)) > 3.0E7D : true;
+        return Doubles.isFinite(packetplayinflying.a(0.0D)) && Doubles
+            .isFinite(packetplayinflying.b(0.0D)) && Doubles.isFinite(packetplayinflying.c(0.0D))
+            && Floats.isFinite(packetplayinflying.b(0.0F)) && Floats
+            .isFinite(packetplayinflying.a(0.0F)) ?
+            Math.abs(packetplayinflying.a(0.0D)) > 3.0E7D
+                || Math.abs(packetplayinflying.b(0.0D)) > 3.0E7D
+                || Math.abs(packetplayinflying.c(0.0D)) > 3.0E7D :
+            true;
     }
 
     private static boolean b(PacketPlayInVehicleMove packetplayinvehiclemove) {
-        return !Doubles.isFinite(packetplayinvehiclemove.getX()) || !Doubles.isFinite(packetplayinvehiclemove.getY()) || !Doubles.isFinite(packetplayinvehiclemove.getZ()) || !Floats.isFinite(packetplayinvehiclemove.getPitch()) || !Floats.isFinite(packetplayinvehiclemove.getYaw());
+        return !Doubles.isFinite(packetplayinvehiclemove.getX()) || !Doubles
+            .isFinite(packetplayinvehiclemove.getY()) || !Doubles
+            .isFinite(packetplayinvehiclemove.getZ()) || !Floats
+            .isFinite(packetplayinvehiclemove.getPitch()) || !Floats
+            .isFinite(packetplayinvehiclemove.getYaw());
     }
 
-    @Override
-    public void a(PacketPlayInVehicleMove packetplayinvehiclemove) {
-        PlayerConnectionUtils.ensureMainThread(packetplayinvehiclemove, this, this.player.getWorldServer());
+    @Override public void a(PacketPlayInVehicleMove packetplayinvehiclemove) {
+        PlayerConnectionUtils
+            .ensureMainThread(packetplayinvehiclemove, this, this.player.getWorldServer());
         if (b(packetplayinvehiclemove)) {
-            this.disconnect(new ChatMessage("multiplayer.disconnect.invalid_vehicle_movement", new Object[0]));
+            this.disconnect(
+                new ChatMessage("multiplayer.disconnect.invalid_vehicle_movement", new Object[0]));
         } else {
             Entity entity = this.player.getRootVehicle();
 
-            if (entity != this.player && entity.getRidingPassenger() == this.player && entity == this.r) {
+            if (entity != this.player && entity.getRidingPassenger() == this.player
+                && entity == this.r) {
                 WorldServer worldserver = this.player.getWorldServer();
                 double d0 = entity.locX();
                 double d1 = entity.locY();
@@ -336,7 +403,9 @@ public class PlayerConnection implements PacketListenerPlayIn {
                 ++this.receivedMovePackets;
                 int i = this.receivedMovePackets - this.processedMovePackets;
                 if (i > Math.max(this.allowedPlayerTicks, 5)) {
-                    PlayerConnection.LOGGER.debug(this.player.getName() + " is sending move packets too frequently (" + i + " packets since last tick)");
+                    PlayerConnection.LOGGER.debug(
+                        this.player.getName() + " is sending move packets too frequently (" + i
+                            + " packets since last tick)");
                     i = 1;
                 }
 
@@ -354,20 +423,28 @@ public class PlayerConnection implements PacketListenerPlayIn {
                 speed *= 2f; // TODO: Get the speed of the vehicle instead of the player
 
                 // Paper start - Prevent moving into unloaded chunks
-                if (player.world.paperConfig.preventMovingIntoUnloadedChunks && worldserver.getChunkIfLoadedImmediately((int) Math.floor(packetplayinvehiclemove.getX()) >> 4, (int) Math.floor(packetplayinvehiclemove.getZ()) >> 4) == null) {
+                if (player.world.paperConfig.preventMovingIntoUnloadedChunks && worldserver
+                    .getChunkIfLoadedImmediately(
+                        (int) Math.floor(packetplayinvehiclemove.getX()) >> 4,
+                        (int) Math.floor(packetplayinvehiclemove.getZ()) >> 4) == null) {
                     this.networkManager.sendPacket(new PacketPlayOutVehicleMove(entity));
                     return;
                 }
                 // Paper end
 
-                if (d10 - d9 > Math.max(100.0D, Math.pow((double) (org.spigotmc.SpigotConfig.movedTooQuicklyMultiplier * (float) i * speed), 2)) && !this.isExemptPlayer()) {
-                // CraftBukkit end
-                    PlayerConnection.LOGGER.warn("{} (vehicle of {}) moved too quickly! {},{},{}", entity.getDisplayName().getString(), this.player.getDisplayName().getString(), d6, d7, d8);
+                if (d10 - d9 > Math.max(100.0D, Math.pow(
+                    (double) (org.spigotmc.SpigotConfig.movedTooQuicklyMultiplier * (float) i
+                        * speed), 2)) && !this.isExemptPlayer()) {
+                    // CraftBukkit end
+                    PlayerConnection.LOGGER.warn("{} (vehicle of {}) moved too quickly! {},{},{}",
+                        entity.getDisplayName().getString(),
+                        this.player.getDisplayName().getString(), d6, d7, d8);
                     this.networkManager.sendPacket(new PacketPlayOutVehicleMove(entity));
                     return;
                 }
 
-                boolean flag = worldserver.getCubes(entity, entity.getBoundingBox().shrink(0.0625D));
+                boolean flag =
+                    worldserver.getCubes(entity, entity.getBoundingBox().shrink(0.0625D));
 
                 d6 = d3 - this.v;
                 d7 = d4 - this.w - 1.0E-6D;
@@ -387,17 +464,21 @@ public class PlayerConnection implements PacketListenerPlayIn {
 
                 if (d10 > org.spigotmc.SpigotConfig.movedWronglyThreshold) { // Spigot
                     flag1 = true;
-                    PlayerConnection.LOGGER.warn(entity.getName() + " (vehicle of " + this.player.getName() + ") moved wrongly!"); // Paper - More informative
+                    PlayerConnection.LOGGER.warn(
+                        entity.getName() + " (vehicle of " + this.player.getName()
+                            + ") moved wrongly!"); // Paper - More informative
                 }
                 Location curPos = this.getPlayer().getLocation(); // Spigot
 
                 entity.setLocation(d3, d4, d5, f, f1);
                 player.setLocation(d3, d4, d5, this.player.yaw, this.player.pitch); // CraftBukkit
-                boolean flag2 = worldserver.getCubes(entity, entity.getBoundingBox().shrink(0.0625D));
+                boolean flag2 =
+                    worldserver.getCubes(entity, entity.getBoundingBox().shrink(0.0625D));
 
                 if (flag && (flag1 || !flag2)) {
                     entity.setLocation(d0, d1, d2, f, f1);
-                    player.setLocation(d0, d1, d2, this.player.yaw, this.player.pitch); // CraftBukkit
+                    player
+                        .setLocation(d0, d1, d2, this.player.yaw, this.player.pitch); // CraftBukkit
                     this.networkManager.sendPacket(new PacketPlayOutVehicleMove(entity));
                     return;
                 }
@@ -405,8 +486,7 @@ public class PlayerConnection implements PacketListenerPlayIn {
                 // CraftBukkit start - fire PlayerMoveEvent
                 Player player = this.getPlayer();
                 // Spigot Start
-                if ( !hasMoved )
-                {
+                if (!hasMoved) {
                     lastPosX = curPos.getX();
                     lastPosY = curPos.getY();
                     lastPosZ = curPos.getZ();
@@ -415,8 +495,11 @@ public class PlayerConnection implements PacketListenerPlayIn {
                     hasMoved = true;
                 }
                 // Spigot End
-                Location from = new Location(player.getWorld(), lastPosX, lastPosY, lastPosZ, lastYaw, lastPitch); // Get the Players previous Event location.
-                Location to = player.getLocation().clone(); // Start off the To location as the Players current location.
+                Location from =
+                    new Location(player.getWorld(), lastPosX, lastPosY, lastPosZ, lastYaw,
+                        lastPitch); // Get the Players previous Event location.
+                Location to = player.getLocation()
+                    .clone(); // Start off the To location as the Players current location.
 
                 // If the packet contains movement information then we update the To location with the correct XYZ.
                 to.setX(packetplayinvehiclemove.getX());
@@ -429,8 +512,11 @@ public class PlayerConnection implements PacketListenerPlayIn {
                 to.setPitch(packetplayinvehiclemove.getPitch());
 
                 // Prevent 40 event-calls for less than a single pixel of movement >.>
-                double delta = Math.pow(this.lastPosX - to.getX(), 2) + Math.pow(this.lastPosY - to.getY(), 2) + Math.pow(this.lastPosZ - to.getZ(), 2);
-                float deltaAngle = Math.abs(this.lastYaw - to.getYaw()) + Math.abs(this.lastPitch - to.getPitch());
+                double delta =
+                    Math.pow(this.lastPosX - to.getX(), 2) + Math.pow(this.lastPosY - to.getY(), 2)
+                        + Math.pow(this.lastPosZ - to.getZ(), 2);
+                float deltaAngle =
+                    Math.abs(this.lastYaw - to.getYaw()) + Math.abs(this.lastPitch - to.getPitch());
 
                 if ((delta > 1f / 256 || deltaAngle > 10f) && !this.player.isFrozen()) {
                     this.lastPosX = to.getX();
@@ -455,7 +541,8 @@ public class PlayerConnection implements PacketListenerPlayIn {
                         // there to avoid any 'Moved wrongly' or 'Moved too quickly' errors.
                         // We only do this if the Event was not cancelled.
                         if (!oldTo.equals(event.getTo()) && !event.isCancelled()) {
-                            this.player.getBukkitEntity().teleport(event.getTo(), PlayerTeleportEvent.TeleportCause.PLUGIN);
+                            this.player.getBukkitEntity()
+                                .teleport(event.getTo(), PlayerTeleportEvent.TeleportCause.PLUGIN);
                             return;
                         }
 
@@ -470,8 +557,10 @@ public class PlayerConnection implements PacketListenerPlayIn {
                 // CraftBukkit end
 
                 this.player.getWorldServer().getChunkProvider().movePlayer(this.player);
-                this.player.checkMovement(this.player.locX() - d0, this.player.locY() - d1, this.player.locZ() - d2);
-                this.D = d11 >= -0.03125D && !this.minecraftServer.getAllowFlight() && !worldserver.b(entity.getBoundingBox().g(0.0625D).b(0.0D, -0.55D, 0.0D));
+                this.player.checkMovement(this.player.locX() - d0, this.player.locY() - d1,
+                    this.player.locZ() - d2);
+                this.D = d11 >= -0.03125D && !this.minecraftServer.getAllowFlight() && !worldserver
+                    .b(entity.getBoundingBox().g(0.0625D).b(0.0D, -0.55D, 0.0D));
                 this.v = entity.locX();
                 this.w = entity.locY();
                 this.x = entity.locZ();
@@ -480,11 +569,13 @@ public class PlayerConnection implements PacketListenerPlayIn {
         }
     }
 
-    @Override
-    public void a(PacketPlayInTeleportAccept packetplayinteleportaccept) {
-        PlayerConnectionUtils.ensureMainThread(packetplayinteleportaccept, this, this.player.getWorldServer());
-        if (packetplayinteleportaccept.b() == this.teleportAwait && this.teleportPos != null) { // CraftBukkit
-            this.player.setLocation(this.teleportPos.x, this.teleportPos.y, this.teleportPos.z, this.player.yaw, this.player.pitch);
+    @Override public void a(PacketPlayInTeleportAccept packetplayinteleportaccept) {
+        PlayerConnectionUtils
+            .ensureMainThread(packetplayinteleportaccept, this, this.player.getWorldServer());
+        if (packetplayinteleportaccept.b() == this.teleportAwait
+            && this.teleportPos != null) { // CraftBukkit
+            this.player.setLocation(this.teleportPos.x, this.teleportPos.y, this.teleportPos.z,
+                this.player.yaw, this.player.pitch);
             this.o = this.teleportPos.x;
             this.p = this.teleportPos.y;
             this.q = this.teleportPos.z;
@@ -498,11 +589,12 @@ public class PlayerConnection implements PacketListenerPlayIn {
 
     }
 
-    @Override
-    public void a(PacketPlayInRecipeDisplayed packetplayinrecipedisplayed) {
-        PlayerConnectionUtils.ensureMainThread(packetplayinrecipedisplayed, this, this.player.getWorldServer());
+    @Override public void a(PacketPlayInRecipeDisplayed packetplayinrecipedisplayed) {
+        PlayerConnectionUtils
+            .ensureMainThread(packetplayinrecipedisplayed, this, this.player.getWorldServer());
         if (packetplayinrecipedisplayed.b() == PacketPlayInRecipeDisplayed.Status.SHOWN) {
-            Optional<? extends IRecipe<?>> optional = this.minecraftServer.getCraftingManager().a(packetplayinrecipedisplayed.c()); // CraftBukkit - decompile error
+            Optional<? extends IRecipe<?>> optional = this.minecraftServer.getCraftingManager()
+                .a(packetplayinrecipedisplayed.c()); // CraftBukkit - decompile error
             RecipeBookServer recipebookserver = this.player.B();
 
             optional.ifPresent(recipebookserver::e);
@@ -519,9 +611,9 @@ public class PlayerConnection implements PacketListenerPlayIn {
 
     }
 
-    @Override
-    public void a(PacketPlayInAdvancements packetplayinadvancements) {
-        PlayerConnectionUtils.ensureMainThread(packetplayinadvancements, this, this.player.getWorldServer());
+    @Override public void a(PacketPlayInAdvancements packetplayinadvancements) {
+        PlayerConnectionUtils
+            .ensureMainThread(packetplayinadvancements, this, this.player.getWorldServer());
         if (packetplayinadvancements.c() == PacketPlayInAdvancements.Status.OPENED_TAB) {
             MinecraftKey minecraftkey = packetplayinadvancements.d();
             Advancement advancement = this.minecraftServer.getAdvancementData().a(minecraftkey);
@@ -533,12 +625,15 @@ public class PlayerConnection implements PacketListenerPlayIn {
 
     }
 
-    @Override
-    public void a(PacketPlayInTabComplete packetplayintabcomplete) {
+    @Override public void a(PacketPlayInTabComplete packetplayintabcomplete) {
         // PlayerConnectionUtils.ensureMainThread(packetplayintabcomplete, this, this.player.getWorldServer()); // Paper - run this async
         // CraftBukkit start
-        if (tabSpamLimiter.addAndGet(com.destroystokyo.paper.PaperConfig.tabSpamIncrement) > com.destroystokyo.paper.PaperConfig.tabSpamLimit && !this.minecraftServer.getPlayerList().isOp(this.player.getProfile())) { // Paper start - split and make configurable
-            minecraftServer.scheduleOnMain(() -> this.disconnect(new ChatMessage("disconnect.spam", new Object[0]))); // Paper
+        if (tabSpamLimiter.addAndGet(com.destroystokyo.paper.PaperConfig.tabSpamIncrement)
+            > com.destroystokyo.paper.PaperConfig.tabSpamLimit && !this.minecraftServer
+            .getPlayerList()
+            .isOp(this.player.getProfile())) { // Paper start - split and make configurable
+            minecraftServer.scheduleOnMain(
+                () -> this.disconnect(new ChatMessage("disconnect.spam", new Object[0]))); // Paper
             return;
         }
         // CraftBukkit end
@@ -552,38 +647,50 @@ public class PlayerConnection implements PacketListenerPlayIn {
         com.destroystokyo.paper.event.server.AsyncTabCompleteEvent event;
         java.util.List<String> completions = new java.util.ArrayList<>();
         String buffer = packetplayintabcomplete.c();
-        event = new com.destroystokyo.paper.event.server.AsyncTabCompleteEvent(this.getPlayer(), completions,
-                buffer, true, null);
+        event = new com.destroystokyo.paper.event.server.AsyncTabCompleteEvent(this.getPlayer(),
+            completions, buffer, true, null);
         event.callEvent();
-        completions = event.isCancelled() ? com.google.common.collect.ImmutableList.of() : event.getCompletions();
+        completions = event.isCancelled() ?
+            com.google.common.collect.ImmutableList.of() :
+            event.getCompletions();
         // If the event isn't handled, we can assume that we have no completions, and so we'll ask the server
         if (!event.isHandled()) {
             if (!event.isCancelled()) {
                 // Paper end - async tab completion
                 this.minecraftServer.scheduleOnMain(() -> { // Paper - This needs to be on main
-            ParseResults<CommandListenerWrapper> parseresults = this.minecraftServer.getCommandDispatcher().a().parse(stringreader, this.player.getCommandListener());
-
-        this.minecraftServer.getCommandDispatcher().a().getCompletionSuggestions(parseresults).thenAccept((suggestions) -> {
-            if (((Suggestions) suggestions).isEmpty()) return; // CraftBukkit - don't send through empty suggestions - prevents [<args>] from showing for plugins with nothing more to offer
-                this.networkManager.sendPacket(new PacketPlayOutTabComplete(packetplayintabcomplete.b(), (Suggestions) suggestions)); // CraftBukkit - decompile error
-            });
-        }); // Paper - This needs to be on main
+                    ParseResults<CommandListenerWrapper> parseresults =
+                        this.minecraftServer.getCommandDispatcher().a()
+                            .parse(stringreader, this.player.getCommandListener());
+
+                    this.minecraftServer.getCommandDispatcher().a()
+                        .getCompletionSuggestions(parseresults).thenAccept((suggestions) -> {
+                        if (((Suggestions) suggestions).isEmpty())
+                            return; // CraftBukkit - don't send through empty suggestions - prevents [<args>] from showing for plugins with nothing more to offer
+                        this.networkManager.sendPacket(
+                            new PacketPlayOutTabComplete(packetplayintabcomplete.b(),
+                                (Suggestions) suggestions)); // CraftBukkit - decompile error
+                    });
+                }); // Paper - This needs to be on main
             }
-        // Paper start - async tab completion
+            // Paper start - async tab completion
         } else if (!completions.isEmpty()) {
-            com.mojang.brigadier.suggestion.SuggestionsBuilder builder = new com.mojang.brigadier.suggestion.SuggestionsBuilder(packetplayintabcomplete.c(), stringreader.getTotalLength());
+            com.mojang.brigadier.suggestion.SuggestionsBuilder builder =
+                new com.mojang.brigadier.suggestion.SuggestionsBuilder(packetplayintabcomplete.c(),
+                    stringreader.getTotalLength());
 
             builder = builder.createOffset(builder.getInput().lastIndexOf(' ') + 1);
             completions.forEach(builder::suggest);
-            player.playerConnection.sendPacket(new PacketPlayOutTabComplete(packetplayintabcomplete.b(), builder.buildFuture().join()));
+            player.playerConnection.sendPacket(
+                new PacketPlayOutTabComplete(packetplayintabcomplete.b(),
+                    builder.buildFuture().join()));
         }
         // Paper end - async tab completion
 
     }
 
-    @Override
-    public void a(PacketPlayInSetCommandBlock packetplayinsetcommandblock) {
-        PlayerConnectionUtils.ensureMainThread(packetplayinsetcommandblock, this, this.player.getWorldServer());
+    @Override public void a(PacketPlayInSetCommandBlock packetplayinsetcommandblock) {
+        PlayerConnectionUtils
+            .ensureMainThread(packetplayinsetcommandblock, this, this.player.getWorldServer());
         if (!this.minecraftServer.getEnableCommandBlock()) {
             this.player.sendMessage(new ChatMessage("advMode.notEnabled", new Object[0]));
         } else if (!this.player.isCreativeAndOp()) {
@@ -604,22 +711,33 @@ public class PlayerConnection implements PacketListenerPlayIn {
 
             if (commandblocklistenerabstract != null) {
                 TileEntityCommand.Type tileentitycommand_type = tileentitycommand.m();
-                EnumDirection enumdirection = (EnumDirection) this.player.world.getType(blockposition).get(BlockCommand.a);
+                EnumDirection enumdirection =
+                    (EnumDirection) this.player.world.getType(blockposition, this.player)
+                        .get(BlockCommand.a);
                 IBlockData iblockdata;
 
                 switch (packetplayinsetcommandblock.g()) {
                     case SEQUENCE:
                         iblockdata = Blocks.CHAIN_COMMAND_BLOCK.getBlockData();
-                        this.player.world.setTypeAndData(blockposition, (IBlockData) ((IBlockData) iblockdata.set(BlockCommand.a, enumdirection)).set(BlockCommand.b, packetplayinsetcommandblock.e()), 2);
+                        this.player.world.setTypeAndData(blockposition,
+                            (IBlockData) ((IBlockData) iblockdata
+                                .set(BlockCommand.a, enumdirection))
+                                .set(BlockCommand.b, packetplayinsetcommandblock.e()), 2);
                         break;
                     case AUTO:
                         iblockdata = Blocks.REPEATING_COMMAND_BLOCK.getBlockData();
-                        this.player.world.setTypeAndData(blockposition, (IBlockData) ((IBlockData) iblockdata.set(BlockCommand.a, enumdirection)).set(BlockCommand.b, packetplayinsetcommandblock.e()), 2);
+                        this.player.world.setTypeAndData(blockposition,
+                            (IBlockData) ((IBlockData) iblockdata
+                                .set(BlockCommand.a, enumdirection))
+                                .set(BlockCommand.b, packetplayinsetcommandblock.e()), 2);
                         break;
                     case REDSTONE:
                     default:
                         iblockdata = Blocks.COMMAND_BLOCK.getBlockData();
-                        this.player.world.setTypeAndData(blockposition, (IBlockData) ((IBlockData) iblockdata.set(BlockCommand.a, enumdirection)).set(BlockCommand.b, packetplayinsetcommandblock.e()), 2);
+                        this.player.world.setTypeAndData(blockposition,
+                            (IBlockData) ((IBlockData) iblockdata
+                                .set(BlockCommand.a, enumdirection))
+                                .set(BlockCommand.b, packetplayinsetcommandblock.e()), 2);
                 }
 
                 tileentity.r();
@@ -637,22 +755,24 @@ public class PlayerConnection implements PacketListenerPlayIn {
 
                 commandblocklistenerabstract.e();
                 if (!UtilColor.b(s)) {
-                    this.player.sendMessage(new ChatMessage("advMode.setCommand.success", new Object[]{s}));
+                    this.player.sendMessage(
+                        new ChatMessage("advMode.setCommand.success", new Object[] {s}));
                 }
             }
 
         }
     }
 
-    @Override
-    public void a(PacketPlayInSetCommandMinecart packetplayinsetcommandminecart) {
-        PlayerConnectionUtils.ensureMainThread(packetplayinsetcommandminecart, this, this.player.getWorldServer());
+    @Override public void a(PacketPlayInSetCommandMinecart packetplayinsetcommandminecart) {
+        PlayerConnectionUtils
+            .ensureMainThread(packetplayinsetcommandminecart, this, this.player.getWorldServer());
         if (!this.minecraftServer.getEnableCommandBlock()) {
             this.player.sendMessage(new ChatMessage("advMode.notEnabled", new Object[0]));
         } else if (!this.player.isCreativeAndOp()) {
             this.player.sendMessage(new ChatMessage("advMode.notAllowed", new Object[0]));
         } else {
-            CommandBlockListenerAbstract commandblocklistenerabstract = packetplayinsetcommandminecart.a(this.player.world);
+            CommandBlockListenerAbstract commandblocklistenerabstract =
+                packetplayinsetcommandminecart.a(this.player.world);
 
             if (commandblocklistenerabstract != null) {
                 commandblocklistenerabstract.setCommand(packetplayinsetcommandminecart.b());
@@ -662,24 +782,30 @@ public class PlayerConnection implements PacketListenerPlayIn {
                 }
 
                 commandblocklistenerabstract.e();
-                this.player.sendMessage(new ChatMessage("advMode.setCommand.success", new Object[]{packetplayinsetcommandminecart.b()}));
+                this.player.sendMessage(new ChatMessage("advMode.setCommand.success",
+                    new Object[] {packetplayinsetcommandminecart.b()}));
             }
 
         }
     }
 
-    @Override
-    public void a(PacketPlayInPickItem packetplayinpickitem) {
-        PlayerConnectionUtils.ensureMainThread(packetplayinpickitem, this, this.player.getWorldServer());
+    @Override public void a(PacketPlayInPickItem packetplayinpickitem) {
+        PlayerConnectionUtils
+            .ensureMainThread(packetplayinpickitem, this, this.player.getWorldServer());
         this.player.inventory.c(packetplayinpickitem.b());
-        this.player.playerConnection.sendPacket(new PacketPlayOutSetSlot(-2, this.player.inventory.itemInHandIndex, this.player.inventory.getItem(this.player.inventory.itemInHandIndex)));
-        this.player.playerConnection.sendPacket(new PacketPlayOutSetSlot(-2, packetplayinpickitem.b(), this.player.inventory.getItem(packetplayinpickitem.b())));
-        this.player.playerConnection.sendPacket(new PacketPlayOutHeldItemSlot(this.player.inventory.itemInHandIndex));
-    }
-
-    @Override
-    public void a(PacketPlayInItemName packetplayinitemname) {
-        PlayerConnectionUtils.ensureMainThread(packetplayinitemname, this, this.player.getWorldServer());
+        this.player.playerConnection.sendPacket(
+            new PacketPlayOutSetSlot(-2, this.player.inventory.itemInHandIndex,
+                this.player.inventory.getItem(this.player.inventory.itemInHandIndex)));
+        this.player.playerConnection.sendPacket(
+            new PacketPlayOutSetSlot(-2, packetplayinpickitem.b(),
+                this.player.inventory.getItem(packetplayinpickitem.b())));
+        this.player.playerConnection
+            .sendPacket(new PacketPlayOutHeldItemSlot(this.player.inventory.itemInHandIndex));
+    }
+
+    @Override public void a(PacketPlayInItemName packetplayinitemname) {
+        PlayerConnectionUtils
+            .ensureMainThread(packetplayinitemname, this, this.player.getWorldServer());
         if (this.player.activeContainer instanceof ContainerAnvil) {
             ContainerAnvil containeranvil = (ContainerAnvil) this.player.activeContainer;
             String s = SharedConstants.a(packetplayinitemname.b());
@@ -691,21 +817,22 @@ public class PlayerConnection implements PacketListenerPlayIn {
 
     }
 
-    @Override
-    public void a(PacketPlayInBeacon packetplayinbeacon) {
-        PlayerConnectionUtils.ensureMainThread(packetplayinbeacon, this, this.player.getWorldServer());
+    @Override public void a(PacketPlayInBeacon packetplayinbeacon) {
+        PlayerConnectionUtils
+            .ensureMainThread(packetplayinbeacon, this, this.player.getWorldServer());
         if (this.player.activeContainer instanceof ContainerBeacon) {
-            ((ContainerBeacon) this.player.activeContainer).c(packetplayinbeacon.b(), packetplayinbeacon.c());
+            ((ContainerBeacon) this.player.activeContainer)
+                .c(packetplayinbeacon.b(), packetplayinbeacon.c());
         }
 
     }
 
-    @Override
-    public void a(PacketPlayInStruct packetplayinstruct) {
-        PlayerConnectionUtils.ensureMainThread(packetplayinstruct, this, this.player.getWorldServer());
+    @Override public void a(PacketPlayInStruct packetplayinstruct) {
+        PlayerConnectionUtils
+            .ensureMainThread(packetplayinstruct, this, this.player.getWorldServer());
         if (this.player.isCreativeAndOp()) {
             BlockPosition blockposition = packetplayinstruct.b();
-            IBlockData iblockdata = this.player.world.getType(blockposition);
+            IBlockData iblockdata = this.player.world.getType(blockposition, this.player);
             TileEntity tileentity = this.player.world.getTileEntity(blockposition);
 
             if (tileentity instanceof TileEntityStructure) {
@@ -728,27 +855,36 @@ public class PlayerConnection implements PacketListenerPlayIn {
 
                     if (packetplayinstruct.c() == TileEntityStructure.UpdateType.SAVE_AREA) {
                         if (tileentitystructure.D()) {
-                            this.player.a((IChatBaseComponent) (new ChatMessage("structure_block.save_success", new Object[]{s})), false);
+                            this.player.a((IChatBaseComponent) (new ChatMessage(
+                                "structure_block.save_success", new Object[] {s})), false);
                         } else {
-                            this.player.a((IChatBaseComponent) (new ChatMessage("structure_block.save_failure", new Object[]{s})), false);
+                            this.player.a((IChatBaseComponent) (new ChatMessage(
+                                "structure_block.save_failure", new Object[] {s})), false);
                         }
                     } else if (packetplayinstruct.c() == TileEntityStructure.UpdateType.LOAD_AREA) {
                         if (!tileentitystructure.G()) {
-                            this.player.a((IChatBaseComponent) (new ChatMessage("structure_block.load_not_found", new Object[]{s})), false);
+                            this.player.a((IChatBaseComponent) (new ChatMessage(
+                                "structure_block.load_not_found", new Object[] {s})), false);
                         } else if (tileentitystructure.E()) {
-                            this.player.a((IChatBaseComponent) (new ChatMessage("structure_block.load_success", new Object[]{s})), false);
+                            this.player.a((IChatBaseComponent) (new ChatMessage(
+                                "structure_block.load_success", new Object[] {s})), false);
                         } else {
-                            this.player.a((IChatBaseComponent) (new ChatMessage("structure_block.load_prepare", new Object[]{s})), false);
+                            this.player.a((IChatBaseComponent) (new ChatMessage(
+                                "structure_block.load_prepare", new Object[] {s})), false);
                         }
                     } else if (packetplayinstruct.c() == TileEntityStructure.UpdateType.SCAN_AREA) {
                         if (tileentitystructure.C()) {
-                            this.player.a((IChatBaseComponent) (new ChatMessage("structure_block.size_success", new Object[]{s})), false);
+                            this.player.a((IChatBaseComponent) (new ChatMessage(
+                                "structure_block.size_success", new Object[] {s})), false);
                         } else {
-                            this.player.a((IChatBaseComponent) (new ChatMessage("structure_block.size_failure", new Object[0])), false);
+                            this.player.a((IChatBaseComponent) (new ChatMessage(
+                                "structure_block.size_failure", new Object[0])), false);
                         }
                     }
                 } else {
-                    this.player.a((IChatBaseComponent) (new ChatMessage("structure_block.invalid_structure_name", new Object[]{packetplayinstruct.e()})), false);
+                    this.player.a((IChatBaseComponent) (new ChatMessage(
+                        "structure_block.invalid_structure_name",
+                        new Object[] {packetplayinstruct.e()})), false);
                 }
 
                 tileentitystructure.update();
@@ -758,12 +894,12 @@ public class PlayerConnection implements PacketListenerPlayIn {
         }
     }
 
-    @Override
-    public void a(PacketPlayInSetJigsaw packetplayinsetjigsaw) {
-        PlayerConnectionUtils.ensureMainThread(packetplayinsetjigsaw, this, this.player.getWorldServer());
+    @Override public void a(PacketPlayInSetJigsaw packetplayinsetjigsaw) {
+        PlayerConnectionUtils
+            .ensureMainThread(packetplayinsetjigsaw, this, this.player.getWorldServer());
         if (this.player.isCreativeAndOp()) {
             BlockPosition blockposition = packetplayinsetjigsaw.b();
-            IBlockData iblockdata = this.player.world.getType(blockposition);
+            IBlockData iblockdata = this.player.world.getType(blockposition, this.player);
             TileEntity tileentity = this.player.world.getTileEntity(blockposition);
 
             if (tileentity instanceof TileEntityJigsaw) {
@@ -779,15 +915,16 @@ public class PlayerConnection implements PacketListenerPlayIn {
         }
     }
 
-    @Override
-    public void a(PacketPlayInTrSel packetplayintrsel) {
-        PlayerConnectionUtils.ensureMainThread(packetplayintrsel, this, this.player.getWorldServer());
+    @Override public void a(PacketPlayInTrSel packetplayintrsel) {
+        PlayerConnectionUtils
+            .ensureMainThread(packetplayintrsel, this, this.player.getWorldServer());
         int i = packetplayintrsel.b();
         Container container = this.player.activeContainer;
 
         if (container instanceof ContainerMerchant) {
             ContainerMerchant containermerchant = (ContainerMerchant) container;
-            CraftEventFactory.callTradeSelectEvent(this.player, i, containermerchant); // CraftBukkit
+            CraftEventFactory
+                .callTradeSelectEvent(this.player, i, containermerchant); // CraftBukkit
 
             containermerchant.d(i);
             containermerchant.g(i);
@@ -795,19 +932,20 @@ public class PlayerConnection implements PacketListenerPlayIn {
 
     }
 
-    @Override
-    public void a(PacketPlayInBEdit packetplayinbedit) {
+    @Override public void a(PacketPlayInBEdit packetplayinbedit) {
         // Paper start
         ItemStack testStack = packetplayinbedit.b();
         if (!server.isPrimaryThread() && !testStack.isEmpty() && testStack.getTag() != null) {
             NBTTagList pageList = testStack.getTag().getList("pages", 8);
             long byteTotal = 0;
             int maxBookPageSize = com.destroystokyo.paper.PaperConfig.maxBookPageSize;
-            double multiplier = Math.max(0.3D, Math.min(1D, com.destroystokyo.paper.PaperConfig.maxBookTotalSizeMultiplier));
+            double multiplier = Math.max(0.3D,
+                Math.min(1D, com.destroystokyo.paper.PaperConfig.maxBookTotalSizeMultiplier));
             long byteAllowed = maxBookPageSize;
             for (int i = 0; i < pageList.size(); ++i) {
                 String testString = pageList.getString(i);
-                int byteLength = testString.getBytes(java.nio.charset.StandardCharsets.UTF_8).length;
+                int byteLength =
+                    testString.getBytes(java.nio.charset.StandardCharsets.UTF_8).length;
                 byteTotal += byteLength;
                 int length = testString.length();
                 int multibytes = 0;
@@ -818,7 +956,9 @@ public class PlayerConnection implements PacketListenerPlayIn {
                         }
                     }
                 }
-                byteAllowed += (maxBookPageSize * Math.min(1, Math.max(0.1D, (double) length / 255D))) * multiplier;
+                byteAllowed +=
+                    (maxBookPageSize * Math.min(1, Math.max(0.1D, (double) length / 255D)))
+                        * multiplier;
 
                 if (multibytes > 1) {
                     // penalize MB
@@ -827,20 +967,26 @@ public class PlayerConnection implements PacketListenerPlayIn {
             }
 
             if (byteTotal > byteAllowed) {
-                PlayerConnection.LOGGER.warn(this.player.getName() + " tried to send too large of a book. Book Size: " + byteTotal + " - Allowed:  "+ byteAllowed + " - Pages: " + pageList.size());
+                PlayerConnection.LOGGER.warn(
+                    this.player.getName() + " tried to send too large of a book. Book Size: "
+                        + byteTotal + " - Allowed:  " + byteAllowed + " - Pages: " + pageList
+                        .size());
                 minecraftServer.scheduleOnMain(() -> this.disconnect("Book too large!"));
                 return;
             }
         }
         // Paper end
-        PlayerConnectionUtils.ensureMainThread(packetplayinbedit, this, this.player.getWorldServer());
+        PlayerConnectionUtils
+            .ensureMainThread(packetplayinbedit, this, this.player.getWorldServer());
         // CraftBukkit start
         if (this.lastBookTick + 20 > MinecraftServer.currentTick) {
             this.disconnect("Book edited too quickly!");
             return;
         }
         this.lastBookTick = MinecraftServer.currentTick;
-        EnumItemSlot enumitemslot = packetplayinbedit.d() == EnumHand.MAIN_HAND ? EnumItemSlot.MAINHAND : EnumItemSlot.OFFHAND;
+        EnumItemSlot enumitemslot = packetplayinbedit.d() == EnumHand.MAIN_HAND ?
+            EnumItemSlot.MAINHAND :
+            EnumItemSlot.OFFHAND;
         // CraftBukkit end
         ItemStack itemstack = packetplayinbedit.b();
 
@@ -848,7 +994,8 @@ public class PlayerConnection implements PacketListenerPlayIn {
             if (ItemBookAndQuill.b(itemstack.getTag())) {
                 ItemStack itemstack1 = this.player.b(packetplayinbedit.d());
 
-                if (itemstack.getItem() == Items.WRITABLE_BOOK && itemstack1.getItem() == Items.WRITABLE_BOOK) {
+                if (itemstack.getItem() == Items.WRITABLE_BOOK
+                    && itemstack1.getItem() == Items.WRITABLE_BOOK) {
                     if (packetplayinbedit.c()) {
                         ItemStack itemstack2 = new ItemStack(Items.WRITTEN_BOOK);
                         NBTTagCompound nbttagcompound = itemstack1.getTag();
@@ -857,25 +1004,32 @@ public class PlayerConnection implements PacketListenerPlayIn {
                             itemstack2.setTag(nbttagcompound.clone());
                         }
 
-                        itemstack2.a("author", (NBTBase) NBTTagString.a(this.player.getDisplayName().getString()));
-                        itemstack2.a("title", (NBTBase) NBTTagString.a(itemstack.getTag().getString("title")));
+                        itemstack2.a("author",
+                            (NBTBase) NBTTagString.a(this.player.getDisplayName().getString()));
+                        itemstack2.a("title",
+                            (NBTBase) NBTTagString.a(itemstack.getTag().getString("title")));
                         NBTTagList nbttaglist = itemstack.getTag().getList("pages", 8);
 
                         for (int i = 0; i < nbttaglist.size(); ++i) {
                             String s = nbttaglist.getString(i);
                             ChatComponentText chatcomponenttext = new ChatComponentText(s);
 
-                            s = IChatBaseComponent.ChatSerializer.a((IChatBaseComponent) chatcomponenttext);
+                            s = IChatBaseComponent.ChatSerializer
+                                .a((IChatBaseComponent) chatcomponenttext);
                             nbttaglist.set(i, (NBTBase) NBTTagString.a(s));
                         }
 
                         itemstack2.a("pages", (NBTBase) nbttaglist);
-                        this.player.a(packetplayinbedit.d(), CraftEventFactory.handleEditBookEvent(player, enumitemslot, itemstack1, itemstack2)); // CraftBukkit
+                        this.player.a(packetplayinbedit.d(), CraftEventFactory
+                            .handleEditBookEvent(player, enumitemslot, itemstack1,
+                                itemstack2)); // CraftBukkit
                     } else {
                         // Paper start - dont mutate players current item, set it from the event
                         ItemStack newBook = itemstack1.cloneItemStack();
-                        newBook.getOrCreateTagAndSet("pages", (NBTBase)itemstack.getTag().getList("pages", 8));
-                        this.player.setSlot(enumitemslot, CraftEventFactory.handleEditBookEvent(player, enumitemslot, itemstack1, newBook));
+                        newBook.getOrCreateTagAndSet("pages",
+                            (NBTBase) itemstack.getTag().getList("pages", 8));
+                        this.player.setSlot(enumitemslot, CraftEventFactory
+                            .handleEditBookEvent(player, enumitemslot, itemstack1, newBook));
                         // Paper end
                     }
                 }
@@ -884,37 +1038,42 @@ public class PlayerConnection implements PacketListenerPlayIn {
         }
     }
 
-    @Override
-    public void a(PacketPlayInEntityNBTQuery packetplayinentitynbtquery) {
-        PlayerConnectionUtils.ensureMainThread(packetplayinentitynbtquery, this, this.player.getWorldServer());
+    @Override public void a(PacketPlayInEntityNBTQuery packetplayinentitynbtquery) {
+        PlayerConnectionUtils
+            .ensureMainThread(packetplayinentitynbtquery, this, this.player.getWorldServer());
         if (this.player.k(2)) {
             Entity entity = this.player.getWorldServer().getEntity(packetplayinentitynbtquery.c());
 
             if (entity != null) {
                 NBTTagCompound nbttagcompound = entity.save(new NBTTagCompound());
 
-                this.player.playerConnection.sendPacket(new PacketPlayOutNBTQuery(packetplayinentitynbtquery.b(), nbttagcompound));
+                this.player.playerConnection.sendPacket(
+                    new PacketPlayOutNBTQuery(packetplayinentitynbtquery.b(), nbttagcompound));
             }
 
         }
     }
 
-    @Override
-    public void a(PacketPlayInTileNBTQuery packetplayintilenbtquery) {
-        PlayerConnectionUtils.ensureMainThread(packetplayintilenbtquery, this, this.player.getWorldServer());
+    @Override public void a(PacketPlayInTileNBTQuery packetplayintilenbtquery) {
+        PlayerConnectionUtils
+            .ensureMainThread(packetplayintilenbtquery, this, this.player.getWorldServer());
         if (this.player.k(2)) {
-            TileEntity tileentity = this.player.getWorldServer().getTileEntity(packetplayintilenbtquery.c());
-            NBTTagCompound nbttagcompound = tileentity != null ? tileentity.save(new NBTTagCompound()) : null;
+            TileEntity tileentity =
+                this.player.getWorldServer().getTileEntity(packetplayintilenbtquery.c());
+            NBTTagCompound nbttagcompound =
+                tileentity != null ? tileentity.save(new NBTTagCompound()) : null;
 
-            this.player.playerConnection.sendPacket(new PacketPlayOutNBTQuery(packetplayintilenbtquery.b(), nbttagcompound));
+            this.player.playerConnection.sendPacket(
+                new PacketPlayOutNBTQuery(packetplayintilenbtquery.b(), nbttagcompound));
         }
     }
 
-    @Override
-    public void a(PacketPlayInFlying packetplayinflying) {
-        PlayerConnectionUtils.ensureMainThread(packetplayinflying, this, this.player.getWorldServer());
+    @Override public void a(PacketPlayInFlying packetplayinflying) {
+        PlayerConnectionUtils
+            .ensureMainThread(packetplayinflying, this, this.player.getWorldServer());
         if (b(packetplayinflying)) {
-            this.disconnect(new ChatMessage("multiplayer.disconnect.invalid_player_movement", new Object[0]));
+            this.disconnect(
+                new ChatMessage("multiplayer.disconnect.invalid_player_movement", new Object[0]));
         } else {
             WorldServer worldserver = this.minecraftServer.getWorldServer(this.player.dimension);
 
@@ -926,13 +1085,17 @@ public class PlayerConnection implements PacketListenerPlayIn {
                 if (this.teleportPos != null) {
                     if (this.e - this.A > 20) {
                         this.A = this.e;
-                        this.a(this.teleportPos.x, this.teleportPos.y, this.teleportPos.z, this.player.yaw, this.player.pitch);
+                        this.a(this.teleportPos.x, this.teleportPos.y, this.teleportPos.z,
+                            this.player.yaw, this.player.pitch);
                     }
                     this.allowedPlayerTicks = 20; // CraftBukkit
                 } else {
                     this.A = this.e;
                     if (this.player.isPassenger()) {
-                        this.player.setLocation(this.player.locX(), this.player.locY(), this.player.locZ(), packetplayinflying.a(this.player.yaw), packetplayinflying.b(this.player.pitch));
+                        this.player
+                            .setLocation(this.player.locX(), this.player.locY(), this.player.locZ(),
+                                packetplayinflying.a(this.player.yaw),
+                                packetplayinflying.b(this.player.pitch));
                         this.player.getWorldServer().getChunkProvider().movePlayer(this.player);
                         this.allowedPlayerTicks = 20; // CraftBukkit
                     } else {
@@ -947,9 +1110,11 @@ public class PlayerConnection implements PacketListenerPlayIn {
                         double d1 = this.player.locY();
                         double d2 = this.player.locZ();
                         double d3 = this.player.locY();
-                        double d4 = packetplayinflying.a(this.player.locX());double toX = d4; // Paper - OBFHELPER
+                        double d4 = packetplayinflying.a(this.player.locX());
+                        double toX = d4; // Paper - OBFHELPER
                         double d5 = packetplayinflying.b(this.player.locY());
-                        double d6 = packetplayinflying.c(this.player.locZ());double toZ = d6; // Paper - OBFHELPER
+                        double d6 = packetplayinflying.c(this.player.locZ());
+                        double toZ = d6; // Paper - OBFHELPER
                         float f = packetplayinflying.a(this.player.yaw);
                         float f1 = packetplayinflying.b(this.player.pitch);
                         double d7 = d4 - this.l;
@@ -960,7 +1125,9 @@ public class PlayerConnection implements PacketListenerPlayIn {
 
                         if (this.player.isSleeping()) {
                             if (d11 > 1.0D) {
-                                this.a(this.player.locX(), this.player.locY(), this.player.locZ(), packetplayinflying.a(this.player.yaw), packetplayinflying.b(this.player.pitch));
+                                this.a(this.player.locX(), this.player.locY(), this.player.locZ(),
+                                    packetplayinflying.a(this.player.yaw),
+                                    packetplayinflying.b(this.player.pitch));
                             }
 
                         } else {
@@ -968,12 +1135,15 @@ public class PlayerConnection implements PacketListenerPlayIn {
                             int i = this.receivedMovePackets - this.processedMovePackets;
 
                             // CraftBukkit start - handle custom speeds and skipped ticks
-                            this.allowedPlayerTicks += (System.currentTimeMillis() / 50) - this.lastTick;
+                            this.allowedPlayerTicks +=
+                                (System.currentTimeMillis() / 50) - this.lastTick;
                             this.allowedPlayerTicks = Math.max(this.allowedPlayerTicks, 1);
                             this.lastTick = (int) (System.currentTimeMillis() / 50);
 
                             if (i > Math.max(this.allowedPlayerTicks, 5)) {
-                                PlayerConnection.LOGGER.debug("{} is sending move packets too frequently ({} packets since last tick)", this.player.getDisplayName().getString(), i);
+                                PlayerConnection.LOGGER.debug(
+                                    "{} is sending move packets too frequently ({} packets since last tick)",
+                                    this.player.getDisplayName().getString(), i);
                                 i = 1;
                             }
 
@@ -989,19 +1159,31 @@ public class PlayerConnection implements PacketListenerPlayIn {
                                 speed = player.abilities.walkSpeed * 10f;
                             }
                             // Paper start - Prevent moving into unloaded chunks
-                            if (player.world.paperConfig.preventMovingIntoUnloadedChunks && (this.player.locX() != toX || this.player.locZ() != toZ) && worldserver.getChunkIfLoadedImmediately((int) Math.floor(toX) >> 4, (int) Math.floor(toZ) >> 4) == null) { // Paper - use getIfLoadedImmediately
-                                this.internalTeleport(this.player.locX(), this.player.locY(), this.player.locZ(), this.player.yaw, this.player.pitch, Collections.emptySet());
+                            if (player.world.paperConfig.preventMovingIntoUnloadedChunks && (
+                                this.player.locX() != toX || this.player.locZ() != toZ) &&
+                                worldserver.getChunkIfLoadedImmediately((int) Math.floor(toX) >> 4,
+                                    (int) Math.floor(toZ) >> 4)
+                                    == null) { // Paper - use getIfLoadedImmediately
+                                this.internalTeleport(this.player.locX(), this.player.locY(),
+                                    this.player.locZ(), this.player.yaw, this.player.pitch,
+                                    Collections.emptySet());
                                 return;
                             }
                             // Paper end
 
-                            if (!this.player.H() && (!this.player.getWorldServer().getGameRules().getBoolean(GameRules.DISABLE_ELYTRA_MOVEMENT_CHECK) || !this.player.isGliding())) {
+                            if (!this.player.H() && (!this.player.getWorldServer().getGameRules()
+                                .getBoolean(GameRules.DISABLE_ELYTRA_MOVEMENT_CHECK) || !this.player
+                                .isGliding())) {
                                 float f2 = this.player.isGliding() ? 300.0F : 100.0F;
 
-                                if (d11 - d10 > Math.max(f2, Math.pow((double) (org.spigotmc.SpigotConfig.movedTooQuicklyMultiplier * (float) i * speed), 2)) && !this.isExemptPlayer()) {
-                                // CraftBukkit end
-                                    PlayerConnection.LOGGER.warn("{} moved too quickly! {},{},{}", this.player.getDisplayName().getString(), d7, d8, d9);
-                                    this.a(this.player.locX(), this.player.locY(), this.player.locZ(), this.player.yaw, this.player.pitch);
+                                if (d11 - d10 > Math.max(f2, Math.pow(
+                                    (double) (org.spigotmc.SpigotConfig.movedTooQuicklyMultiplier
+                                        * (float) i * speed), 2)) && !this.isExemptPlayer()) {
+                                    // CraftBukkit end
+                                    PlayerConnection.LOGGER.warn("{} moved too quickly! {},{},{}",
+                                        this.player.getDisplayName().getString(), d7, d8, d9);
+                                    this.a(this.player.locX(), this.player.locY(),
+                                        this.player.locZ(), this.player.yaw, this.player.pitch);
                                     return;
                                 }
                             }
@@ -1018,8 +1200,12 @@ public class PlayerConnection implements PacketListenerPlayIn {
                             if (this.player.onGround && !packetplayinflying.b() && d8 > 0.0D) {
                                 // Paper start - Add player jump event
                                 Player player = this.getPlayer();
-                                Location from = new Location(player.getWorld(), lastPosX, lastPosY, lastPosZ, lastYaw, lastPitch); // Get the Players previous Event location.
-                                Location to = player.getLocation().clone(); // Start off the To location as the Players current location.
+                                Location from =
+                                    new Location(player.getWorld(), lastPosX, lastPosY, lastPosZ,
+                                        lastYaw,
+                                        lastPitch); // Get the Players previous Event location.
+                                Location to = player.getLocation()
+                                    .clone(); // Start off the To location as the Players current location.
 
                                 // If the packet contains movement information then we update the To location with the correct XYZ.
                                 if (packetplayinflying.hasPos) {
@@ -1040,7 +1226,8 @@ public class PlayerConnection implements PacketListenerPlayIn {
                                     this.player.jump();
                                 } else {
                                     from = event.getFrom();
-                                    this.internalTeleport(from.getX(), from.getY(), from.getZ(), from.getYaw(), from.getPitch(), Collections.emptySet());
+                                    this.internalTeleport(from.getX(), from.getY(), from.getZ(),
+                                        from.getYaw(), from.getPitch(), Collections.emptySet());
                                     return;
                                 }
                                 // Paper end
@@ -1060,13 +1247,20 @@ public class PlayerConnection implements PacketListenerPlayIn {
                             d11 = d7 * d7 + d8 * d8 + d9 * d9;
                             boolean flag1 = false;
 
-                            if (!this.player.H() && d11 > org.spigotmc.SpigotConfig.movedWronglyThreshold && !this.player.isSleeping() && !this.player.playerInteractManager.isCreative() && this.player.playerInteractManager.getGameMode() != EnumGamemode.SPECTATOR) { // Spigot
+                            if (!this.player.H()
+                                && d11 > org.spigotmc.SpigotConfig.movedWronglyThreshold
+                                && !this.player.isSleeping() && !this.player.playerInteractManager
+                                .isCreative() && this.player.playerInteractManager.getGameMode()
+                                != EnumGamemode.SPECTATOR) { // Spigot
                                 flag1 = true;
-                                PlayerConnection.LOGGER.warn("{} moved wrongly!", this.player.getDisplayName().getString());
+                                PlayerConnection.LOGGER.warn("{} moved wrongly!",
+                                    this.player.getDisplayName().getString());
                             }
 
                             this.player.setLocation(d4, d5, d6, f, f1);
-                            this.player.checkMovement(this.player.locX() - d0, this.player.locY() - d1, this.player.locZ() - d2);
+                            this.player
+                                .checkMovement(this.player.locX() - d0, this.player.locY() - d1,
+                                    this.player.locZ() - d2);
                             if (!this.player.noclip && !this.player.isSleeping()) {
                                 boolean flag2 = this.a((IWorldReader) worldserver);
 
@@ -1081,8 +1275,11 @@ public class PlayerConnection implements PacketListenerPlayIn {
                             this.player.setLocation(prevX, prevY, prevZ, prevYaw, prevPitch);
 
                             Player player = this.getPlayer();
-                            Location from = new Location(player.getWorld(), lastPosX, lastPosY, lastPosZ, lastYaw, lastPitch); // Get the Players previous Event location.
-                            Location to = player.getLocation().clone(); // Start off the To location as the Players current location.
+                            Location from =
+                                new Location(player.getWorld(), lastPosX, lastPosY, lastPosZ,
+                                    lastYaw, lastPitch); // Get the Players previous Event location.
+                            Location to = player.getLocation()
+                                .clone(); // Start off the To location as the Players current location.
 
                             // If the packet contains movement information then we update the To location with the correct XYZ.
                             if (packetplayinflying.hasPos) {
@@ -1098,8 +1295,11 @@ public class PlayerConnection implements PacketListenerPlayIn {
                             }
 
                             // Prevent 40 event-calls for less than a single pixel of movement >.>
-                            double delta = Math.pow(this.lastPosX - to.getX(), 2) + Math.pow(this.lastPosY - to.getY(), 2) + Math.pow(this.lastPosZ - to.getZ(), 2);
-                            float deltaAngle = Math.abs(this.lastYaw - to.getYaw()) + Math.abs(this.lastPitch - to.getPitch());
+                            double delta = Math.pow(this.lastPosX - to.getX(), 2) + Math
+                                .pow(this.lastPosY - to.getY(), 2) + Math
+                                .pow(this.lastPosZ - to.getZ(), 2);
+                            float deltaAngle = Math.abs(this.lastYaw - to.getYaw()) + Math
+                                .abs(this.lastPitch - to.getPitch());
 
                             if ((delta > 1f / 256 || deltaAngle > 10f) && !this.player.isFrozen()) {
                                 this.lastPosX = to.getX();
@@ -1124,13 +1324,15 @@ public class PlayerConnection implements PacketListenerPlayIn {
                                     // there to avoid any 'Moved wrongly' or 'Moved too quickly' errors.
                                     // We only do this if the Event was not cancelled.
                                     if (!oldTo.equals(event.getTo()) && !event.isCancelled()) {
-                                        this.player.getBukkitEntity().teleport(event.getTo(), PlayerTeleportEvent.TeleportCause.PLUGIN);
+                                        this.player.getBukkitEntity().teleport(event.getTo(),
+                                            PlayerTeleportEvent.TeleportCause.PLUGIN);
                                         return;
                                     }
 
                                     // Check to see if the Players Location has some how changed during the call of the event.
                                     // This can happen due to a plugin teleporting the player instead of using .setTo()
-                                    if (!from.equals(this.getPlayer().getLocation()) && this.justTeleported) {
+                                    if (!from.equals(this.getPlayer().getLocation())
+                                        && this.justTeleported) {
                                         this.justTeleported = false;
                                         return;
                                     }
@@ -1139,7 +1341,14 @@ public class PlayerConnection implements PacketListenerPlayIn {
                             this.player.setLocation(d4, d5, d6, f, f1); // Copied from above
 
                             // MC-135989, SPIGOT-5564: isRiptiding
-                            this.B = d12 >= -0.03125D && this.player.playerInteractManager.getGameMode() != EnumGamemode.SPECTATOR && !this.minecraftServer.getAllowFlight() && !this.player.abilities.canFly && !this.player.hasEffect(MobEffects.LEVITATION) && !this.player.isGliding() && !worldserver.b(this.player.getBoundingBox().g(0.0625D).b(0.0D, -0.55D, 0.0D)) && !this.player.isRiptiding();
+                            this.B = d12 >= -0.03125D
+                                && this.player.playerInteractManager.getGameMode()
+                                != EnumGamemode.SPECTATOR && !this.minecraftServer.getAllowFlight()
+                                && !this.player.abilities.canFly && !this.player
+                                .hasEffect(MobEffects.LEVITATION) && !this.player.isGliding()
+                                && !worldserver
+                                .b(this.player.getBoundingBox().g(0.0625D).b(0.0D, -0.55D, 0.0D))
+                                && !this.player.isRiptiding();
                             // CraftBukkit end
                             this.player.onGround = packetplayinflying.b();
                             this.player.getWorldServer().getChunkProvider().movePlayer(this.player);
@@ -1155,23 +1364,30 @@ public class PlayerConnection implements PacketListenerPlayIn {
     }
 
     private boolean a(IWorldReader iworldreader) {
-        return iworldreader.getCubes(this.player, this.player.getBoundingBox().shrink(9.999999747378752E-6D));
+        return iworldreader
+            .getCubes(this.player, this.player.getBoundingBox().shrink(9.999999747378752E-6D));
     }
 
     public void a(double d0, double d1, double d2, float f, float f1) {
-        this.a(d0, d1, d2, f, f1, Collections.<PacketPlayOutPosition.EnumPlayerTeleportFlags>emptySet());
+        this.a(d0, d1, d2, f, f1,
+            Collections.<PacketPlayOutPosition.EnumPlayerTeleportFlags>emptySet());
     }
 
     // CraftBukkit start - Delegate to teleport(Location)
-    public void a(double d0, double d1, double d2, float f, float f1, PlayerTeleportEvent.TeleportCause cause) {
-        this.a(d0, d1, d2, f, f1, Collections.<PacketPlayOutPosition.EnumPlayerTeleportFlags>emptySet(), cause);
+    public void a(double d0, double d1, double d2, float f, float f1,
+        PlayerTeleportEvent.TeleportCause cause) {
+        this.a(d0, d1, d2, f, f1,
+            Collections.<PacketPlayOutPosition.EnumPlayerTeleportFlags>emptySet(), cause);
     }
 
-    public void a(double d0, double d1, double d2, float f, float f1, Set<PacketPlayOutPosition.EnumPlayerTeleportFlags> set) {
+    public void a(double d0, double d1, double d2, float f, float f1,
+        Set<PacketPlayOutPosition.EnumPlayerTeleportFlags> set) {
         this.a(d0, d1, d2, f, f1, set, PlayerTeleportEvent.TeleportCause.UNKNOWN);
     }
 
-    public void a(double d0, double d1, double d2, float f, float f1, Set<PacketPlayOutPosition.EnumPlayerTeleportFlags> set, PlayerTeleportEvent.TeleportCause cause) {
+    public void a(double d0, double d1, double d2, float f, float f1,
+        Set<PacketPlayOutPosition.EnumPlayerTeleportFlags> set,
+        PlayerTeleportEvent.TeleportCause cause) {
         Player player = this.getPlayer();
         Location from = player.getLocation();
 
@@ -1188,7 +1404,8 @@ public class PlayerConnection implements PacketListenerPlayIn {
             return;
         }
 
-        PlayerTeleportEvent event = new PlayerTeleportEvent(player, from.clone(), to.clone(), cause);
+        PlayerTeleportEvent event =
+            new PlayerTeleportEvent(player, from.clone(), to.clone(), cause);
         this.server.getPluginManager().callEvent(event);
 
         if (event.isCancelled() || !to.equals(event.getTo())) {
@@ -1205,10 +1422,12 @@ public class PlayerConnection implements PacketListenerPlayIn {
     }
 
     public void teleport(Location dest) {
-        internalTeleport(dest.getX(), dest.getY(), dest.getZ(), dest.getYaw(), dest.getPitch(), Collections.<PacketPlayOutPosition.EnumPlayerTeleportFlags>emptySet());
+        internalTeleport(dest.getX(), dest.getY(), dest.getZ(), dest.getYaw(), dest.getPitch(),
+            Collections.<PacketPlayOutPosition.EnumPlayerTeleportFlags>emptySet());
     }
 
-    private void internalTeleport(double d0, double d1, double d2, float f, float f1, Set<PacketPlayOutPosition.EnumPlayerTeleportFlags> set) {
+    private void internalTeleport(double d0, double d1, double d2, float f, float f1,
+        Set<PacketPlayOutPosition.EnumPlayerTeleportFlags> set) {
         if (player.dead) {
             LOGGER.info("Attempt to teleport dead player {} restricted", player.getName());
             return;
@@ -1223,11 +1442,21 @@ public class PlayerConnection implements PacketListenerPlayIn {
 
         this.justTeleported = true;
         // CraftBukkit end
-        double d3 = set.contains(PacketPlayOutPosition.EnumPlayerTeleportFlags.X) ? this.player.locX() : 0.0D;
-        double d4 = set.contains(PacketPlayOutPosition.EnumPlayerTeleportFlags.Y) ? this.player.locY() : 0.0D;
-        double d5 = set.contains(PacketPlayOutPosition.EnumPlayerTeleportFlags.Z) ? this.player.locZ() : 0.0D;
-        float f2 = set.contains(PacketPlayOutPosition.EnumPlayerTeleportFlags.Y_ROT) ? this.player.yaw : 0.0F;
-        float f3 = set.contains(PacketPlayOutPosition.EnumPlayerTeleportFlags.X_ROT) ? this.player.pitch : 0.0F;
+        double d3 = set.contains(PacketPlayOutPosition.EnumPlayerTeleportFlags.X) ?
+            this.player.locX() :
+            0.0D;
+        double d4 = set.contains(PacketPlayOutPosition.EnumPlayerTeleportFlags.Y) ?
+            this.player.locY() :
+            0.0D;
+        double d5 = set.contains(PacketPlayOutPosition.EnumPlayerTeleportFlags.Z) ?
+            this.player.locZ() :
+            0.0D;
+        float f2 = set.contains(PacketPlayOutPosition.EnumPlayerTeleportFlags.Y_ROT) ?
+            this.player.yaw :
+            0.0F;
+        float f3 = set.contains(PacketPlayOutPosition.EnumPlayerTeleportFlags.X_ROT) ?
+            this.player.pitch :
+            0.0F;
 
         this.teleportPos = new Vec3D(d0, d1, d2);
         if (++this.teleportAwait == Integer.MAX_VALUE) {
@@ -1244,17 +1473,21 @@ public class PlayerConnection implements PacketListenerPlayIn {
 
         this.A = this.e;
         this.player.setLocation(d0, d1, d2, f, f1);
-        this.player.playerConnection.sendPacket(new PacketPlayOutPosition(d0 - d3, d1 - d4, d2 - d5, f - f2, f1 - f3, set, this.teleportAwait));
+        this.player.playerConnection.sendPacket(
+            new PacketPlayOutPosition(d0 - d3, d1 - d4, d2 - d5, f - f2, f1 - f3, set,
+                this.teleportAwait));
     }
 
-    @Override
-    public void a(PacketPlayInBlockDig packetplayinblockdig) {
-        PlayerConnectionUtils.ensureMainThread(packetplayinblockdig, this, this.player.getWorldServer());
-        if (this.player.isFrozen()) return; // CraftBukkit
+    @Override public void a(PacketPlayInBlockDig packetplayinblockdig) {
+        PlayerConnectionUtils
+            .ensureMainThread(packetplayinblockdig, this, this.player.getWorldServer());
+        if (this.player.isFrozen())
+            return; // CraftBukkit
         BlockPosition blockposition = packetplayinblockdig.b();
 
         this.player.resetIdleTimer();
-        PacketPlayInBlockDig.EnumPlayerDigType packetplayinblockdig_enumplayerdigtype = packetplayinblockdig.d();
+        PacketPlayInBlockDig.EnumPlayerDigType packetplayinblockdig_enumplayerdigtype =
+            packetplayinblockdig.d();
 
         switch (packetplayinblockdig_enumplayerdigtype) {
             case SWAP_HELD_ITEMS:
@@ -1263,8 +1496,11 @@ public class PlayerConnection implements PacketListenerPlayIn {
 
                     // CraftBukkit start - inspiration taken from DispenserRegistry (See SpigotCraft#394)
                     CraftItemStack mainHand = CraftItemStack.asCraftMirror(itemstack);
-                    CraftItemStack offHand = CraftItemStack.asCraftMirror(this.player.b(EnumHand.MAIN_HAND));
-                    PlayerSwapHandItemsEvent swapItemsEvent = new PlayerSwapHandItemsEvent(getPlayer(), mainHand.clone(), offHand.clone());
+                    CraftItemStack offHand =
+                        CraftItemStack.asCraftMirror(this.player.b(EnumHand.MAIN_HAND));
+                    PlayerSwapHandItemsEvent swapItemsEvent =
+                        new PlayerSwapHandItemsEvent(getPlayer(), mainHand.clone(),
+                            offHand.clone());
                     this.server.getPluginManager().callEvent(swapItemsEvent);
                     if (swapItemsEvent.isCancelled()) {
                         return;
@@ -1272,12 +1508,14 @@ public class PlayerConnection implements PacketListenerPlayIn {
                     if (swapItemsEvent.getOffHandItem().equals(offHand)) {
                         this.player.a(EnumHand.OFF_HAND, this.player.b(EnumHand.MAIN_HAND));
                     } else {
-                        this.player.a(EnumHand.OFF_HAND, CraftItemStack.asNMSCopy(swapItemsEvent.getOffHandItem()));
+                        this.player.a(EnumHand.OFF_HAND,
+                            CraftItemStack.asNMSCopy(swapItemsEvent.getOffHandItem()));
                     }
                     if (swapItemsEvent.getMainHandItem().equals(mainHand)) {
                         this.player.a(EnumHand.MAIN_HAND, itemstack);
                     } else {
-                        this.player.a(EnumHand.MAIN_HAND, CraftItemStack.asNMSCopy(swapItemsEvent.getMainHandItem()));
+                        this.player.a(EnumHand.MAIN_HAND,
+                            CraftItemStack.asNMSCopy(swapItemsEvent.getMainHandItem()));
                     }
                     // CraftBukkit end
                 }
@@ -1294,7 +1532,8 @@ public class PlayerConnection implements PacketListenerPlayIn {
                         // Else we increment the drop count and check the amount.
                         this.dropCount++;
                         if (this.dropCount >= 20) {
-                            LOGGER.warn(this.player.getName() + " dropped their items too quickly!");
+                            LOGGER
+                                .warn(this.player.getName() + " dropped their items too quickly!");
                             this.disconnect("You dropped your items too quickly (Hacking?)");
                             return;
                         }
@@ -1317,11 +1556,14 @@ public class PlayerConnection implements PacketListenerPlayIn {
             case ABORT_DESTROY_BLOCK:
             case STOP_DESTROY_BLOCK:
                 // Paper start - Don't allow digging in unloaded chunks
-                if (this.player.world.getChunkIfLoadedImmediately(blockposition.getX() >> 4, blockposition.getZ() >> 4) == null) {
+                if (this.player.world.getChunkIfLoadedImmediately(blockposition.getX() >> 4,
+                    blockposition.getZ() >> 4) == null) {
                     return;
                 }
                 // Paper end - Don't allow digging in unloaded chunks
-                this.player.playerInteractManager.a(blockposition, packetplayinblockdig_enumplayerdigtype, packetplayinblockdig.c(), this.minecraftServer.getMaxBuildHeight());
+                this.player.playerInteractManager
+                    .a(blockposition, packetplayinblockdig_enumplayerdigtype,
+                        packetplayinblockdig.c(), this.minecraftServer.getMaxBuildHeight());
                 return;
             default:
                 throw new IllegalArgumentException("Invalid player action");
@@ -1331,10 +1573,12 @@ public class PlayerConnection implements PacketListenerPlayIn {
     // Spigot start - limit place/interactions
     private int limitedPackets;
     private long lastLimitedPacket = -1;
-    private static final int THRESHOLD = com.destroystokyo.paper.PaperConfig.packetInSpamThreshold; // Paper - Configurable threshold
+    private static final int THRESHOLD = com.destroystokyo.paper.PaperConfig.packetInSpamThreshold;
+    // Paper - Configurable threshold
 
     private boolean checkLimit(long timestamp) {
-        if (lastLimitedPacket != -1 && timestamp - lastLimitedPacket < THRESHOLD && limitedPackets++ >= 8) { // Paper - Use threshold, raise packet limit to 8
+        if (lastLimitedPacket != -1 && timestamp - lastLimitedPacket < THRESHOLD
+            && limitedPackets++ >= 8) { // Paper - Use threshold, raise packet limit to 8
             return false;
         }
 
@@ -1348,49 +1592,71 @@ public class PlayerConnection implements PacketListenerPlayIn {
     }
     // Spigot end
 
-    @Override
-    public void a(PacketPlayInUseItem packetplayinuseitem) {
-        PlayerConnectionUtils.ensureMainThread(packetplayinuseitem, this, this.player.getWorldServer());
-        if (this.player.isFrozen()) return; // CraftBukkit
-        if (!checkLimit(packetplayinuseitem.timestamp)) return; // Spigot - check limit
+    @Override public void a(PacketPlayInUseItem packetplayinuseitem) {
+        PlayerConnectionUtils
+            .ensureMainThread(packetplayinuseitem, this, this.player.getWorldServer());
+        if (this.player.isFrozen())
+            return; // CraftBukkit
+        if (!checkLimit(packetplayinuseitem.timestamp))
+            return; // Spigot - check limit
         WorldServer worldserver = this.minecraftServer.getWorldServer(this.player.dimension);
         EnumHand enumhand = packetplayinuseitem.b();
         ItemStack itemstack = this.player.b(enumhand);
         MovingObjectPositionBlock movingobjectpositionblock = packetplayinuseitem.c();
         BlockPosition blockposition = movingobjectpositionblock.getBlockPosition();
         EnumDirection enumdirection = movingobjectpositionblock.getDirection();
-        IBlockData clickedBlock = worldserver.getType(blockposition); // Spigot
+        IBlockData clickedBlock = worldserver.getType(blockposition, this.player); // Spigot
 
         this.player.resetIdleTimer();
-        if (blockposition.getY() >= this.minecraftServer.getMaxBuildHeight() - 1 && ((enumdirection == EnumDirection.UP && !(clickedBlock.getBlock() instanceof BlockStepAbstract && clickedBlock.get(BlockStepAbstract.a) == BlockPropertySlabType.BOTTOM)) || blockposition.getY() >= this.minecraftServer.getMaxBuildHeight())) { // Spigot
-            IChatBaseComponent ichatbasecomponent = (new ChatMessage("build.tooHigh", new Object[]{this.minecraftServer.getMaxBuildHeight()})).a(EnumChatFormat.RED);
-
-            this.player.playerConnection.sendPacket(new PacketPlayOutChat(ichatbasecomponent, ChatMessageType.GAME_INFO));
-        } else if (this.teleportPos == null && this.player.g((double) blockposition.getX() + 0.5D, (double) blockposition.getY() + 0.5D, (double) blockposition.getZ() + 0.5D) < 64.0D && worldserver.a((EntityHuman) this.player, blockposition)) {
+        if (blockposition.getY() >= this.minecraftServer.getMaxBuildHeight() - 1 && (
+            (enumdirection == EnumDirection.UP && !(
+                clickedBlock.getBlock() instanceof BlockStepAbstract
+                    && clickedBlock.get(BlockStepAbstract.a) == BlockPropertySlabType.BOTTOM))
+                || blockposition.getY() >= this.minecraftServer.getMaxBuildHeight())) { // Spigot
+            IChatBaseComponent ichatbasecomponent = (new ChatMessage("build.tooHigh",
+                new Object[] {this.minecraftServer.getMaxBuildHeight()})).a(EnumChatFormat.RED);
+
+            this.player.playerConnection
+                .sendPacket(new PacketPlayOutChat(ichatbasecomponent, ChatMessageType.GAME_INFO));
+        } else if (this.teleportPos == null && this.player
+            .g((double) blockposition.getX() + 0.5D, (double) blockposition.getY() + 0.5D,
+                (double) blockposition.getZ() + 0.5D) < 64.0D && worldserver
+            .a((EntityHuman) this.player, blockposition)) {
             // CraftBukkit start - Check if we can actually do something over this large a distance
             Location eyeLoc = this.getPlayer().getEyeLocation();
-            double reachDistance = NumberConversions.square(eyeLoc.getX() - blockposition.getX()) + NumberConversions.square(eyeLoc.getY() - blockposition.getY()) + NumberConversions.square(eyeLoc.getZ() - blockposition.getZ());
-            if (reachDistance > (this.getPlayer().getGameMode() == org.bukkit.GameMode.CREATIVE ? CREATIVE_PLACE_DISTANCE_SQUARED : SURVIVAL_PLACE_DISTANCE_SQUARED)) {
+            double reachDistance =
+                NumberConversions.square(eyeLoc.getX() - blockposition.getX()) + NumberConversions
+                    .square(eyeLoc.getY() - blockposition.getY()) + NumberConversions
+                    .square(eyeLoc.getZ() - blockposition.getZ());
+            if (reachDistance > (this.getPlayer().getGameMode() == org.bukkit.GameMode.CREATIVE ?
+                CREATIVE_PLACE_DISTANCE_SQUARED :
+                SURVIVAL_PLACE_DISTANCE_SQUARED)) {
                 return;
             }
             this.player.clearActiveItem(); // SPIGOT-4706
             // CraftBukkit end
-            EnumInteractionResult enuminteractionresult = this.player.playerInteractManager.a(this.player, worldserver, itemstack, enumhand, movingobjectpositionblock);
+            EnumInteractionResult enuminteractionresult = this.player.playerInteractManager
+                .a(this.player, worldserver, itemstack, enumhand, movingobjectpositionblock);
 
             if (enuminteractionresult.b()) {
                 this.player.a(enumhand, true);
             }
         }
 
-        this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(worldserver, blockposition));
-        this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(worldserver, blockposition.shift(enumdirection)));
+        this.player.playerConnection
+            .sendPacket(new PacketPlayOutBlockChange(this.player, worldserver, blockposition));
+        this.player.playerConnection.sendPacket(
+            new PacketPlayOutBlockChange(this.player, worldserver,
+                blockposition.shift(enumdirection)));
     }
 
-    @Override
-    public void a(PacketPlayInBlockPlace packetplayinblockplace) {
-        PlayerConnectionUtils.ensureMainThread(packetplayinblockplace, this, this.player.getWorldServer());
-        if (this.player.isFrozen()) return; // CraftBukkit
-        if (!checkLimit(packetplayinblockplace.timestamp)) return; // Spigot - check limit
+    @Override public void a(PacketPlayInBlockPlace packetplayinblockplace) {
+        PlayerConnectionUtils
+            .ensureMainThread(packetplayinblockplace, this, this.player.getWorldServer());
+        if (this.player.isFrozen())
+            return; // CraftBukkit
+        if (!checkLimit(packetplayinblockplace.timestamp))
+            return; // Spigot - check limit
         WorldServer worldserver = this.minecraftServer.getWorldServer(this.player.dimension);
         EnumHand enumhand = packetplayinblockplace.b();
         ItemStack itemstack = this.player.b(enumhand);
@@ -1412,21 +1678,31 @@ public class PlayerConnection implements PacketListenerPlayIn {
             float f6 = MathHelper.sin(-f1 * 0.017453292F);
             float f7 = f4 * f5;
             float f8 = f3 * f5;
-            double d3 = player.playerInteractManager.getGameMode()== EnumGamemode.CREATIVE ? 5.0D : 4.5D;
+            double d3 =
+                player.playerInteractManager.getGameMode() == EnumGamemode.CREATIVE ? 5.0D : 4.5D;
             Vec3D vec3d1 = vec3d.add((double) f7 * d3, (double) f6 * d3, (double) f8 * d3);
-            MovingObjectPosition movingobjectposition = this.player.world.rayTrace(new RayTrace(vec3d, vec3d1, RayTrace.BlockCollisionOption.OUTLINE, RayTrace.FluidCollisionOption.NONE, player));
+            MovingObjectPosition movingobjectposition = this.player.world.rayTrace(
+                new RayTrace(vec3d, vec3d1, RayTrace.BlockCollisionOption.OUTLINE,
+                    RayTrace.FluidCollisionOption.NONE, player));
 
             boolean cancelled;
-            if (movingobjectposition == null || movingobjectposition.getType() != MovingObjectPosition.EnumMovingObjectType.BLOCK) {
-                org.bukkit.event.player.PlayerInteractEvent event = CraftEventFactory.callPlayerInteractEvent(this.player, Action.RIGHT_CLICK_AIR, itemstack, enumhand);
+            if (movingobjectposition == null || movingobjectposition.getType()
+                != MovingObjectPosition.EnumMovingObjectType.BLOCK) {
+                org.bukkit.event.player.PlayerInteractEvent event = CraftEventFactory
+                    .callPlayerInteractEvent(this.player, Action.RIGHT_CLICK_AIR, itemstack,
+                        enumhand);
                 cancelled = event.useItemInHand() == Event.Result.DENY;
             } else {
                 if (player.playerInteractManager.firedInteract) {
                     player.playerInteractManager.firedInteract = false;
                     cancelled = player.playerInteractManager.interactResult;
                 } else {
-                    MovingObjectPositionBlock movingobjectpositionblock = (MovingObjectPositionBlock) movingobjectposition;
-                    org.bukkit.event.player.PlayerInteractEvent event = CraftEventFactory.callPlayerInteractEvent(player, Action.RIGHT_CLICK_BLOCK, movingobjectpositionblock.getBlockPosition(), movingobjectpositionblock.getDirection(), itemstack, true, enumhand);
+                    MovingObjectPositionBlock movingobjectpositionblock =
+                        (MovingObjectPositionBlock) movingobjectposition;
+                    org.bukkit.event.player.PlayerInteractEvent event = CraftEventFactory
+                        .callPlayerInteractEvent(player, Action.RIGHT_CLICK_BLOCK,
+                            movingobjectpositionblock.getBlockPosition(),
+                            movingobjectpositionblock.getDirection(), itemstack, true, enumhand);
                     cancelled = event.useItemInHand() == Event.Result.DENY;
                 }
             }
@@ -1436,7 +1712,8 @@ public class PlayerConnection implements PacketListenerPlayIn {
             } else {
                 // Paper start
                 itemstack = this.player.getItemInHand(enumhand);
-                if (itemstack.isEmpty()) return;
+                if (itemstack.isEmpty())
+                    return;
                 // Paper end
                 this.player.playerInteractManager.a(this.player, worldserver, itemstack, enumhand);
             }
@@ -1444,9 +1721,9 @@ public class PlayerConnection implements PacketListenerPlayIn {
         }
     }
 
-    @Override
-    public void a(PacketPlayInSpectate packetplayinspectate) {
-        PlayerConnectionUtils.ensureMainThread(packetplayinspectate, this, this.player.getWorldServer());
+    @Override public void a(PacketPlayInSpectate packetplayinspectate) {
+        PlayerConnectionUtils
+            .ensureMainThread(packetplayinspectate, this, this.player.getWorldServer());
         if (this.player.isSpectator()) {
             Iterator iterator = this.minecraftServer.getWorlds().iterator();
 
@@ -1455,7 +1732,10 @@ public class PlayerConnection implements PacketListenerPlayIn {
                 Entity entity = packetplayinspectate.a(worldserver);
 
                 if (entity != null) {
-                    this.player.a(worldserver, entity.locX(), entity.locY(), entity.locZ(), entity.yaw, entity.pitch, org.bukkit.event.player.PlayerTeleportEvent.TeleportCause.SPECTATE); // CraftBukkit
+                    this.player
+                        .a(worldserver, entity.locX(), entity.locY(), entity.locZ(), entity.yaw,
+                            entity.pitch,
+                            org.bukkit.event.player.PlayerTeleportEvent.TeleportCause.SPECTATE); // CraftBukkit
                     return;
                 }
             }
@@ -1466,18 +1746,22 @@ public class PlayerConnection implements PacketListenerPlayIn {
     @Override
     // CraftBukkit start
     public void a(PacketPlayInResourcePackStatus packetplayinresourcepackstatus) {
-        PlayerConnectionUtils.ensureMainThread(packetplayinresourcepackstatus, this, this.player.getWorldServer());
+        PlayerConnectionUtils
+            .ensureMainThread(packetplayinresourcepackstatus, this, this.player.getWorldServer());
         // Paper start
-        PlayerResourcePackStatusEvent.Status packStatus = PlayerResourcePackStatusEvent.Status.values()[packetplayinresourcepackstatus.status.ordinal()];
+        PlayerResourcePackStatusEvent.Status packStatus =
+            PlayerResourcePackStatusEvent.Status.values()[packetplayinresourcepackstatus.status
+                .ordinal()];
         player.getBukkitEntity().setResourcePackStatus(packStatus);
-        this.server.getPluginManager().callEvent(new PlayerResourcePackStatusEvent(getPlayer(), packStatus));
+        this.server.getPluginManager()
+            .callEvent(new PlayerResourcePackStatusEvent(getPlayer(), packStatus));
         // Paper end
     }
     // CraftBukkit end
 
-    @Override
-    public void a(PacketPlayInBoatMove packetplayinboatmove) {
-        PlayerConnectionUtils.ensureMainThread(packetplayinboatmove, this, this.player.getWorldServer());
+    @Override public void a(PacketPlayInBoatMove packetplayinboatmove) {
+        PlayerConnectionUtils
+            .ensureMainThread(packetplayinboatmove, this, this.player.getWorldServer());
         Entity entity = this.player.getVehicle();
 
         if (entity instanceof EntityBoat) {
@@ -1486,8 +1770,7 @@ public class PlayerConnection implements PacketListenerPlayIn {
 
     }
 
-    @Override
-    public void a(IChatBaseComponent ichatbasecomponent) {
+    @Override public void a(IChatBaseComponent ichatbasecomponent) {
         // CraftBukkit start - Rarely it would send a disconnect line twice
         if (this.processedDisconnect) {
             return;
@@ -1495,7 +1778,9 @@ public class PlayerConnection implements PacketListenerPlayIn {
             this.processedDisconnect = true;
         }
         // CraftBukkit end
-        PlayerConnection.LOGGER.info("{} lost connection: {}", this.player.getDisplayName().getString(), ichatbasecomponent.getString());
+        PlayerConnection.LOGGER
+            .info("{} lost connection: {}", this.player.getDisplayName().getString(),
+                ichatbasecomponent.getString());
         // CraftBukkit start - Replace vanilla quit message handling with our own.
         /*
         this.minecraftServer.invalidatePingSample();
@@ -1505,7 +1790,8 @@ public class PlayerConnection implements PacketListenerPlayIn {
         this.player.n();
         String quitMessage = this.minecraftServer.getPlayerList().disconnect(this.player);
         if ((quitMessage != null) && (quitMessage.length() > 0)) {
-            this.minecraftServer.getPlayerList().sendMessage(CraftChatMessage.fromString(quitMessage));
+            this.minecraftServer.getPlayerList()
+                .sendMessage(CraftChatMessage.fromString(quitMessage));
         }
         // CraftBukkit end
         if (this.isExemptPlayer()) {
@@ -1515,16 +1801,28 @@ public class PlayerConnection implements PacketListenerPlayIn {
 
     }
 
+    // Servett Start
+    public void sendPacket(PlayerConnection connection, Packet<?> packet) {
+        this.a(connection, packet, (GenericFutureListener) null);
+    }
+    // Servett End
+
     public void sendPacket(Packet<?> packet) {
-        this.a(packet, (GenericFutureListener) null);
+        this.a(null, packet, (GenericFutureListener) null);
     }
 
-    public void a(Packet<?> packet, @Nullable GenericFutureListener<? extends Future<? super Void>> genericfuturelistener) {
+    // Servett Start
+    private static Field packetPlayOutBlockBreakPositionFieldCache;
+    // Servett End
+
+    public void a(PlayerConnection connection, Packet<?> packet,
+        @Nullable GenericFutureListener<? extends Future<? super Void>> genericfuturelistener) {
         if (packet instanceof PacketPlayOutChat) {
             PacketPlayOutChat packetplayoutchat = (PacketPlayOutChat) packet;
             EnumChatVisibility enumchatvisibility = this.player.getChatFlags();
 
-            if (enumchatvisibility == EnumChatVisibility.HIDDEN && packetplayoutchat.d() != ChatMessageType.GAME_INFO) {
+            if (enumchatvisibility == EnumChatVisibility.HIDDEN
+                && packetplayoutchat.d() != ChatMessageType.GAME_INFO) {
                 return;
             }
 
@@ -1533,12 +1831,42 @@ public class PlayerConnection implements PacketListenerPlayIn {
             }
         }
 
+        // Servett Start
+        if (packet instanceof PacketPlayOutBlockBreak) {
+            PacketPlayOutBlockBreak packetPlayOutBlockBreak = (PacketPlayOutBlockBreak) packet;
+
+            if (packetPlayOutBlockBreakPositionFieldCache == null) {
+                try {
+                    packetPlayOutBlockBreakPositionFieldCache = PacketPlayOutBlockBreak.class
+                        .getDeclaredField("c");
+                    packetPlayOutBlockBreakPositionFieldCache.setAccessible(true);
+                } catch (final NoSuchFieldException ex) {
+                    ex.printStackTrace();
+                }
+            }
+
+            try {
+                Chunk.PlayerBlockModification playerBlockModification = player.modifiedBlocks.get(((BlockPosition) packetPlayOutBlockBreakPositionFieldCache
+                    .get(packetPlayOutBlockBreak)).asLong());
+                if (playerBlockModification != null &&
+                    playerBlockModification.getModifiedBlock().getMaterial() != Material.AIR) {
+                    return;
+                }
+            } catch (final IllegalAccessException ex) {
+                ex.printStackTrace();
+            }
+        }
+        packet.process(connection == null ? this : connection);
+        // Servett End
+
         // CraftBukkit start
         if (packet == null || this.processedDisconnect) { // Spigot
             return;
         } else if (packet instanceof PacketPlayOutSpawnPosition) {
             PacketPlayOutSpawnPosition packet6 = (PacketPlayOutSpawnPosition) packet;
-            this.player.compassTarget = new Location(this.getPlayer().getWorld(), packet6.position.getX(), packet6.position.getY(), packet6.position.getZ());
+            this.player.compassTarget =
+                new Location(this.getPlayer().getWorld(), packet6.position.getX(),
+                    packet6.position.getY(), packet6.position.getZ());
         }
         // CraftBukkit end
 
@@ -1555,15 +1883,27 @@ public class PlayerConnection implements PacketListenerPlayIn {
         }
     }
 
-    @Override
-    public void a(PacketPlayInHeldItemSlot packetplayinhelditemslot) {
-        PlayerConnectionUtils.ensureMainThread(packetplayinhelditemslot, this, this.player.getWorldServer());
-        if (this.player.isFrozen()) return; // CraftBukkit
-        if (packetplayinhelditemslot.b() >= 0 && packetplayinhelditemslot.b() < PlayerInventory.getHotbarSize()) {
-            PlayerItemHeldEvent event = new PlayerItemHeldEvent(this.getPlayer(), this.player.inventory.itemInHandIndex, packetplayinhelditemslot.b());
+    // Servett Start
+    public void a(Packet<?> packet,
+        @Nullable GenericFutureListener<? extends Future<? super Void>> genericfuturelistener) {
+        a(this, packet, genericfuturelistener);
+    }
+    // Servett End
+
+    @Override public void a(PacketPlayInHeldItemSlot packetplayinhelditemslot) {
+        PlayerConnectionUtils
+            .ensureMainThread(packetplayinhelditemslot, this, this.player.getWorldServer());
+        if (this.player.isFrozen())
+            return; // CraftBukkit
+        if (packetplayinhelditemslot.b() >= 0 && packetplayinhelditemslot.b() < PlayerInventory
+            .getHotbarSize()) {
+            PlayerItemHeldEvent event =
+                new PlayerItemHeldEvent(this.getPlayer(), this.player.inventory.itemInHandIndex,
+                    packetplayinhelditemslot.b());
             this.server.getPluginManager().callEvent(event);
             if (event.isCancelled()) {
-                this.sendPacket(new PacketPlayOutHeldItemSlot(this.player.inventory.itemInHandIndex));
+                this.sendPacket(
+                    new PacketPlayOutHeldItemSlot(this.player.inventory.itemInHandIndex));
                 this.player.resetIdleTimer();
                 return;
             }
@@ -1571,13 +1911,13 @@ public class PlayerConnection implements PacketListenerPlayIn {
             this.player.inventory.itemInHandIndex = packetplayinhelditemslot.b();
             this.player.resetIdleTimer();
         } else {
-            PlayerConnection.LOGGER.warn("{} tried to set an invalid carried item", this.player.getDisplayName().getString());
+            PlayerConnection.LOGGER.warn("{} tried to set an invalid carried item",
+                this.player.getDisplayName().getString());
             this.disconnect("Invalid hotbar selection (Hacking?)"); // CraftBukkit
         }
     }
 
-    @Override
-    public void a(PacketPlayInChat packetplayinchat) {
+    @Override public void a(PacketPlayInChat packetplayinchat) {
         // CraftBukkit start - async chat
         // SPIGOT-3638
         if (this.minecraftServer.isStopped()) {
@@ -1586,11 +1926,14 @@ public class PlayerConnection implements PacketListenerPlayIn {
 
         boolean isSync = packetplayinchat.b().startsWith("/");
         if (packetplayinchat.b().startsWith("/")) {
-            PlayerConnectionUtils.ensureMainThread(packetplayinchat, this, this.player.getWorldServer());
+            PlayerConnectionUtils
+                .ensureMainThread(packetplayinchat, this, this.player.getWorldServer());
         }
         // CraftBukkit end
-        if (this.player.dead || this.player.getChatFlags() == EnumChatVisibility.HIDDEN) { // CraftBukkit - dead men tell no tales
-            this.sendPacket(new PacketPlayOutChat((new ChatMessage("chat.cannotSend", new Object[0])).a(EnumChatFormat.RED)));
+        if (this.player.dead || this.player.getChatFlags()
+            == EnumChatVisibility.HIDDEN) { // CraftBukkit - dead men tell no tales
+            this.sendPacket(new PacketPlayOutChat(
+                (new ChatMessage("chat.cannotSend", new Object[0])).a(EnumChatFormat.RED)));
         } else {
             this.player.resetIdleTimer();
             String s = packetplayinchat.b();
@@ -1602,9 +1945,10 @@ public class PlayerConnection implements PacketListenerPlayIn {
                     // CraftBukkit start - threadsafety
                     if (!isSync) {
                         Waitable waitable = new Waitable() {
-                            @Override
-                            protected Object evaluate() {
-                                PlayerConnection.this.disconnect(new ChatMessage("multiplayer.disconnect.illegal_characters", new Object[0]));
+                            @Override protected Object evaluate() {
+                                PlayerConnection.this.disconnect(
+                                    new ChatMessage("multiplayer.disconnect.illegal_characters",
+                                        new Object[0]));
                                 return null;
                             }
                         };
@@ -1619,7 +1963,8 @@ public class PlayerConnection implements PacketListenerPlayIn {
                             throw new RuntimeException(e);
                         }
                     } else {
-                        this.disconnect(new ChatMessage("multiplayer.disconnect.illegal_characters", new Object[0]));
+                        this.disconnect(new ChatMessage("multiplayer.disconnect.illegal_characters",
+                            new Object[0]));
                     }
                     // CraftBukkit end
                     return;
@@ -1639,12 +1984,12 @@ public class PlayerConnection implements PacketListenerPlayIn {
             } else if (getPlayer().isConversing()) {
                 final String conversationInput = s;
                 this.minecraftServer.processQueue.add(new Runnable() {
-                    @Override
-                    public void run() {
+                    @Override public void run() {
                         getPlayer().acceptConversationInput(conversationInput);
                     }
                 });
-            } else if (this.player.getChatFlags() == EnumChatVisibility.SYSTEM) { // Re-add "Command Only" flag check
+            } else if (this.player.getChatFlags()
+                == EnumChatVisibility.SYSTEM) { // Re-add "Command Only" flag check
                 ChatMessage chatmessage = new ChatMessage("chat.cannotSend", new Object[0]);
 
                 chatmessage.getChatModifier().setColor(EnumChatFormat.RED);
@@ -1653,17 +1998,16 @@ public class PlayerConnection implements PacketListenerPlayIn {
                 this.chat(s, true);
                 // CraftBukkit end - the below is for reference. :)
             } else {
-                ChatMessage chatmessage = new ChatMessage("chat.type.text", new Object[]{this.player.getScoreboardDisplayName(), s});
+                ChatMessage chatmessage = new ChatMessage("chat.type.text",
+                    new Object[] {this.player.getScoreboardDisplayName(), s});
 
                 this.minecraftServer.getPlayerList().sendMessage(chatmessage, false);
             }
 
             // Spigot start - spam exclusions
             boolean counted = true;
-            for ( String exclude : org.spigotmc.SpigotConfig.spamExclusions )
-            {
-                if ( exclude != null && s.startsWith( exclude ) )
-                {
+            for (String exclude : org.spigotmc.SpigotConfig.spamExclusions) {
+                if (exclude != null && s.startsWith(exclude)) {
                     counted = false;
                     break;
                 }
@@ -1671,12 +2015,13 @@ public class PlayerConnection implements PacketListenerPlayIn {
             // Spigot end
             // CraftBukkit start - replaced with thread safe throttle
             // this.chatThrottle += 20;
-            if (counted && chatSpamField.addAndGet(this, 20) > 200 && !this.minecraftServer.getPlayerList().isOp(this.player.getProfile())) { // Spigot
+            if (counted && chatSpamField.addAndGet(this, 20) > 200 && !this.minecraftServer
+                .getPlayerList().isOp(this.player.getProfile())) { // Spigot
                 if (!isSync) {
                     Waitable waitable = new Waitable() {
-                        @Override
-                        protected Object evaluate() {
-                            PlayerConnection.this.disconnect(new ChatMessage("disconnect.spam", new Object[0]));
+                        @Override protected Object evaluate() {
+                            PlayerConnection.this
+                                .disconnect(new ChatMessage("disconnect.spam", new Object[0]));
                             return null;
                         }
                     };
@@ -1709,11 +2054,13 @@ public class PlayerConnection implements PacketListenerPlayIn {
             // Paper Start
             if (!org.spigotmc.AsyncCatcher.shuttingDown && !org.bukkit.Bukkit.isPrimaryThread()) {
                 final String fCommandLine = s;
-                MinecraftServer.LOGGER.log(org.apache.logging.log4j.Level.ERROR, "Command Dispatched Async: " + fCommandLine);
-                MinecraftServer.LOGGER.log(org.apache.logging.log4j.Level.ERROR, "Please notify author of plugin causing this execution to fix this bug! see: http://bit.ly/1oSiM6C", new Throwable());
+                MinecraftServer.LOGGER.log(org.apache.logging.log4j.Level.ERROR,
+                    "Command Dispatched Async: " + fCommandLine);
+                MinecraftServer.LOGGER.log(org.apache.logging.log4j.Level.ERROR,
+                    "Please notify author of plugin causing this execution to fix this bug! see: http://bit.ly/1oSiM6C",
+                    new Throwable());
                 Waitable wait = new Waitable() {
-                    @Override
-                    protected Object evaluate() {
+                    @Override protected Object evaluate() {
                         chat(fCommandLine, false);
                         return null;
                     }
@@ -1723,7 +2070,8 @@ public class PlayerConnection implements PacketListenerPlayIn {
                     wait.get();
                     return;
                 } catch (InterruptedException e) {
-                    Thread.currentThread().interrupt(); // This is proper habit for java. If we aren't handling it, pass it on!
+                    Thread.currentThread()
+                        .interrupt(); // This is proper habit for java. If we aren't handling it, pass it on!
                 } catch (Exception e) {
                     throw new RuntimeException("Exception processing chat command", e.getCause());
                 }
@@ -1734,27 +2082,33 @@ public class PlayerConnection implements PacketListenerPlayIn {
             // Do nothing, this is coming from a plugin
         } else {
             Player player = this.getPlayer();
-            AsyncPlayerChatEvent event = new AsyncPlayerChatEvent(async, player, s, new LazyPlayerSet(minecraftServer));
+            AsyncPlayerChatEvent event =
+                new AsyncPlayerChatEvent(async, player, s, new LazyPlayerSet(minecraftServer));
             this.server.getPluginManager().callEvent(event);
 
             if (PlayerChatEvent.getHandlerList().getRegisteredListeners().length != 0) {
                 // Evil plugins still listening to deprecated event
-                final PlayerChatEvent queueEvent = new PlayerChatEvent(player, event.getMessage(), event.getFormat(), event.getRecipients());
+                final PlayerChatEvent queueEvent =
+                    new PlayerChatEvent(player, event.getMessage(), event.getFormat(),
+                        event.getRecipients());
                 queueEvent.setCancelled(event.isCancelled());
                 Waitable waitable = new Waitable() {
-                    @Override
-                    protected Object evaluate() {
+                    @Override protected Object evaluate() {
                         org.bukkit.Bukkit.getPluginManager().callEvent(queueEvent);
 
                         if (queueEvent.isCancelled()) {
                             return null;
                         }
 
-                        String message = String.format(queueEvent.getFormat(), queueEvent.getPlayer().getDisplayName(), queueEvent.getMessage());
+                        String message = String
+                            .format(queueEvent.getFormat(), queueEvent.getPlayer().getDisplayName(),
+                                queueEvent.getMessage());
                         PlayerConnection.this.minecraftServer.console.sendMessage(message);
                         if (((LazyPlayerSet) queueEvent.getRecipients()).isLazy()) {
-                            for (Object player : PlayerConnection.this.minecraftServer.getPlayerList().players) {
-                                ((EntityPlayer) player).sendMessage(CraftChatMessage.fromString(message));
+                            for (Object player : PlayerConnection.this.minecraftServer
+                                .getPlayerList().players) {
+                                ((EntityPlayer) player)
+                                    .sendMessage(CraftChatMessage.fromString(message));
                             }
                         } else {
                             for (Player player : queueEvent.getRecipients()) {
@@ -1762,7 +2116,8 @@ public class PlayerConnection implements PacketListenerPlayIn {
                             }
                         }
                         return null;
-                    }};
+                    }
+                };
                 if (async) {
                     minecraftServer.processQueue.add(waitable);
                 } else {
@@ -1771,7 +2126,8 @@ public class PlayerConnection implements PacketListenerPlayIn {
                 try {
                     waitable.get();
                 } catch (InterruptedException e) {
-                    Thread.currentThread().interrupt(); // This is proper habit for java. If we aren't handling it, pass it on!
+                    Thread.currentThread()
+                        .interrupt(); // This is proper habit for java. If we aren't handling it, pass it on!
                 } catch (ExecutionException e) {
                     throw new RuntimeException("Exception processing chat event", e.getCause());
                 }
@@ -1783,9 +2139,12 @@ public class PlayerConnection implements PacketListenerPlayIn {
                 // Paper Start - (Meh) Support for vanilla world scoreboard name coloring
                 String displayName = event.getPlayer().getDisplayName();
                 if (this.player.getWorld().paperConfig.useVanillaScoreboardColoring) {
-                    IChatBaseComponent nameFromTeam = ScoreboardTeam.a(this.player.getScoreboardTeam(), ((CraftPlayer) player).getHandle().getDisplayName());
+                    IChatBaseComponent nameFromTeam = ScoreboardTeam
+                        .a(this.player.getScoreboardTeam(),
+                            ((CraftPlayer) player).getHandle().getDisplayName());
                     // Explicitly add a RESET here, vanilla uses components for this now...
-                    displayName = CraftChatMessage.fromComponent(nameFromTeam, EnumChatFormat.WHITE) + org.bukkit.ChatColor.RESET;
+                    displayName = CraftChatMessage.fromComponent(nameFromTeam, EnumChatFormat.WHITE)
+                        + org.bukkit.ChatColor.RESET;
                 }
 
                 s = String.format(event.getFormat(), displayName, event.getMessage());
@@ -1808,12 +2167,13 @@ public class PlayerConnection implements PacketListenerPlayIn {
     private void handleCommand(String s) {
         MinecraftTimings.playerCommandTimer.startTiming(); // Paper
         // CraftBukkit start - whole method
-        if ( org.spigotmc.SpigotConfig.logCommands ) // Spigot
-        this.LOGGER.info(this.player.getName() + " issued server command: " + s);
+        if (org.spigotmc.SpigotConfig.logCommands) // Spigot
+            this.LOGGER.info(this.player.getName() + " issued server command: " + s);
 
         CraftPlayer player = this.getPlayer();
 
-        PlayerCommandPreprocessEvent event = new PlayerCommandPreprocessEvent(player, s, new LazyPlayerSet(minecraftServer));
+        PlayerCommandPreprocessEvent event =
+            new PlayerCommandPreprocessEvent(player, s, new LazyPlayerSet(minecraftServer));
         this.server.getPluginManager().callEvent(event);
 
         if (event.isCancelled()) {
@@ -1826,8 +2186,10 @@ public class PlayerConnection implements PacketListenerPlayIn {
                 return;
             }
         } catch (org.bukkit.command.CommandException ex) {
-            player.sendMessage(org.bukkit.ChatColor.RED + "An internal error occurred while attempting to perform this command");
-            java.util.logging.Logger.getLogger(PlayerConnection.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
+            player.sendMessage(org.bukkit.ChatColor.RED
+                + "An internal error occurred while attempting to perform this command");
+            java.util.logging.Logger.getLogger(PlayerConnection.class.getName())
+                .log(java.util.logging.Level.SEVERE, null, ex);
             return;
         } finally {
             MinecraftTimings.playerCommandTimer.stopTiming(); // Paper
@@ -1836,10 +2198,11 @@ public class PlayerConnection implements PacketListenerPlayIn {
         // CraftBukkit end
     }
 
-    @Override
-    public void a(PacketPlayInArmAnimation packetplayinarmanimation) {
-        PlayerConnectionUtils.ensureMainThread(packetplayinarmanimation, this, this.player.getWorldServer());
-        if (this.player.isFrozen()) return; // CraftBukkit
+    @Override public void a(PacketPlayInArmAnimation packetplayinarmanimation) {
+        PlayerConnectionUtils
+            .ensureMainThread(packetplayinarmanimation, this, this.player.getWorldServer());
+        if (this.player.isFrozen())
+            return; // CraftBukkit
         this.player.resetIdleTimer();
         // CraftBukkit start - Raytrace to look for 'rogue armswings'
         float f1 = this.player.pitch;
@@ -1855,32 +2218,41 @@ public class PlayerConnection implements PacketListenerPlayIn {
         float f6 = MathHelper.sin(-f1 * 0.017453292F);
         float f7 = f4 * f5;
         float f8 = f3 * f5;
-        double d3 = player.playerInteractManager.getGameMode()== EnumGamemode.CREATIVE ? 5.0D : 4.5D;
+        double d3 =
+            player.playerInteractManager.getGameMode() == EnumGamemode.CREATIVE ? 5.0D : 4.5D;
         Vec3D vec3d1 = vec3d.add((double) f7 * d3, (double) f6 * d3, (double) f8 * d3);
-        MovingObjectPosition movingobjectposition = this.player.world.rayTrace(new RayTrace(vec3d, vec3d1, RayTrace.BlockCollisionOption.OUTLINE, RayTrace.FluidCollisionOption.NONE, player));
+        MovingObjectPosition movingobjectposition = this.player.world.rayTrace(
+            new RayTrace(vec3d, vec3d1, RayTrace.BlockCollisionOption.OUTLINE,
+                RayTrace.FluidCollisionOption.NONE, player));
 
-        if (movingobjectposition == null || movingobjectposition.getType() != MovingObjectPosition.EnumMovingObjectType.BLOCK) {
-            CraftEventFactory.callPlayerInteractEvent(this.player, Action.LEFT_CLICK_AIR, this.player.inventory.getItemInHand(), EnumHand.MAIN_HAND);
+        if (movingobjectposition == null
+            || movingobjectposition.getType() != MovingObjectPosition.EnumMovingObjectType.BLOCK) {
+            CraftEventFactory.callPlayerInteractEvent(this.player, Action.LEFT_CLICK_AIR,
+                this.player.inventory.getItemInHand(), EnumHand.MAIN_HAND);
         }
 
         // Arm swing animation
         PlayerAnimationEvent event = new PlayerAnimationEvent(this.getPlayer());
         this.server.getPluginManager().callEvent(event);
 
-        if (event.isCancelled()) return;
+        if (event.isCancelled())
+            return;
         // CraftBukkit end
         this.player.a(packetplayinarmanimation.b());
     }
 
-    @Override
-    public void a(PacketPlayInEntityAction packetplayinentityaction) {
-        PlayerConnectionUtils.ensureMainThread(packetplayinentityaction, this, this.player.getWorldServer());
+    @Override public void a(PacketPlayInEntityAction packetplayinentityaction) {
+        PlayerConnectionUtils
+            .ensureMainThread(packetplayinentityaction, this, this.player.getWorldServer());
         // CraftBukkit start
-        if (this.player.dead) return;
+        if (this.player.dead)
+            return;
         switch (packetplayinentityaction.c()) {
             case PRESS_SHIFT_KEY:
             case RELEASE_SHIFT_KEY:
-                PlayerToggleSneakEvent event = new PlayerToggleSneakEvent(this.getPlayer(), packetplayinentityaction.c() == PacketPlayInEntityAction.EnumPlayerAction.PRESS_SHIFT_KEY);
+                PlayerToggleSneakEvent event = new PlayerToggleSneakEvent(this.getPlayer(),
+                    packetplayinentityaction.c()
+                        == PacketPlayInEntityAction.EnumPlayerAction.PRESS_SHIFT_KEY);
                 this.server.getPluginManager().callEvent(event);
 
                 if (event.isCancelled()) {
@@ -1889,7 +2261,9 @@ public class PlayerConnection implements PacketListenerPlayIn {
                 break;
             case START_SPRINTING:
             case STOP_SPRINTING:
-                PlayerToggleSprintEvent e2 = new PlayerToggleSprintEvent(this.getPlayer(), packetplayinentityaction.c() == PacketPlayInEntityAction.EnumPlayerAction.START_SPRINTING);
+                PlayerToggleSprintEvent e2 = new PlayerToggleSprintEvent(this.getPlayer(),
+                    packetplayinentityaction.c()
+                        == PacketPlayInEntityAction.EnumPlayerAction.START_SPRINTING);
                 this.server.getPluginManager().callEvent(e2);
 
                 if (e2.isCancelled()) {
@@ -1905,11 +2279,11 @@ public class PlayerConnection implements PacketListenerPlayIn {
             case PRESS_SHIFT_KEY:
                 this.player.setSneaking(true);
 
-            // Paper start - Hang on!
-            if (this.player.world.paperConfig.parrotsHangOnBetter) {
-                this.player.releaseShoulderEntities();
-            }
-            // Paper end
+                // Paper start - Hang on!
+                if (this.player.world.paperConfig.parrotsHangOnBetter) {
+                    this.player.releaseShoulderEntities();
+                }
+                // Paper end
 
                 break;
             case RELEASE_SHIFT_KEY:
@@ -1959,16 +2333,16 @@ public class PlayerConnection implements PacketListenerPlayIn {
 
     }
 
-    @Override
-    public void a(PacketPlayInUseEntity packetplayinuseentity) {
-        PlayerConnectionUtils.ensureMainThread(packetplayinuseentity, this, this.player.getWorldServer());
-        if (this.player.isFrozen()) return; // CraftBukkit
+    @Override public void a(PacketPlayInUseEntity packetplayinuseentity) {
+        PlayerConnectionUtils
+            .ensureMainThread(packetplayinuseentity, this, this.player.getWorldServer());
+        if (this.player.isFrozen())
+            return; // CraftBukkit
         WorldServer worldserver = this.minecraftServer.getWorldServer(this.player.dimension);
         Entity entity = packetplayinuseentity.a((World) worldserver);
         // Spigot Start
-        if ( entity == player && !player.isSpectator() )
-        {
-            disconnect( "Cannot interact with self!" );
+        if (entity == player && !player.isSpectator()) {
+            disconnect("Cannot interact with self!");
             return;
         }
         // Spigot End
@@ -1985,46 +2359,74 @@ public class PlayerConnection implements PacketListenerPlayIn {
             if (this.player.h(entity) < d0) {
                 EnumHand enumhand;
 
-                ItemStack itemInHand = this.player.b(packetplayinuseentity.c() == null ? EnumHand.MAIN_HAND : packetplayinuseentity.c()); // CraftBukkit
+                ItemStack itemInHand = this.player.b(packetplayinuseentity.c() == null ?
+                    EnumHand.MAIN_HAND :
+                    packetplayinuseentity.c()); // CraftBukkit
 
                 if (packetplayinuseentity.b() == PacketPlayInUseEntity.EnumEntityUseAction.INTERACT
-                        || packetplayinuseentity.b() == PacketPlayInUseEntity.EnumEntityUseAction.INTERACT_AT) {
+                    || packetplayinuseentity.b()
+                    == PacketPlayInUseEntity.EnumEntityUseAction.INTERACT_AT) {
                     // CraftBukkit start
-                    boolean triggerLeashUpdate = itemInHand != null && itemInHand.getItem() == Items.LEAD && entity instanceof EntityInsentient;
-                    Item origItem = this.player.inventory.getItemInHand() == null ? null : this.player.inventory.getItemInHand().getItem();
+                    boolean triggerLeashUpdate =
+                        itemInHand != null && itemInHand.getItem() == Items.LEAD
+                            && entity instanceof EntityInsentient;
+                    Item origItem = this.player.inventory.getItemInHand() == null ?
+                        null :
+                        this.player.inventory.getItemInHand().getItem();
                     PlayerInteractEntityEvent event;
-                    if (packetplayinuseentity.b() == PacketPlayInUseEntity.EnumEntityUseAction.INTERACT) {
-                        event = new PlayerInteractEntityEvent((Player) this.getPlayer(), entity.getBukkitEntity(), (packetplayinuseentity.c() == EnumHand.OFF_HAND) ? EquipmentSlot.OFF_HAND : EquipmentSlot.HAND);
+                    if (packetplayinuseentity.b()
+                        == PacketPlayInUseEntity.EnumEntityUseAction.INTERACT) {
+                        event = new PlayerInteractEntityEvent((Player) this.getPlayer(),
+                            entity.getBukkitEntity(),
+                            (packetplayinuseentity.c() == EnumHand.OFF_HAND) ?
+                                EquipmentSlot.OFF_HAND :
+                                EquipmentSlot.HAND);
                     } else {
                         Vec3D target = packetplayinuseentity.d();
-                        event = new PlayerInteractAtEntityEvent((Player) this.getPlayer(), entity.getBukkitEntity(), new org.bukkit.util.Vector(target.x, target.y, target.z), (packetplayinuseentity.c() == EnumHand.OFF_HAND) ? EquipmentSlot.OFF_HAND : EquipmentSlot.HAND);
+                        event = new PlayerInteractAtEntityEvent((Player) this.getPlayer(),
+                            entity.getBukkitEntity(),
+                            new org.bukkit.util.Vector(target.x, target.y, target.z),
+                            (packetplayinuseentity.c() == EnumHand.OFF_HAND) ?
+                                EquipmentSlot.OFF_HAND :
+                                EquipmentSlot.HAND);
                     }
                     this.server.getPluginManager().callEvent(event);
 
                     // Fish bucket - SPIGOT-4048
-                    if ((entity instanceof EntityFish && origItem != null && origItem.getItem() == Items.WATER_BUCKET) && (event.isCancelled() || this.player.inventory.getItemInHand() == null || this.player.inventory.getItemInHand().getItem() != origItem)) {
+                    if ((entity instanceof EntityFish && origItem != null
+                        && origItem.getItem() == Items.WATER_BUCKET) && (event.isCancelled()
+                        || this.player.inventory.getItemInHand() == null
+                        || this.player.inventory.getItemInHand().getItem() != origItem)) {
                         this.sendPacket(new PacketPlayOutSpawnEntityLiving((EntityFish) entity));
                         this.player.updateInventory(this.player.activeContainer);
                     }
 
-                    if (triggerLeashUpdate && (event.isCancelled() || this.player.inventory.getItemInHand() == null || this.player.inventory.getItemInHand().getItem() != origItem)) {
+                    if (triggerLeashUpdate && (event.isCancelled()
+                        || this.player.inventory.getItemInHand() == null
+                        || this.player.inventory.getItemInHand().getItem() != origItem)) {
                         // Refresh the current leash state
-                        this.sendPacket(new PacketPlayOutAttachEntity(entity, ((EntityInsentient) entity).getLeashHolder()));
+                        this.sendPacket(new PacketPlayOutAttachEntity(entity,
+                            ((EntityInsentient) entity).getLeashHolder()));
                     }
 
-                    if (event.isCancelled() || this.player.inventory.getItemInHand() == null || this.player.inventory.getItemInHand().getItem() != origItem) {
+                    if (event.isCancelled() || this.player.inventory.getItemInHand() == null
+                        || this.player.inventory.getItemInHand().getItem() != origItem) {
                         // Refresh the current entity metadata
-                        entity.tracker.broadcast(new PacketPlayOutEntityMetadata(entity.getId(), entity.datawatcher, true)); // Paper - update entity for all players
+                        entity.tracker.broadcast(
+                            new PacketPlayOutEntityMetadata(entity.getId(), entity.datawatcher,
+                                true)); // Paper - update entity for all players
                     }
 
                     if (event.isCancelled()) {
-                        this.player.updateInventory(this.player.activeContainer); // Paper - Refresh player inventory
+                        this.player.updateInventory(
+                            this.player.activeContainer); // Paper - Refresh player inventory
                         return;
                     }
                     // CraftBukkit end
                 }
 
-                if (packetplayinuseentity.b() == PacketPlayInUseEntity.EnumEntityUseAction.INTERACT) {
+                if (packetplayinuseentity.b()
+                    == PacketPlayInUseEntity.EnumEntityUseAction.INTERACT) {
                     enumhand = packetplayinuseentity.c();
                     this.player.a(entity, enumhand);
                     // CraftBukkit start
@@ -2032,9 +2434,11 @@ public class PlayerConnection implements PacketListenerPlayIn {
                         this.player.updateInventory(this.player.activeContainer);
                     }
                     // CraftBukkit end
-                } else if (packetplayinuseentity.b() == PacketPlayInUseEntity.EnumEntityUseAction.INTERACT_AT) {
+                } else if (packetplayinuseentity.b()
+                    == PacketPlayInUseEntity.EnumEntityUseAction.INTERACT_AT) {
                     enumhand = packetplayinuseentity.c();
-                    EnumInteractionResult enuminteractionresult = entity.a((EntityHuman) this.player, packetplayinuseentity.d(), enumhand);
+                    EnumInteractionResult enuminteractionresult =
+                        entity.a((EntityHuman) this.player, packetplayinuseentity.d(), enumhand);
 
                     if (enuminteractionresult.b()) {
                         this.player.a(enumhand, true);
@@ -2044,10 +2448,17 @@ public class PlayerConnection implements PacketListenerPlayIn {
                         this.player.updateInventory(this.player.activeContainer);
                     }
                     // CraftBukkit end
-                } else if (packetplayinuseentity.b() == PacketPlayInUseEntity.EnumEntityUseAction.ATTACK) {
-                    if (entity instanceof EntityItem || entity instanceof EntityExperienceOrb || entity instanceof EntityArrow || (entity == this.player && !player.isSpectator())) { // CraftBukkit
-                        this.disconnect(new ChatMessage("multiplayer.disconnect.invalid_entity_attacked", new Object[0]));
-                        this.minecraftServer.warning("Player " + this.player.getDisplayName().getString() + " tried to attack an invalid entity");
+                } else if (packetplayinuseentity.b()
+                    == PacketPlayInUseEntity.EnumEntityUseAction.ATTACK) {
+                    if (entity instanceof EntityItem || entity instanceof EntityExperienceOrb
+                        || entity instanceof EntityArrow || (entity == this.player && !player
+                        .isSpectator())) { // CraftBukkit
+                        this.disconnect(
+                            new ChatMessage("multiplayer.disconnect.invalid_entity_attacked",
+                                new Object[0]));
+                        this.minecraftServer.warning(
+                            "Player " + this.player.getDisplayName().getString()
+                                + " tried to attack an invalid entity");
                         return;
                     }
 
@@ -2063,38 +2474,45 @@ public class PlayerConnection implements PacketListenerPlayIn {
         }
         // Paper start - fire event
         else {
-            this.server.getPluginManager().callEvent(new com.destroystokyo.paper.event.player.PlayerUseUnknownEntityEvent(
-                this.getPlayer(),
-                packetplayinuseentity.getEntityId(),
-                packetplayinuseentity.b() == PacketPlayInUseEntity.EnumEntityUseAction.ATTACK,
-                packetplayinuseentity.c() == EnumHand.MAIN_HAND ? EquipmentSlot.HAND : EquipmentSlot.OFF_HAND
-            ));
+            this.server.getPluginManager().callEvent(
+                new com.destroystokyo.paper.event.player.PlayerUseUnknownEntityEvent(
+                    this.getPlayer(), packetplayinuseentity.getEntityId(),
+                    packetplayinuseentity.b() == PacketPlayInUseEntity.EnumEntityUseAction.ATTACK,
+                    packetplayinuseentity.c() == EnumHand.MAIN_HAND ?
+                        EquipmentSlot.HAND :
+                        EquipmentSlot.OFF_HAND));
         }
         // Paper end
 
     }
 
-    @Override
-    public void a(PacketPlayInClientCommand packetplayinclientcommand) {
-        PlayerConnectionUtils.ensureMainThread(packetplayinclientcommand, this, this.player.getWorldServer());
+    @Override public void a(PacketPlayInClientCommand packetplayinclientcommand) {
+        PlayerConnectionUtils
+            .ensureMainThread(packetplayinclientcommand, this, this.player.getWorldServer());
         this.player.resetIdleTimer();
-        PacketPlayInClientCommand.EnumClientCommand packetplayinclientcommand_enumclientcommand = packetplayinclientcommand.b();
+        PacketPlayInClientCommand.EnumClientCommand packetplayinclientcommand_enumclientcommand =
+            packetplayinclientcommand.b();
 
         switch (packetplayinclientcommand_enumclientcommand) {
             case PERFORM_RESPAWN:
                 if (this.player.viewingCredits) {
                     this.player.viewingCredits = false;
-                    this.player = this.minecraftServer.getPlayerList().moveToWorld(this.player, DimensionManager.OVERWORLD, true);
-                    CriterionTriggers.v.a(this.player, DimensionManager.THE_END, DimensionManager.OVERWORLD);
+                    this.player = this.minecraftServer.getPlayerList()
+                        .moveToWorld(this.player, DimensionManager.OVERWORLD, true);
+                    CriterionTriggers.v
+                        .a(this.player, DimensionManager.THE_END, DimensionManager.OVERWORLD);
                 } else {
                     if (this.player.getHealth() > 0.0F) {
                         return;
                     }
 
-                    this.player = this.minecraftServer.getPlayerList().moveToWorld(this.player, DimensionManager.OVERWORLD, false);
+                    this.player = this.minecraftServer.getPlayerList()
+                        .moveToWorld(this.player, DimensionManager.OVERWORLD, false);
                     if (this.minecraftServer.isHardcore()) {
                         this.player.a(EnumGamemode.SPECTATOR);
-                        ((GameRules.GameRuleBoolean) this.player.getWorldServer().getGameRules().get(GameRules.SPECTATORS_GENERATE_CHUNKS)).a(false, this.minecraftServer);
+                        ((GameRules.GameRuleBoolean) this.player.getWorldServer().getGameRules()
+                            .get(GameRules.SPECTATORS_GENERATE_CHUNKS))
+                            .a(false, this.minecraftServer);
                     }
                 }
                 break;
@@ -2104,22 +2522,27 @@ public class PlayerConnection implements PacketListenerPlayIn {
 
     }
 
-    @Override
-    public void a(PacketPlayInCloseWindow packetplayinclosewindow) {
-        PlayerConnectionUtils.ensureMainThread(packetplayinclosewindow, this, this.player.getWorldServer());
+    @Override public void a(PacketPlayInCloseWindow packetplayinclosewindow) {
+        PlayerConnectionUtils
+            .ensureMainThread(packetplayinclosewindow, this, this.player.getWorldServer());
 
-        if (this.player.isFrozen()) return; // CraftBukkit
-        CraftEventFactory.handleInventoryCloseEvent(this.player, org.bukkit.event.inventory.InventoryCloseEvent.Reason.PLAYER); // CraftBukkit // Paper
+        if (this.player.isFrozen())
+            return; // CraftBukkit
+        CraftEventFactory.handleInventoryCloseEvent(this.player,
+            org.bukkit.event.inventory.InventoryCloseEvent.Reason.PLAYER); // CraftBukkit // Paper
 
         this.player.m();
     }
 
-    @Override
-    public void a(PacketPlayInWindowClick packetplayinwindowclick) {
-        PlayerConnectionUtils.ensureMainThread(packetplayinwindowclick, this, this.player.getWorldServer());
-        if (this.player.isFrozen()) return; // CraftBukkit
+    @Override public void a(PacketPlayInWindowClick packetplayinwindowclick) {
+        PlayerConnectionUtils
+            .ensureMainThread(packetplayinwindowclick, this, this.player.getWorldServer());
+        if (this.player.isFrozen())
+            return; // CraftBukkit
         this.player.resetIdleTimer();
-        if (this.player.activeContainer.windowId == packetplayinwindowclick.b() && this.player.activeContainer.c(this.player) && this.player.activeContainer.canUse(this.player)) { // CraftBukkit
+        if (this.player.activeContainer.windowId == packetplayinwindowclick.b()
+            && this.player.activeContainer.c(this.player) && this.player.activeContainer
+            .canUse(this.player)) { // CraftBukkit
             boolean cancelled = this.player.isSpectator(); // CraftBukkit - see below if
             if (false/*this.player.isSpectator()*/) { // CraftBukkit
                 NonNullList<ItemStack> nonnulllist = NonNullList.a();
@@ -2155,42 +2578,61 @@ public class PlayerConnection implements PacketListenerPlayIn {
                             action = InventoryAction.NOTHING; // Don't want to repeat ourselves
                             if (packetplayinwindowclick.c() == -999) {
                                 if (!player.inventory.getCarried().isEmpty()) {
-                                    action = packetplayinwindowclick.d() == 0 ? InventoryAction.DROP_ALL_CURSOR : InventoryAction.DROP_ONE_CURSOR;
+                                    action = packetplayinwindowclick.d() == 0 ?
+                                        InventoryAction.DROP_ALL_CURSOR :
+                                        InventoryAction.DROP_ONE_CURSOR;
                                 }
-                            } else if (packetplayinwindowclick.c() < 0)  {
+                            } else if (packetplayinwindowclick.c() < 0) {
                                 action = InventoryAction.NOTHING;
                             } else {
-                                Slot slot = this.player.activeContainer.getSlot(packetplayinwindowclick.c());
+                                Slot slot = this.player.activeContainer
+                                    .getSlot(packetplayinwindowclick.c());
                                 if (slot != null) {
                                     ItemStack clickedItem = slot.getItem();
                                     ItemStack cursor = player.inventory.getCarried();
                                     if (clickedItem.isEmpty()) {
                                         if (!cursor.isEmpty()) {
-                                            action = packetplayinwindowclick.d() == 0 ? InventoryAction.PLACE_ALL : InventoryAction.PLACE_ONE;
+                                            action = packetplayinwindowclick.d() == 0 ?
+                                                InventoryAction.PLACE_ALL :
+                                                InventoryAction.PLACE_ONE;
                                         }
                                     } else if (slot.isAllowed(player)) {
                                         if (cursor.isEmpty()) {
-                                            action = packetplayinwindowclick.d() == 0 ? InventoryAction.PICKUP_ALL : InventoryAction.PICKUP_HALF;
+                                            action = packetplayinwindowclick.d() == 0 ?
+                                                InventoryAction.PICKUP_ALL :
+                                                InventoryAction.PICKUP_HALF;
                                         } else if (slot.isAllowed(cursor)) {
-                                            if (clickedItem.doMaterialsMatch(cursor) && ItemStack.equals(clickedItem, cursor)) {
-                                                int toPlace = packetplayinwindowclick.d() == 0 ? cursor.getCount() : 1;
-                                                toPlace = Math.min(toPlace, clickedItem.getMaxStackSize() - clickedItem.getCount());
-                                                toPlace = Math.min(toPlace, slot.inventory.getMaxStackSize() - clickedItem.getCount());
+                                            if (clickedItem.doMaterialsMatch(cursor) && ItemStack
+                                                .equals(clickedItem, cursor)) {
+                                                int toPlace = packetplayinwindowclick.d() == 0 ?
+                                                    cursor.getCount() :
+                                                    1;
+                                                toPlace = Math.min(toPlace,
+                                                    clickedItem.getMaxStackSize() - clickedItem
+                                                        .getCount());
+                                                toPlace = Math.min(toPlace,
+                                                    slot.inventory.getMaxStackSize() - clickedItem
+                                                        .getCount());
                                                 if (toPlace == 1) {
                                                     action = InventoryAction.PLACE_ONE;
                                                 } else if (toPlace == cursor.getCount()) {
                                                     action = InventoryAction.PLACE_ALL;
                                                 } else if (toPlace < 0) {
-                                                    action = toPlace != -1 ? InventoryAction.PICKUP_SOME : InventoryAction.PICKUP_ONE; // this happens with oversized stacks
+                                                    action = toPlace != -1 ?
+                                                        InventoryAction.PICKUP_SOME :
+                                                        InventoryAction.PICKUP_ONE; // this happens with oversized stacks
                                                 } else if (toPlace != 0) {
                                                     action = InventoryAction.PLACE_SOME;
                                                 }
-                                            } else if (cursor.getCount() <= slot.getMaxStackSize()) {
+                                            } else if (cursor.getCount() <= slot
+                                                .getMaxStackSize()) {
                                                 action = InventoryAction.SWAP_WITH_CURSOR;
                                             }
-                                        } else if (cursor.getItem() == clickedItem.getItem() && ItemStack.equals(cursor, clickedItem)) {
+                                        } else if (cursor.getItem() == clickedItem.getItem()
+                                            && ItemStack.equals(cursor, clickedItem)) {
                                             if (clickedItem.getCount() >= 0) {
-                                                if (clickedItem.getCount() + cursor.getCount() <= cursor.getMaxStackSize()) {
+                                                if (clickedItem.getCount() + cursor.getCount()
+                                                    <= cursor.getMaxStackSize()) {
                                                     // As of 1.5, this is result slots only
                                                     action = InventoryAction.PICKUP_ALL;
                                                 }
@@ -2212,7 +2654,8 @@ public class PlayerConnection implements PacketListenerPlayIn {
                             if (packetplayinwindowclick.c() < 0) {
                                 action = InventoryAction.NOTHING;
                             } else {
-                                Slot slot = this.player.activeContainer.getSlot(packetplayinwindowclick.c());
+                                Slot slot = this.player.activeContainer
+                                    .getSlot(packetplayinwindowclick.c());
                                 if (slot != null && slot.isAllowed(this.player) && slot.hasItem()) {
                                     action = InventoryAction.MOVE_TO_OTHER_INVENTORY;
                                 } else {
@@ -2224,17 +2667,23 @@ public class PlayerConnection implements PacketListenerPlayIn {
                     case SWAP:
                         if (packetplayinwindowclick.d() >= 0 && packetplayinwindowclick.d() < 9) {
                             click = ClickType.NUMBER_KEY;
-                            Slot clickedSlot = this.player.activeContainer.getSlot(packetplayinwindowclick.c());
+                            Slot clickedSlot =
+                                this.player.activeContainer.getSlot(packetplayinwindowclick.c());
                             if (clickedSlot.isAllowed(player)) {
-                                ItemStack hotbar = this.player.inventory.getItem(packetplayinwindowclick.d());
-                                boolean canCleanSwap = hotbar.isEmpty() || (clickedSlot.inventory == player.inventory && clickedSlot.isAllowed(hotbar)); // the slot will accept the hotbar item
+                                ItemStack hotbar =
+                                    this.player.inventory.getItem(packetplayinwindowclick.d());
+                                boolean canCleanSwap =
+                                    hotbar.isEmpty() || (clickedSlot.inventory == player.inventory
+                                        && clickedSlot
+                                        .isAllowed(hotbar)); // the slot will accept the hotbar item
                                 if (clickedSlot.hasItem()) {
                                     if (canCleanSwap) {
                                         action = InventoryAction.HOTBAR_SWAP;
                                     } else {
                                         action = InventoryAction.HOTBAR_MOVE_AND_READD;
                                     }
-                                } else if (!clickedSlot.hasItem() && !hotbar.isEmpty() && clickedSlot.isAllowed(hotbar)) {
+                                } else if (!clickedSlot.hasItem() && !hotbar.isEmpty()
+                                    && clickedSlot.isAllowed(hotbar)) {
                                     action = InventoryAction.HOTBAR_SWAP;
                                 } else {
                                     action = InventoryAction.NOTHING;
@@ -2250,8 +2699,11 @@ public class PlayerConnection implements PacketListenerPlayIn {
                             if (packetplayinwindowclick.c() < 0) {
                                 action = InventoryAction.NOTHING;
                             } else {
-                                Slot slot = this.player.activeContainer.getSlot(packetplayinwindowclick.c());
-                                if (slot != null && slot.hasItem() && player.abilities.canInstantlyBuild && player.inventory.getCarried().isEmpty()) {
+                                Slot slot = this.player.activeContainer
+                                    .getSlot(packetplayinwindowclick.c());
+                                if (slot != null && slot.hasItem()
+                                    && player.abilities.canInstantlyBuild && player.inventory
+                                    .getCarried().isEmpty()) {
                                     action = InventoryAction.CLONE_STACK;
                                 } else {
                                     action = InventoryAction.NOTHING;
@@ -2266,16 +2718,22 @@ public class PlayerConnection implements PacketListenerPlayIn {
                         if (packetplayinwindowclick.c() >= 0) {
                             if (packetplayinwindowclick.d() == 0) {
                                 click = ClickType.DROP;
-                                Slot slot = this.player.activeContainer.getSlot(packetplayinwindowclick.c());
-                                if (slot != null && slot.hasItem() && slot.isAllowed(player) && !slot.getItem().isEmpty() && slot.getItem().getItem() != Item.getItemOf(Blocks.AIR)) {
+                                Slot slot = this.player.activeContainer
+                                    .getSlot(packetplayinwindowclick.c());
+                                if (slot != null && slot.hasItem() && slot.isAllowed(player)
+                                    && !slot.getItem().isEmpty() && slot.getItem().getItem() != Item
+                                    .getItemOf(Blocks.AIR)) {
                                     action = InventoryAction.DROP_ONE_SLOT;
                                 } else {
                                     action = InventoryAction.NOTHING;
                                 }
                             } else if (packetplayinwindowclick.d() == 1) {
                                 click = ClickType.CONTROL_DROP;
-                                Slot slot = this.player.activeContainer.getSlot(packetplayinwindowclick.c());
-                                if (slot != null && slot.hasItem() && slot.isAllowed(player) && !slot.getItem().isEmpty() && slot.getItem().getItem() != Item.getItemOf(Blocks.AIR)) {
+                                Slot slot = this.player.activeContainer
+                                    .getSlot(packetplayinwindowclick.c());
+                                if (slot != null && slot.hasItem() && slot.isAllowed(player)
+                                    && !slot.getItem().isEmpty() && slot.getItem().getItem() != Item
+                                    .getItemOf(Blocks.AIR)) {
                                     action = InventoryAction.DROP_ALL_SLOT;
                                 } else {
                                     action = InventoryAction.NOTHING;
@@ -2291,16 +2749,22 @@ public class PlayerConnection implements PacketListenerPlayIn {
                         }
                         break;
                     case QUICK_CRAFT:
-                        itemstack = this.player.activeContainer.a(packetplayinwindowclick.c(), packetplayinwindowclick.d(), packetplayinwindowclick.g(), this.player);
+                        itemstack = this.player.activeContainer
+                            .a(packetplayinwindowclick.c(), packetplayinwindowclick.d(),
+                                packetplayinwindowclick.g(), this.player);
                         break;
                     case PICKUP_ALL:
                         click = ClickType.DOUBLE_CLICK;
                         action = InventoryAction.NOTHING;
-                        if (packetplayinwindowclick.c() >= 0 && !this.player.inventory.getCarried().isEmpty()) {
+                        if (packetplayinwindowclick.c() >= 0 && !this.player.inventory.getCarried()
+                            .isEmpty()) {
                             ItemStack cursor = this.player.inventory.getCarried();
                             action = InventoryAction.NOTHING;
                             // Quick check for if we have any of the item
-                            if (inventory.getTopInventory().contains(CraftMagicNumbers.getMaterial(cursor.getItem())) || inventory.getBottomInventory().contains(CraftMagicNumbers.getMaterial(cursor.getItem()))) {
+                            if (inventory.getTopInventory()
+                                .contains(CraftMagicNumbers.getMaterial(cursor.getItem()))
+                                || inventory.getBottomInventory()
+                                .contains(CraftMagicNumbers.getMaterial(cursor.getItem()))) {
                                 action = InventoryAction.COLLECT_TO_CURSOR;
                             }
                         }
@@ -2311,9 +2775,13 @@ public class PlayerConnection implements PacketListenerPlayIn {
 
                 if (packetplayinwindowclick.g() != InventoryClickType.QUICK_CRAFT) {
                     if (click == ClickType.NUMBER_KEY) {
-                        event = new InventoryClickEvent(inventory, type, packetplayinwindowclick.c(), click, action, packetplayinwindowclick.d());
+                        event =
+                            new InventoryClickEvent(inventory, type, packetplayinwindowclick.c(),
+                                click, action, packetplayinwindowclick.d());
                     } else {
-                        event = new InventoryClickEvent(inventory, type, packetplayinwindowclick.c(), click, action);
+                        event =
+                            new InventoryClickEvent(inventory, type, packetplayinwindowclick.c(),
+                                click, action);
                     }
 
                     org.bukkit.inventory.Inventory top = inventory.getTopInventory();
@@ -2321,9 +2789,12 @@ public class PlayerConnection implements PacketListenerPlayIn {
                         org.bukkit.inventory.Recipe recipe = ((CraftingInventory) top).getRecipe();
                         if (recipe != null) {
                             if (click == ClickType.NUMBER_KEY) {
-                                event = new CraftItemEvent(recipe, inventory, type, packetplayinwindowclick.c(), click, action, packetplayinwindowclick.d());
+                                event = new CraftItemEvent(recipe, inventory, type,
+                                    packetplayinwindowclick.c(), click, action,
+                                    packetplayinwindowclick.d());
                             } else {
-                                event = new CraftItemEvent(recipe, inventory, type, packetplayinwindowclick.c(), click, action);
+                                event = new CraftItemEvent(recipe, inventory, type,
+                                    packetplayinwindowclick.c(), click, action);
                             }
                         }
                     }
@@ -2338,7 +2809,9 @@ public class PlayerConnection implements PacketListenerPlayIn {
                     switch (event.getResult()) {
                         case ALLOW:
                         case DEFAULT:
-                            itemstack = this.player.activeContainer.a(packetplayinwindowclick.c(), packetplayinwindowclick.d(), packetplayinwindowclick.g(), this.player);
+                            itemstack = this.player.activeContainer
+                                .a(packetplayinwindowclick.c(), packetplayinwindowclick.d(),
+                                    packetplayinwindowclick.g(), this.player);
                             break;
                         case DENY:
                             /* Needs enum constructor in InventoryAction
@@ -2370,19 +2843,31 @@ public class PlayerConnection implements PacketListenerPlayIn {
                                 case PLACE_SOME:
                                 case PLACE_ONE:
                                 case SWAP_WITH_CURSOR:
-                                    this.player.playerConnection.sendPacket(new PacketPlayOutSetSlot(-1, -1, this.player.inventory.getCarried()));
-                                    this.player.playerConnection.sendPacket(new PacketPlayOutSetSlot(this.player.activeContainer.windowId, packetplayinwindowclick.c(), this.player.activeContainer.getSlot(packetplayinwindowclick.c()).getItem()));
+                                    this.player.playerConnection.sendPacket(
+                                        new PacketPlayOutSetSlot(-1, -1,
+                                            this.player.inventory.getCarried()));
+                                    this.player.playerConnection.sendPacket(
+                                        new PacketPlayOutSetSlot(
+                                            this.player.activeContainer.windowId,
+                                            packetplayinwindowclick.c(), this.player.activeContainer
+                                            .getSlot(packetplayinwindowclick.c()).getItem()));
                                     break;
                                 // Modified clicked only
                                 case DROP_ALL_SLOT:
                                 case DROP_ONE_SLOT:
-                                    this.player.playerConnection.sendPacket(new PacketPlayOutSetSlot(this.player.activeContainer.windowId, packetplayinwindowclick.c(), this.player.activeContainer.getSlot(packetplayinwindowclick.c()).getItem()));
+                                    this.player.playerConnection.sendPacket(
+                                        new PacketPlayOutSetSlot(
+                                            this.player.activeContainer.windowId,
+                                            packetplayinwindowclick.c(), this.player.activeContainer
+                                            .getSlot(packetplayinwindowclick.c()).getItem()));
                                     break;
                                 // Modified cursor only
                                 case DROP_ALL_CURSOR:
                                 case DROP_ONE_CURSOR:
                                 case CLONE_STACK:
-                                    this.player.playerConnection.sendPacket(new PacketPlayOutSetSlot(-1, -1, this.player.inventory.getCarried()));
+                                    this.player.playerConnection.sendPacket(
+                                        new PacketPlayOutSetSlot(-1, -1,
+                                            this.player.inventory.getCarried()));
                                     break;
                                 // Nothing
                                 case NOTHING:
@@ -2399,19 +2884,24 @@ public class PlayerConnection implements PacketListenerPlayIn {
                 }
                 // CraftBukkit end
                 if (ItemStack.matches(packetplayinwindowclick.f(), itemstack)) {
-                    this.player.playerConnection.sendPacket(new PacketPlayOutTransaction(packetplayinwindowclick.b(), packetplayinwindowclick.e(), true));
+                    this.player.playerConnection.sendPacket(
+                        new PacketPlayOutTransaction(packetplayinwindowclick.b(),
+                            packetplayinwindowclick.e(), true));
                     this.player.e = true;
                     this.player.activeContainer.c();
                     this.player.broadcastCarriedItem();
                     this.player.e = false;
                 } else {
                     this.k.put(this.player.activeContainer.windowId, packetplayinwindowclick.e());
-                    this.player.playerConnection.sendPacket(new PacketPlayOutTransaction(packetplayinwindowclick.b(), packetplayinwindowclick.e(), false));
+                    this.player.playerConnection.sendPacket(
+                        new PacketPlayOutTransaction(packetplayinwindowclick.b(),
+                            packetplayinwindowclick.e(), false));
                     this.player.activeContainer.a(this.player, false);
                     NonNullList<ItemStack> nonnulllist1 = NonNullList.a();
 
                     for (int j = 0; j < this.player.activeContainer.slots.size(); ++j) {
-                        ItemStack itemstack1 = ((Slot) this.player.activeContainer.slots.get(j)).getItem();
+                        ItemStack itemstack1 =
+                            ((Slot) this.player.activeContainer.slots.get(j)).getItem();
 
                         nonnulllist1.add(itemstack1.isEmpty() ? ItemStack.a : itemstack1);
                     }
@@ -2423,39 +2913,50 @@ public class PlayerConnection implements PacketListenerPlayIn {
 
     }
 
-    @Override
-    public void a(PacketPlayInAutoRecipe packetplayinautorecipe) {
-        PlayerConnectionUtils.ensureMainThread(packetplayinautorecipe, this, this.player.getWorldServer());
+    @Override public void a(PacketPlayInAutoRecipe packetplayinautorecipe) {
+        PlayerConnectionUtils
+            .ensureMainThread(packetplayinautorecipe, this, this.player.getWorldServer());
         this.player.resetIdleTimer();
-        if (!this.player.isSpectator() && this.player.activeContainer.windowId == packetplayinautorecipe.b() && this.player.activeContainer.c(this.player) && this.player.activeContainer instanceof ContainerRecipeBook) {
-            this.minecraftServer.getCraftingManager().a(packetplayinautorecipe.c()).ifPresent((irecipe) -> {
-                ((ContainerRecipeBook) this.player.activeContainer).a(packetplayinautorecipe.d(), irecipe, this.player);
-            });
+        if (!this.player.isSpectator()
+            && this.player.activeContainer.windowId == packetplayinautorecipe.b()
+            && this.player.activeContainer.c(this.player)
+            && this.player.activeContainer instanceof ContainerRecipeBook) {
+            this.minecraftServer.getCraftingManager().a(packetplayinautorecipe.c())
+                .ifPresent((irecipe) -> {
+                    ((ContainerRecipeBook) this.player.activeContainer)
+                        .a(packetplayinautorecipe.d(), irecipe, this.player);
+                });
         }
     }
 
-    @Override
-    public void a(PacketPlayInEnchantItem packetplayinenchantitem) {
-        PlayerConnectionUtils.ensureMainThread(packetplayinenchantitem, this, this.player.getWorldServer());
-        if (this.player.isFrozen()) return; // CraftBukkit
+    @Override public void a(PacketPlayInEnchantItem packetplayinenchantitem) {
+        PlayerConnectionUtils
+            .ensureMainThread(packetplayinenchantitem, this, this.player.getWorldServer());
+        if (this.player.isFrozen())
+            return; // CraftBukkit
         this.player.resetIdleTimer();
-        if (this.player.activeContainer.windowId == packetplayinenchantitem.b() && this.player.activeContainer.c(this.player) && !this.player.isSpectator()) {
+        if (this.player.activeContainer.windowId == packetplayinenchantitem.b()
+            && this.player.activeContainer.c(this.player) && !this.player.isSpectator()) {
             this.player.activeContainer.a((EntityHuman) this.player, packetplayinenchantitem.c());
             this.player.activeContainer.c();
         }
 
     }
 
-    @Override
-    public void a(PacketPlayInSetCreativeSlot packetplayinsetcreativeslot) {
-        PlayerConnectionUtils.ensureMainThread(packetplayinsetcreativeslot, this, this.player.getWorldServer());
+    @Override public void a(PacketPlayInSetCreativeSlot packetplayinsetcreativeslot) {
+        PlayerConnectionUtils
+            .ensureMainThread(packetplayinsetcreativeslot, this, this.player.getWorldServer());
         if (this.player.playerInteractManager.isCreative()) {
             boolean flag = packetplayinsetcreativeslot.b() < 0;
             ItemStack itemstack = packetplayinsetcreativeslot.getItemStack();
             NBTTagCompound nbttagcompound = itemstack.b("BlockEntityTag");
 
-            if (!itemstack.isEmpty() && nbttagcompound != null && nbttagcompound.hasKey("x") && nbttagcompound.hasKey("y") && nbttagcompound.hasKey("z") && this.player.getBukkitEntity().hasPermission("minecraft.nbt.copy")) { // Spigot
-                BlockPosition blockposition = new BlockPosition(nbttagcompound.getInt("x"), nbttagcompound.getInt("y"), nbttagcompound.getInt("z"));
+            if (!itemstack.isEmpty() && nbttagcompound != null && nbttagcompound.hasKey("x")
+                && nbttagcompound.hasKey("y") && nbttagcompound.hasKey("z") && this.player
+                .getBukkitEntity().hasPermission("minecraft.nbt.copy")) { // Spigot
+                BlockPosition blockposition =
+                    new BlockPosition(nbttagcompound.getInt("x"), nbttagcompound.getInt("y"),
+                        nbttagcompound.getInt("z"));
                 TileEntity tileentity = this.player.world.getTileEntity(blockposition);
 
                 if (tileentity != null) {
@@ -2468,51 +2969,64 @@ public class PlayerConnection implements PacketListenerPlayIn {
                 }
             }
 
-            boolean flag1 = packetplayinsetcreativeslot.b() >= 1 && packetplayinsetcreativeslot.b() <= 45;
-            boolean flag2 = itemstack.isEmpty() || itemstack.getDamage() >= 0 && itemstack.getCount() <= 64 && !itemstack.isEmpty();
-            if (flag || (flag1 && !ItemStack.matches(this.player.defaultContainer.getSlot(packetplayinsetcreativeslot.b()).getItem(), packetplayinsetcreativeslot.getItemStack()))) { // Insist on valid slot
+            boolean flag1 =
+                packetplayinsetcreativeslot.b() >= 1 && packetplayinsetcreativeslot.b() <= 45;
+            boolean flag2 = itemstack.isEmpty()
+                || itemstack.getDamage() >= 0 && itemstack.getCount() <= 64 && !itemstack.isEmpty();
+            if (flag || (flag1 && !ItemStack.matches(
+                this.player.defaultContainer.getSlot(packetplayinsetcreativeslot.b()).getItem(),
+                packetplayinsetcreativeslot.getItemStack()))) { // Insist on valid slot
                 // CraftBukkit start - Call click event
                 InventoryView inventory = this.player.defaultContainer.getBukkitView();
-                org.bukkit.inventory.ItemStack item = CraftItemStack.asBukkitCopy(packetplayinsetcreativeslot.getItemStack());
+                org.bukkit.inventory.ItemStack item =
+                    CraftItemStack.asBukkitCopy(packetplayinsetcreativeslot.getItemStack());
 
                 SlotType type = SlotType.QUICKBAR;
                 if (flag) {
                     type = SlotType.OUTSIDE;
                 } else if (packetplayinsetcreativeslot.b() < 36) {
-                    if (packetplayinsetcreativeslot.b() >= 5 && packetplayinsetcreativeslot.b() < 9) {
+                    if (packetplayinsetcreativeslot.b() >= 5
+                        && packetplayinsetcreativeslot.b() < 9) {
                         type = SlotType.ARMOR;
                     } else {
                         type = SlotType.CONTAINER;
                     }
                 }
-                InventoryCreativeEvent event = new InventoryCreativeEvent(inventory, type, flag ? -999 : packetplayinsetcreativeslot.b(), item);
+                InventoryCreativeEvent event = new InventoryCreativeEvent(inventory, type,
+                    flag ? -999 : packetplayinsetcreativeslot.b(), item);
                 server.getPluginManager().callEvent(event);
 
                 itemstack = CraftItemStack.asNMSCopy(event.getCursor());
 
                 switch (event.getResult()) {
-                case ALLOW:
-                    // Plugin cleared the id / stacksize checks
-                    flag2 = true;
-                    break;
-                case DEFAULT:
-                    break;
-                case DENY:
-                    // Reset the slot
-                    if (packetplayinsetcreativeslot.b() >= 0) {
-                        this.player.playerConnection.sendPacket(new PacketPlayOutSetSlot(this.player.defaultContainer.windowId, packetplayinsetcreativeslot.b(), this.player.defaultContainer.getSlot(packetplayinsetcreativeslot.b()).getItem()));
-                        this.player.playerConnection.sendPacket(new PacketPlayOutSetSlot(-1, -1, ItemStack.a));
-                    }
-                    return;
+                    case ALLOW:
+                        // Plugin cleared the id / stacksize checks
+                        flag2 = true;
+                        break;
+                    case DEFAULT:
+                        break;
+                    case DENY:
+                        // Reset the slot
+                        if (packetplayinsetcreativeslot.b() >= 0) {
+                            this.player.playerConnection.sendPacket(
+                                new PacketPlayOutSetSlot(this.player.defaultContainer.windowId,
+                                    packetplayinsetcreativeslot.b(), this.player.defaultContainer
+                                    .getSlot(packetplayinsetcreativeslot.b()).getItem()));
+                            this.player.playerConnection
+                                .sendPacket(new PacketPlayOutSetSlot(-1, -1, ItemStack.a));
+                        }
+                        return;
                 }
             }
             // CraftBukkit end
 
             if (flag1 && flag2) {
                 if (itemstack.isEmpty()) {
-                    this.player.defaultContainer.setItem(packetplayinsetcreativeslot.b(), ItemStack.a);
+                    this.player.defaultContainer
+                        .setItem(packetplayinsetcreativeslot.b(), ItemStack.a);
                 } else {
-                    this.player.defaultContainer.setItem(packetplayinsetcreativeslot.b(), itemstack);
+                    this.player.defaultContainer
+                        .setItem(packetplayinsetcreativeslot.b(), itemstack);
                 }
 
                 this.player.defaultContainer.a(this.player, true);
@@ -2525,28 +3039,33 @@ public class PlayerConnection implements PacketListenerPlayIn {
 
     }
 
-    @Override
-    public void a(PacketPlayInTransaction packetplayintransaction) {
-        PlayerConnectionUtils.ensureMainThread(packetplayintransaction, this, this.player.getWorldServer());
-        if (this.player.isFrozen()) return; // CraftBukkit
+    @Override public void a(PacketPlayInTransaction packetplayintransaction) {
+        PlayerConnectionUtils
+            .ensureMainThread(packetplayintransaction, this, this.player.getWorldServer());
+        if (this.player.isFrozen())
+            return; // CraftBukkit
         int i = this.player.activeContainer.windowId;
 
-        if (i == packetplayintransaction.b() && this.k.getOrDefault(i, (short) (packetplayintransaction.c() + 1)) == packetplayintransaction.c() && !this.player.activeContainer.c(this.player) && !this.player.isSpectator()) {
+        if (i == packetplayintransaction.b()
+            && this.k.getOrDefault(i, (short) (packetplayintransaction.c() + 1))
+            == packetplayintransaction.c() && !this.player.activeContainer.c(this.player)
+            && !this.player.isSpectator()) {
             this.player.activeContainer.a(this.player, true);
         }
 
     }
 
-    @Override
-    public void a(PacketPlayInUpdateSign packetplayinupdatesign) {
-        PlayerConnectionUtils.ensureMainThread(packetplayinupdatesign, this, this.player.getWorldServer());
-        if (this.player.isFrozen()) return; // CraftBukkit
+    @Override public void a(PacketPlayInUpdateSign packetplayinupdatesign) {
+        PlayerConnectionUtils
+            .ensureMainThread(packetplayinupdatesign, this, this.player.getWorldServer());
+        if (this.player.isFrozen())
+            return; // CraftBukkit
         this.player.resetIdleTimer();
         WorldServer worldserver = this.minecraftServer.getWorldServer(this.player.dimension);
         BlockPosition blockposition = packetplayinupdatesign.b();
 
         if (worldserver.isLoaded(blockposition)) {
-            IBlockData iblockdata = worldserver.getType(blockposition);
+            IBlockData iblockdata = worldserver.getType(blockposition, this.player);
             TileEntity tileentity = worldserver.getTileEntity(blockposition);
 
             if (!(tileentity instanceof TileEntitySign)) {
@@ -2555,8 +3074,10 @@ public class PlayerConnection implements PacketListenerPlayIn {
 
             TileEntitySign tileentitysign = (TileEntitySign) tileentity;
 
-            if (!tileentitysign.d() || tileentitysign.signEditor == null || !tileentitysign.signEditor.equals(this.player.getUniqueID())) {
-                this.minecraftServer.warning("Player " + this.player.getDisplayName().getString() + " just tried to change non-editable sign");
+            if (!tileentitysign.d() || tileentitysign.signEditor == null
+                || !tileentitysign.signEditor.equals(this.player.getUniqueID())) {
+                this.minecraftServer.warning("Player " + this.player.getDisplayName().getString()
+                    + " just tried to change non-editable sign");
                 this.sendPacket(tileentity.getUpdatePacket()); // CraftBukkit
                 return;
             }
@@ -2574,21 +3095,27 @@ public class PlayerConnection implements PacketListenerPlayIn {
                 // Paper start - cap line length - modified clients can send longer data than normal
                 if (MAX_SIGN_LINE_LENGTH > 0 && astring[i].length() > MAX_SIGN_LINE_LENGTH) {
                     // This handles multibyte characters as 1
-                    int offset = astring[i].codePoints().limit(MAX_SIGN_LINE_LENGTH).map(Character::charCount).sum();
+                    int offset = astring[i].codePoints().limit(MAX_SIGN_LINE_LENGTH)
+                        .map(Character::charCount).sum();
                     if (offset < astring[i].length()) {
                         astring[i] = astring[i].substring(0, offset);
                     }
                 }
                 // Paper end
-                lines[i] = SharedConstants.a(astring[i]); //Paper - Replaced with anvil color stripping method to stop exploits that allow colored signs to be created.
+                lines[i] = SharedConstants
+                    .a(astring[i]); //Paper - Replaced with anvil color stripping method to stop exploits that allow colored signs to be created.
             }
-            SignChangeEvent event = new SignChangeEvent((org.bukkit.craftbukkit.block.CraftBlock) player.getWorld().getBlockAt(x, y, z), this.server.getPlayer(this.player), lines);
+            SignChangeEvent event = new SignChangeEvent(
+                (org.bukkit.craftbukkit.block.CraftBlock) player.getWorld().getBlockAt(x, y, z),
+                this.server.getPlayer(this.player), lines);
             this.server.getPluginManager().callEvent(event);
 
             if (!event.isCancelled()) {
-                System.arraycopy(org.bukkit.craftbukkit.block.CraftSign.sanitizeLines(event.getLines()), 0, tileentitysign.lines, 0, 4);
+                System.arraycopy(
+                    org.bukkit.craftbukkit.block.CraftSign.sanitizeLines(event.getLines()), 0,
+                    tileentitysign.lines, 0, 4);
                 tileentitysign.isEditable = false;
-             }
+            }
             // CraftBukkit end
 
             tileentitysign.update();
@@ -2597,8 +3124,7 @@ public class PlayerConnection implements PacketListenerPlayIn {
 
     }
 
-    @Override
-    public void a(PacketPlayInKeepAlive packetplayinkeepalive) {
+    @Override public void a(PacketPlayInKeepAlive packetplayinkeepalive) {
         //PlayerConnectionUtils.ensureMainThread(packetplayinkeepalive, this, this.player.getWorldServer()); // CraftBukkit // Paper - This shouldn't be on the main thread
         if (this.awaitingKeepAlive && packetplayinkeepalive.b() == this.h) {
             int i = (int) (SystemUtils.getMonotonicMillis() - this.lastKeepAlive);
@@ -2615,15 +3141,19 @@ public class PlayerConnection implements PacketListenerPlayIn {
 
     }
 
-    @Override
-    public void a(PacketPlayInAbilities packetplayinabilities) {
-        PlayerConnectionUtils.ensureMainThread(packetplayinabilities, this, this.player.getWorldServer());
+    @Override public void a(PacketPlayInAbilities packetplayinabilities) {
+        PlayerConnectionUtils
+            .ensureMainThread(packetplayinabilities, this, this.player.getWorldServer());
         // CraftBukkit start
-        if (this.player.abilities.canFly && this.player.abilities.isFlying != packetplayinabilities.isFlying()) {
-            PlayerToggleFlightEvent event = new PlayerToggleFlightEvent(this.server.getPlayer(this.player), packetplayinabilities.isFlying());
+        if (this.player.abilities.canFly && this.player.abilities.isFlying != packetplayinabilities
+            .isFlying()) {
+            PlayerToggleFlightEvent event =
+                new PlayerToggleFlightEvent(this.server.getPlayer(this.player),
+                    packetplayinabilities.isFlying());
             this.server.getPluginManager().callEvent(event);
             if (!event.isCancelled()) {
-                this.player.abilities.isFlying = packetplayinabilities.isFlying(); // Actually set the player's flying status
+                this.player.abilities.isFlying =
+                    packetplayinabilities.isFlying(); // Actually set the player's flying status
             } else {
                 this.player.updateAbilities(); // Tell the player their ability was reverted
             }
@@ -2631,9 +3161,9 @@ public class PlayerConnection implements PacketListenerPlayIn {
         // CraftBukkit end
     }
 
-    @Override
-    public void a(PacketPlayInSettings packetplayinsettings) {
-        PlayerConnectionUtils.ensureMainThread(packetplayinsettings, this, this.player.getWorldServer());
+    @Override public void a(PacketPlayInSettings packetplayinsettings) {
+        PlayerConnectionUtils
+            .ensureMainThread(packetplayinsettings, this, this.player.getWorldServer());
         this.player.a(packetplayinsettings);
     }
 
@@ -2641,12 +3171,13 @@ public class PlayerConnection implements PacketListenerPlayIn {
     private static final MinecraftKey CUSTOM_REGISTER = new MinecraftKey("register");
     private static final MinecraftKey CUSTOM_UNREGISTER = new MinecraftKey("unregister");
 
-    @Override
-    public void a(PacketPlayInCustomPayload packetplayincustompayload) {
-        PlayerConnectionUtils.ensureMainThread(packetplayincustompayload, this, this.player.getWorldServer());
+    @Override public void a(PacketPlayInCustomPayload packetplayincustompayload) {
+        PlayerConnectionUtils
+            .ensureMainThread(packetplayincustompayload, this, this.player.getWorldServer());
         if (packetplayincustompayload.tag.equals(CUSTOM_REGISTER)) {
             try {
-                String channels = packetplayincustompayload.data.toString(com.google.common.base.Charsets.UTF_8);
+                String channels =
+                    packetplayincustompayload.data.toString(com.google.common.base.Charsets.UTF_8);
                 for (String channel : channels.split("\0")) {
                     getPlayer().addChannel(channel);
                 }
@@ -2656,7 +3187,8 @@ public class PlayerConnection implements PacketListenerPlayIn {
             }
         } else if (packetplayincustompayload.tag.equals(CUSTOM_UNREGISTER)) {
             try {
-                String channels = packetplayincustompayload.data.toString(com.google.common.base.Charsets.UTF_8);
+                String channels =
+                    packetplayincustompayload.data.toString(com.google.common.base.Charsets.UTF_8);
                 for (String channel : channels.split("\0")) {
                     getPlayer().removeChannel(channel);
                 }
@@ -2668,7 +3200,8 @@ public class PlayerConnection implements PacketListenerPlayIn {
             try {
                 byte[] data = new byte[packetplayincustompayload.data.readableBytes()];
                 packetplayincustompayload.data.readBytes(data);
-                server.getMessenger().dispatchIncomingMessage(player.getBukkitEntity(), packetplayincustompayload.tag.toString(), data);
+                server.getMessenger().dispatchIncomingMessage(player.getBukkitEntity(),
+                    packetplayincustompayload.tag.toString(), data);
             } catch (Exception ex) {
                 PlayerConnection.LOGGER.error("Couldn\'t dispatch custom payload", ex);
                 this.disconnect("Invalid custom payload!");
@@ -2678,21 +3211,22 @@ public class PlayerConnection implements PacketListenerPlayIn {
     }
 
     public final boolean isDisconnected() {
-        return (!this.player.joining && !this.networkManager.isConnected()) || this.processedDisconnect; // Paper
+        return (!this.player.joining && !this.networkManager.isConnected())
+            || this.processedDisconnect; // Paper
     }
     // CraftBukkit end
 
-    @Override
-    public void a(PacketPlayInDifficultyChange packetplayindifficultychange) {
-        PlayerConnectionUtils.ensureMainThread(packetplayindifficultychange, this, this.player.getWorldServer());
+    @Override public void a(PacketPlayInDifficultyChange packetplayindifficultychange) {
+        PlayerConnectionUtils
+            .ensureMainThread(packetplayindifficultychange, this, this.player.getWorldServer());
         if (this.player.k(2) || this.isExemptPlayer()) {
             this.minecraftServer.a(packetplayindifficultychange.b(), false);
         }
     }
 
-    @Override
-    public void a(PacketPlayInDifficultyLock packetplayindifficultylock) {
-        PlayerConnectionUtils.ensureMainThread(packetplayindifficultylock, this, this.player.getWorldServer());
+    @Override public void a(PacketPlayInDifficultyLock packetplayindifficultylock) {
+        PlayerConnectionUtils
+            .ensureMainThread(packetplayindifficultylock, this, this.player.getWorldServer());
         if (this.player.k(2) || this.isExemptPlayer()) {
             this.minecraftServer.d(packetplayindifficultylock.b());
         }
diff --git a/src/main/java/net/minecraft/server/PlayerInteractManager.java b/src/main/java/net/minecraft/server/PlayerInteractManager.java
index 1b60310bb01aa0c361005ccecccf3cdccd4aa72b..7eff76d6b19044bb8b8ca950f3550c9fa8921523 100644
--- a/src/main/java/net/minecraft/server/PlayerInteractManager.java
+++ b/src/main/java/net/minecraft/server/PlayerInteractManager.java
@@ -1,16 +1,18 @@
 package net.minecraft.server;
 
-import java.util.Objects;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
-// CraftBukkit start
-import java.util.ArrayList;
 import org.bukkit.craftbukkit.block.CraftBlock;
-import org.bukkit.event.block.BlockBreakEvent;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.bukkit.event.Event;
 import org.bukkit.event.block.Action;
+import org.bukkit.event.block.BlockBreakEvent;
 import org.bukkit.event.player.PlayerInteractEvent;
+
+import java.util.ArrayList;
+import java.util.Objects;
+
+// CraftBukkit start
 // CraftBukkit end
 
 public class PlayerInteractManager {
@@ -84,7 +86,7 @@ public class PlayerInteractManager {
         IBlockData iblockdata;
 
         if (this.i) {
-            iblockdata = this.world.getType(this.j);
+            iblockdata = this.world.getType(this.j, this.player);
             if (iblockdata.isAir()) {
                 this.i = false;
             } else {
@@ -96,7 +98,7 @@ public class PlayerInteractManager {
                 }
             }
         } else if (this.e) {
-            iblockdata = this.world.getType(this.g);
+            iblockdata = this.world.getType(this.g, this.player);
             if (iblockdata.isAir()) {
                 this.world.a(this.player.getId(), this.g, -1);
                 this.l = -1;
@@ -134,9 +136,9 @@ public class PlayerInteractManager {
         double d3 = d0 * d0 + d1 * d1 + d2 * d2;
 
         if (d3 > 36.0D) {
-            this.player.playerConnection.sendPacket(new PacketPlayOutBlockBreak(blockposition, this.world.getType(blockposition), packetplayinblockdig_enumplayerdigtype, false, "too far"));
+            this.player.playerConnection.sendPacket(new PacketPlayOutBlockBreak(blockposition, this.world.getType(blockposition, this.player), packetplayinblockdig_enumplayerdigtype, false, "too far"));
         } else if (blockposition.getY() >= i) {
-            this.player.playerConnection.sendPacket(new PacketPlayOutBlockBreak(blockposition, this.world.getType(blockposition), packetplayinblockdig_enumplayerdigtype, false, "too high"));
+            this.player.playerConnection.sendPacket(new PacketPlayOutBlockBreak(blockposition, this.world.getType(blockposition, this.player), packetplayinblockdig_enumplayerdigtype, false, "too high"));
         } else {
             IBlockData iblockdata;
 
@@ -144,7 +146,7 @@ public class PlayerInteractManager {
                 if (!this.world.a((EntityHuman) this.player, blockposition)) {
                     // CraftBukkit start - fire PlayerInteractEvent
                     CraftEventFactory.callPlayerInteractEvent(this.player, Action.LEFT_CLICK_BLOCK, blockposition, enumdirection, this.player.inventory.getItemInHand(), EnumHand.MAIN_HAND);
-                    this.player.playerConnection.sendPacket(new PacketPlayOutBlockBreak(blockposition, this.world.getType(blockposition), packetplayinblockdig_enumplayerdigtype, false, "may not interact"));
+                    this.player.playerConnection.sendPacket(new PacketPlayOutBlockBreak(blockposition, this.world.getType(blockposition, this.player), packetplayinblockdig_enumplayerdigtype, false, "may not interact"));
                     // Update any tile entity data for this block
                     TileEntity tileentity = world.getTileEntity(blockposition);
                     if (tileentity != null) {
@@ -160,10 +162,10 @@ public class PlayerInteractManager {
                     // Let the client know the block still exists
                     // Paper start - brute force neighbor blocks for any attached blocks
                     for (EnumDirection dir : EnumDirection.values()) {
-                        this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(world, blockposition.shift(dir)));
+                        this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(this.player, world, blockposition.shift(dir)));
                     }
                     // Paper end
-                    this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, blockposition));
+                    this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(this.player, this.world, blockposition));
                     // Update any tile entity data for this block
                     TileEntity tileentity = this.world.getTileEntity(blockposition);
                     if (tileentity != null) {
@@ -177,14 +179,14 @@ public class PlayerInteractManager {
                     if (!this.world.douseFire((EntityHuman) null, blockposition, enumdirection)) {
                         this.a(blockposition, packetplayinblockdig_enumplayerdigtype, "creative destroy");
                     } else {
-                        this.player.playerConnection.sendPacket(new PacketPlayOutBlockBreak(blockposition, this.world.getType(blockposition), packetplayinblockdig_enumplayerdigtype, true, "fire put out"));
+                        this.player.playerConnection.sendPacket(new PacketPlayOutBlockBreak(blockposition, this.world.getType(blockposition, this.player), packetplayinblockdig_enumplayerdigtype, true, "fire put out"));
                     }
 
                     return;
                 }
 
                 if (this.player.a((World) this.world, blockposition, this.gamemode)) {
-                    this.player.playerConnection.sendPacket(new PacketPlayOutBlockBreak(blockposition, this.world.getType(blockposition), packetplayinblockdig_enumplayerdigtype, false, "block action restricted"));
+                    this.player.playerConnection.sendPacket(new PacketPlayOutBlockBreak(blockposition, this.world.getType(blockposition, this.player), packetplayinblockdig_enumplayerdigtype, false, "block action restricted"));
                     return;
                 }
 
@@ -192,18 +194,18 @@ public class PlayerInteractManager {
                 this.lastDigTick = this.currentTick; this.lastDigTime = System.nanoTime(); // Tuinity - lag compensate block breaking
                 float f = 1.0F;
 
-                iblockdata = this.world.getType(blockposition);
+                iblockdata = this.world.getType(blockposition, player);
                 // CraftBukkit start - Swings at air do *NOT* exist.
                 if (event.useInteractedBlock() == Event.Result.DENY) {
                     // If we denied a door from opening, we need to send a correcting update to the client, as it already opened the door.
-                    IBlockData data = this.world.getType(blockposition);
+                    IBlockData data = this.world.getType(blockposition, player);
                     if (data.getBlock() instanceof BlockDoor) {
                         // For some reason *BOTH* the bottom/top part have to be marked updated.
                         boolean bottom = data.get(BlockDoor.HALF) == BlockPropertyDoubleBlockHalf.LOWER;
-                        this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, blockposition));
-                        this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, bottom ? blockposition.up() : blockposition.down()));
+                        this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(this.player, this.world, blockposition));
+                        this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(this.player, this.world, bottom ? blockposition.up() : blockposition.down()));
                     } else if (data.getBlock() instanceof BlockTrapdoor) {
-                        this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, blockposition));
+                        this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(this.player, this.world, blockposition));
                     }
                 } else if (!iblockdata.isAir()) {
                     iblockdata.attack(this.world, blockposition, this.player);
@@ -215,7 +217,7 @@ public class PlayerInteractManager {
                 if (event.useItemInHand() == Event.Result.DENY) {
                     // If we 'insta destroyed' then the client needs to be informed.
                     if (f > 1.0f) {
-                        this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, blockposition));
+                        this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(this.player, this.world, blockposition));
                     }
                     return;
                 }
@@ -223,7 +225,7 @@ public class PlayerInteractManager {
 
                 if (blockEvent.isCancelled()) {
                     // Let the client know the block still exists
-                    this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, blockposition));
+                    this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(this.player, this.world, blockposition));
                     return;
                 }
 
@@ -236,7 +238,7 @@ public class PlayerInteractManager {
                     this.a(blockposition, packetplayinblockdig_enumplayerdigtype, "insta mine");
                 } else {
                     if (this.e) {
-                        this.player.playerConnection.sendPacket(new PacketPlayOutBlockBreak(this.g, this.world.getType(this.g), PacketPlayInBlockDig.EnumPlayerDigType.START_DESTROY_BLOCK, false, "abort destroying since another started (client insta mine, server disagreed)"));
+                        this.player.playerConnection.sendPacket(new PacketPlayOutBlockBreak(this.g, this.world.getType(this.g, this.player), PacketPlayInBlockDig.EnumPlayerDigType.START_DESTROY_BLOCK, false, "abort destroying since another started (client insta mine, server disagreed)"));
                     }
 
                     this.e = true;
@@ -251,7 +253,7 @@ public class PlayerInteractManager {
                 if (blockposition.equals(this.g)) {
                     int k = this.getTimeDiggingLagCompensate(); // Tuinity - lag compensate block breaking
 
-                    iblockdata = this.world.getType(blockposition);
+                    iblockdata = this.world.getType(blockposition, player);
                     if (!iblockdata.isAir()) {
                         float f1 = iblockdata.getDamage(this.player, this.player.world, blockposition) * (float) (k + 1);
 
@@ -271,13 +273,13 @@ public class PlayerInteractManager {
                     }
                 }
 
-                this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, blockposition)); // Tuinity - this can cause clients on a lagging server to think they're not currently destroying a block
+                this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(this.player, this.world, blockposition)); // Tuinity - this can cause clients on a lagging server to think they're not currently destroying a block
             } else if (packetplayinblockdig_enumplayerdigtype == PacketPlayInBlockDig.EnumPlayerDigType.ABORT_DESTROY_BLOCK) {
                 this.e = false;
                 if (!Objects.equals(this.g, blockposition)) {
                     PlayerInteractManager.LOGGER.debug("Mismatch in destroy block pos: " + this.g + " " + blockposition); // CraftBukkit - SPIGOT-5457 sent by client when interact event cancelled
                     this.world.a(this.player.getId(), this.g, -1);
-                    this.player.playerConnection.sendPacket(new PacketPlayOutBlockBreak(this.g, this.world.getType(this.g), packetplayinblockdig_enumplayerdigtype, true, "aborted mismatched destroying"));
+                    this.player.playerConnection.sendPacket(new PacketPlayOutBlockBreak(this.g, this.world.getType(this.g, this.player), packetplayinblockdig_enumplayerdigtype, true, "aborted mismatched destroying"));
                 }
 
                 this.world.a(this.player.getId(), blockposition, -1);
@@ -291,15 +293,15 @@ public class PlayerInteractManager {
 
     public void a(BlockPosition blockposition, PacketPlayInBlockDig.EnumPlayerDigType packetplayinblockdig_enumplayerdigtype, String s) {
         if (this.breakBlock(blockposition)) {
-            this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, blockposition)); // Tuinity - this can cause clients on a lagging server to think they're not currently destroying a block
+            this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(this.player, this.world, blockposition)); // Tuinity - this can cause clients on a lagging server to think they're not currently destroying a block
         } else {
-            this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, blockposition)); // CraftBukkit - SPIGOT-5196
+            this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(this.player, this.world, blockposition)); // CraftBukkit - SPIGOT-5196
         }
 
     }
 
     public boolean breakBlock(BlockPosition blockposition) {
-        IBlockData iblockdata = this.world.getType(blockposition);
+        IBlockData iblockdata = this.world.getType(blockposition, player);
         // CraftBukkit start - fire BlockBreakEvent
         org.bukkit.block.Block bblock = CraftBlock.at(world, blockposition);
         BlockBreakEvent event = null;
@@ -311,7 +313,7 @@ public class PlayerInteractManager {
             // Tell client the block is gone immediately then process events
             // Don't tell the client if its a creative sword break because its not broken!
             if (world.getTileEntity(blockposition) == null && !isSwordNoBreak) {
-                PacketPlayOutBlockChange packet = new PacketPlayOutBlockChange(this.world, blockposition);
+                PacketPlayOutBlockChange packet = new PacketPlayOutBlockChange(this.player, this.world, blockposition);
                 packet.block = Blocks.AIR.getBlockData();
                 this.player.playerConnection.sendPacket(packet);
             }
@@ -322,7 +324,7 @@ public class PlayerInteractManager {
             event.setCancelled(isSwordNoBreak);
 
             // Calculate default block experience
-            IBlockData nmsData = this.world.getType(blockposition);
+            IBlockData nmsData = this.world.getType(blockposition, player);
             Block nmsBlock = nmsData.getBlock();
 
             ItemStack itemstack = this.player.getEquipment(EnumItemSlot.MAINHAND);
@@ -338,11 +340,11 @@ public class PlayerInteractManager {
                     return false;
                 }
                 // Let the client know the block still exists
-                this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, blockposition));
+                this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(this.player, this.world, blockposition));
 
                 // Brute force all possible updates
                 for (EnumDirection dir : EnumDirection.values()) {
-                    this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(world, blockposition.shift(dir)));
+                    this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(this.player, world, blockposition.shift(dir)));
                 }
 
                 // Update any tile entity data for this block
@@ -358,7 +360,7 @@ public class PlayerInteractManager {
         if (false && !this.player.getItemInMainHand().getItem().a(iblockdata, (World) this.world, blockposition, (EntityHuman) this.player)) { // CraftBukkit - false
             return false;
         } else {
-            iblockdata = this.world.getType(blockposition); // CraftBukkit - update state from plugins
+            iblockdata = this.world.getType(blockposition, player); // CraftBukkit - update state from plugins
             if (iblockdata.isAir()) return false; // CraftBukkit - A plugin set block to air without cancelling
             TileEntity tileentity = this.world.getTileEntity(blockposition);
             Block block = iblockdata.getBlock();
@@ -453,7 +455,7 @@ public class PlayerInteractManager {
     public boolean firedInteract = false;
     public EnumInteractionResult a(EntityHuman entityhuman, World world, ItemStack itemstack, EnumHand enumhand, MovingObjectPositionBlock movingobjectpositionblock) {
         BlockPosition blockposition = movingobjectpositionblock.getBlockPosition();
-        IBlockData iblockdata = world.getType(blockposition);
+        IBlockData iblockdata = world.getType(blockposition, player);
         EnumInteractionResult enuminteractionresult = EnumInteractionResult.PASS;
         boolean cancelledBlock = false;
 
@@ -474,7 +476,7 @@ public class PlayerInteractManager {
             // If we denied a door from opening, we need to send a correcting update to the client, as it already opened the door.
             if (iblockdata.getBlock() instanceof BlockDoor) {
                 boolean bottom = iblockdata.get(BlockDoor.HALF) == BlockPropertyDoubleBlockHalf.LOWER;
-                ((EntityPlayer) entityhuman).playerConnection.sendPacket(new PacketPlayOutBlockChange(world, bottom ? blockposition.up() : blockposition.down()));
+                ((EntityPlayer) entityhuman).playerConnection.sendPacket(new PacketPlayOutBlockChange((EntityPlayer) entityhuman, world, bottom ? blockposition.up() : blockposition.down()));
             } else if (iblockdata.getBlock() instanceof BlockCake) {
                 ((EntityPlayer) entityhuman).getBukkitEntity().sendHealthUpdate(); // SPIGOT-1341 - reset health for cake
             // Paper start  - extend Player Interact cancellation // TODO: consider merging this into the extracted method
@@ -484,11 +486,11 @@ public class PlayerInteractManager {
                     ((EntityPlayer) entityhuman).playerConnection.sendPacket(new PacketPlayOutCloseWindow());
             } else if (iblockdata.getBlock() instanceof BlockFlowerPot) {
                 // Send a block change to air and then send back the correct block, just to make the client happy
-                PacketPlayOutBlockChange packet = new PacketPlayOutBlockChange(this.world, blockposition);
+                PacketPlayOutBlockChange packet = new PacketPlayOutBlockChange((EntityPlayer) entityhuman, this.world, blockposition);
                 packet.block = Blocks.AIR.getBlockData();
                 this.player.playerConnection.sendPacket(packet);
 
-                this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, blockposition));
+                this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange((EntityPlayer) entityhuman, this.world, blockposition));
 
                 TileEntity tileentity = this.world.getTileEntity(blockposition);
                 if (tileentity != null) {
diff --git a/src/main/java/net/minecraft/server/ProtoChunk.java b/src/main/java/net/minecraft/server/ProtoChunk.java
index 5a883aac14052f6637acbf4cf96236936fee98c3..d75458abe3affc0986969761e15e520e77b03c56 100644
--- a/src/main/java/net/minecraft/server/ProtoChunk.java
+++ b/src/main/java/net/minecraft/server/ProtoChunk.java
@@ -6,6 +6,10 @@ import com.google.common.collect.Sets;
 import it.unimi.dsi.fastutil.longs.LongOpenHashSet;
 import it.unimi.dsi.fastutil.longs.LongSet;
 import it.unimi.dsi.fastutil.shorts.ShortList;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+import javax.annotation.Nullable;
 import java.util.BitSet;
 import java.util.Collection;
 import java.util.Collections;
@@ -13,12 +17,9 @@ import java.util.EnumSet;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
-import java.util.Set;
 import java.util.Map.Entry;
+import java.util.Set;
 import java.util.stream.Stream;
-import javax.annotation.Nullable;
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
 
 public class ProtoChunk implements IChunkAccess {
 
@@ -106,6 +107,21 @@ public class ProtoChunk implements IChunkAccess {
 
     @Override
     public IBlockData getType(BlockPosition blockposition) {
+        // Servett Start
+        if (world instanceof World) {
+            final World world = (World) this.world;
+            synchronized (world.tickingPlayerLock) {
+                if (world.tickingPlayer != null) {
+                    final Chunk.PlayerBlockModification playerBlockModification =
+                        world.tickingPlayer.modifiedBlocks.get(blockposition.asLong());
+                    if (playerBlockModification != null) {
+                        return playerBlockModification.getModifiedBlock();
+                    }
+                }
+            }
+        }
+        // Servett End
+
         int i = blockposition.getY();
 
         if (World.b(i)) {
@@ -117,6 +133,27 @@ public class ProtoChunk implements IChunkAccess {
         }
     }
 
+    // Servett Start
+    @Override
+    public IBlockData getType(BlockPosition position, EntityPlayer tickingPlayer) {
+        final Chunk.PlayerBlockModification playerBlockModification =
+            tickingPlayer.modifiedBlocks.get(position.asLong());
+        if (playerBlockModification != null) {
+            return playerBlockModification.getModifiedBlock();
+        }
+
+        int i = position.getY();
+
+        if (World.b(i)) {
+            return Blocks.VOID_AIR.getBlockData();
+        } else {
+            ChunkSection chunksection = this.getSections()[i >> 4];
+
+            return ChunkSection.a(chunksection) ? Blocks.AIR.getBlockData() : chunksection.getType(position.getX() & 15, i & 15, position.getZ() & 15);
+        }
+    }
+    // Servett End
+
     @Override
     public Fluid getFluid(BlockPosition blockposition) {
         int i = blockposition.getY();
@@ -215,7 +252,7 @@ public class ProtoChunk implements IChunkAccess {
 
     public ChunkSection a(int i) {
         if (this.j[i] == Chunk.a) {
-            this.j[i] = new ChunkSection(i << 4, this, this.world, true); // Paper - Anti-Xray
+            this.j[i] = new ChunkSection((World) world, i << 4, this, this.world, true); // Paper - Anti-Xray
         }
 
         return this.j[i];
diff --git a/src/main/java/net/minecraft/server/RegionLimitedWorldAccess.java b/src/main/java/net/minecraft/server/RegionLimitedWorldAccess.java
index 9d0e8c2d43ba56d53bc30c0a3e2d7d170d8be474..6a7258e173557658cdf5e520c3254c60746330db 100644
--- a/src/main/java/net/minecraft/server/RegionLimitedWorldAccess.java
+++ b/src/main/java/net/minecraft/server/RegionLimitedWorldAccess.java
@@ -1,12 +1,13 @@
 package net.minecraft.server;
 
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+import javax.annotation.Nullable;
 import java.util.Collections;
 import java.util.List;
 import java.util.Random;
 import java.util.function.Predicate;
-import javax.annotation.Nullable;
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
 
 public class RegionLimitedWorldAccess implements GeneratorAccess {
 
@@ -130,9 +131,32 @@ public class RegionLimitedWorldAccess implements GeneratorAccess {
 
     @Override
     public IBlockData getType(BlockPosition blockposition) {
+        // Servett Start
+        synchronized (f.tickingPlayerLock) {
+            if (f.tickingPlayer != null) {
+                Chunk.PlayerBlockModification playerBlockModification =
+                    f.tickingPlayer.modifiedBlocks.get(blockposition.asLong());
+                if (playerBlockModification != null) {
+                    return playerBlockModification.getModifiedBlock();
+                }
+            }
+        }
+        // Servett End
         return this.getChunkAt(blockposition.getX() >> 4, blockposition.getZ() >> 4).getType(blockposition);
     }
 
+    // Servett Start
+    @Override public
+    IBlockData getType(BlockPosition position, EntityPlayer tickingPlayer) {
+        Chunk.PlayerBlockModification playerBlockModification
+            = tickingPlayer.modifiedBlocks.get(position.asLong());
+        if (playerBlockModification != null) {
+            return playerBlockModification.getModifiedBlock();
+        }
+        return this.getChunkAt(position.getX() >> 4, position.getZ() >> 4).getType(position);
+    }
+    // Servett End
+
     @Override
     public Fluid getFluid(BlockPosition blockposition) {
         return this.x(blockposition).getFluid(blockposition);
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index 2b5d0ecd0d520b28a06483f01473a7c080bef808..092644decc0808b448f1a032b16fc7d8836690ba 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -1,37 +1,34 @@
 package net.minecraft.server;
 
-import co.aikar.timings.Timing;
-import co.aikar.timings.Timings;
-import com.destroystokyo.paper.antixray.ChunkPacketBlockController; // Paper - Anti-Xray
-import com.destroystokyo.paper.antixray.ChunkPacketBlockControllerAntiXray; // Paper - Anti-Xray
+import com.destroystokyo.paper.antixray.ChunkPacketBlockController;
+import com.destroystokyo.paper.antixray.ChunkPacketBlockControllerAntiXray;
 import com.destroystokyo.paper.event.server.ServerExceptionEvent;
 import com.destroystokyo.paper.exception.ServerInternalException;
-import com.google.common.base.MoreObjects;
 import com.google.common.collect.Lists;
-import java.io.IOException;
-import java.util.Collection;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Random;
-import java.util.function.BiFunction;
-import java.util.function.Consumer;
-import java.util.function.Predicate;
-import javax.annotation.Nullable;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.apache.logging.log4j.util.Supplier;
-
-// CraftBukkit start
-import java.util.HashMap;
-import java.util.Map;
 import org.bukkit.Bukkit;
-import org.bukkit.block.BlockState;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.CraftWorld;
 import org.bukkit.craftbukkit.block.CapturedBlockState;
 import org.bukkit.craftbukkit.block.CraftBlockState;
 import org.bukkit.craftbukkit.block.data.CraftBlockData;
 import org.bukkit.event.block.BlockPhysicsEvent;
+
+import javax.annotation.Nullable;
+import java.io.IOException;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.Random;
+import java.util.function.BiFunction;
+import java.util.function.Consumer;
+import java.util.function.Predicate;
+
+// CraftBukkit start
 // CraftBukkit end
 
 public abstract class World implements GeneratorAccess, AutoCloseable {
@@ -60,6 +57,11 @@ public abstract class World implements GeneratorAccess, AutoCloseable {
     private final WorldBorder worldBorder;
     private final BiomeManager biomeManager;
 
+    // Servett Start
+    public EntityPlayer tickingPlayer;
+    public final java.lang.Object tickingPlayerLock = new Object();
+    // Servett End
+
     // CraftBukkit start Added the following
     private final CraftWorld world;
     public boolean pvpMode;
@@ -645,6 +647,18 @@ public abstract class World implements GeneratorAccess, AutoCloseable {
 
     @Override
     public IBlockData getType(BlockPosition blockposition) {
+        // Servett Start
+        synchronized (tickingPlayerLock) {
+            if (tickingPlayer != null) {
+                Chunk.PlayerBlockModification playerBlockModification =
+                    tickingPlayer.modifiedBlocks.get(blockposition.asLong());
+                if (playerBlockModification != null) {
+                    return playerBlockModification.getModifiedBlock();
+                }
+            }
+        }
+        // Servett End
+
         // CraftBukkit start - tree generation
         if (captureTreeGeneration) {
             CraftBlockState previous = capturedBlockStates.get(blockposition); // Paper
@@ -662,6 +676,32 @@ public abstract class World implements GeneratorAccess, AutoCloseable {
         }
     }
 
+    // Servett Start
+    @Override
+    public IBlockData getType(BlockPosition position, EntityPlayer tickingPlayer) {
+        Chunk.PlayerBlockModification playerBlockModification =
+            tickingPlayer.modifiedBlocks.get(position.asLong());
+        if (playerBlockModification != null) {
+            return playerBlockModification.getModifiedBlock();
+        }
+        // CraftBukkit start - tree generation
+        if (captureTreeGeneration) {
+            CraftBlockState previous = capturedBlockStates.get(position); // Paper
+            if (previous != null) {
+                return previous.getHandle();
+            }
+        }
+        // CraftBukkit end
+        if (isOutsideWorld(position)) {
+            return Blocks.VOID_AIR.getBlockData();
+        } else {
+            Chunk chunk = this.getChunkAt(position.getX() >> 4, position.getZ() >> 4);
+
+            return chunk.getType(position);
+        }
+    }
+    // Servett End
+
     @Override
     public Fluid getFluid(BlockPosition blockposition) {
         if (isOutsideWorld(blockposition)) {
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftChunk.java b/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
index 9cff8b88baea65a26aec82d51014a54a70ea31aa..ddd08b62723e72e5b48550911b9e305d2f5f28fc 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
@@ -1,10 +1,6 @@
 package org.bukkit.craftbukkit;
 
 import com.google.common.base.Preconditions;
-import java.lang.ref.WeakReference;
-import java.util.Arrays;
-import java.util.Collection;
-import net.minecraft.server.BiomeBase;
 import net.minecraft.server.BiomeStorage;
 import net.minecraft.server.BlockPosition;
 import net.minecraft.server.Blocks;
@@ -34,12 +30,16 @@ import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.entity.Entity;
 import org.bukkit.plugin.Plugin;
 
+import java.lang.ref.WeakReference;
+import java.util.Arrays;
+import java.util.Collection;
+
 public class CraftChunk implements Chunk {
     private WeakReference<net.minecraft.server.Chunk> weakChunk;
     private final WorldServer worldServer;
     private final int x;
     private final int z;
-    private static final DataPaletteBlock<IBlockData> emptyBlockIDs = new ChunkSection(0).getBlocks();
+    private static final DataPaletteBlock<IBlockData> emptyBlockIDs = new ChunkSection(null, 0).getBlocks();
     private static final byte[] emptyLight = new byte[2048];
 
     public CraftChunk(net.minecraft.server.Chunk chunk) {
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java b/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
index 78e84c3d6d5f0e1dc0490f9f6c106b84e4853f8d..187d75ce6426deb4cb6bdd8b7b1c0e8e7b9a9aab 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
@@ -1,16 +1,13 @@
 package org.bukkit.craftbukkit.block;
 
 import com.google.common.base.Preconditions;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.List;
-import java.util.stream.Collectors;
 import net.minecraft.server.AxisAlignedBB;
 import net.minecraft.server.BiomeBase;
 import net.minecraft.server.BlockPosition;
 import net.minecraft.server.BlockRedstoneWire;
 import net.minecraft.server.BlockTileEntity;
 import net.minecraft.server.Blocks;
+import net.minecraft.server.EntityPlayer;
 import net.minecraft.server.EnumDirection;
 import net.minecraft.server.EnumSkyBlock;
 import net.minecraft.server.GeneratorAccess;
@@ -35,12 +32,15 @@ import org.bukkit.block.BlockFace;
 import org.bukkit.block.BlockState;
 import org.bukkit.block.PistonMoveReaction;
 import org.bukkit.block.data.BlockData;
+import org.bukkit.craftbukkit.CraftChunk;
 import org.bukkit.craftbukkit.CraftFluidCollisionMode;
 import org.bukkit.craftbukkit.CraftWorld;
 import org.bukkit.craftbukkit.block.data.CraftBlockData;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.craftbukkit.util.CraftRayTraceResult;
+import org.bukkit.entity.Player;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.metadata.MetadataValue;
 import org.bukkit.plugin.Plugin;
@@ -49,9 +49,14 @@ import org.bukkit.util.BoundingBox;
 import org.bukkit.util.RayTraceResult;
 import org.bukkit.util.Vector;
 
+import java.util.Collection;
+import java.util.Collections;
+import java.util.List;
+import java.util.stream.Collectors;
+
 public class CraftBlock implements Block {
-    private final net.minecraft.server.GeneratorAccess world;
-    private final BlockPosition position;
+    public final net.minecraft.server.GeneratorAccess world;
+    public final BlockPosition position;
 
     public CraftBlock(GeneratorAccess world, BlockPosition position) {
         this.world = world;
@@ -712,4 +717,47 @@ public class CraftBlock implements Block {
         return new com.destroystokyo.paper.block.CraftBlockSoundGroup(getNMSBlock().getBlockData().getStepSound());
     }
     // Paper end
+
+    // Servett Start
+    @Override
+    public void setPlayerModifiedBlock(Player player, BlockData type) {
+        // Track internally
+        ((CraftChunk) getChunk()).getHandle().addPlayerModifiedBlock(
+            this.getX(),
+            this.getY(), this.getZ(),
+            ((CraftPlayer) player).getHandle(),
+            ((CraftBlockData) type).getState());
+        // Send block change
+        player.sendBlockChange(this.getLocation(), type);
+    }
+
+    @Override
+    public void removePlayerModifiedBlock(Player player) {
+        // Remove internally
+        ((CraftChunk) getChunk()).getHandle().removePlayerModifiedBlock(
+            this.getX(),
+            this.getY(),
+            this.getZ(),
+            ((CraftPlayer) player).getHandle());
+        // Send block change
+        player.sendBlockChange(this.getLocation(), getBlockData());
+    }
+
+    @Override
+    public BlockData getPlayerKnownBlock(Player player) {
+        final WorldServer worldServer = getCraftWorld().getHandle();
+        BlockData material;
+        synchronized (worldServer.tickingPlayerLock) {
+            final EntityPlayer oldPlayer = worldServer.tickingPlayer;
+            try {
+                worldServer.tickingPlayer = ((CraftPlayer) player).getHandle();
+                material = getBlockData();
+            } finally {
+                worldServer.tickingPlayer = oldPlayer;
+            }
+        }
+        return material;
+    }
+    // Servett End
+
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/EventBlock.java b/src/main/java/org/bukkit/craftbukkit/block/EventBlock.java
new file mode 100644
index 0000000000000000000000000000000000000000..9090a5d7df77ea628d4c2fddc36ca37b18da22b4
--- /dev/null
+++ b/src/main/java/org/bukkit/craftbukkit/block/EventBlock.java
@@ -0,0 +1,33 @@
+package org.bukkit.craftbukkit.block;
+
+import net.minecraft.server.BlockPosition;
+import net.minecraft.server.EntityPlayer;
+import net.minecraft.server.GeneratorAccess;
+import net.minecraft.server.IBlockData;
+import org.bukkit.Material;
+import org.bukkit.block.data.BlockData;
+import org.bukkit.craftbukkit.block.data.CraftBlockData;
+import org.bukkit.craftbukkit.util.CraftMagicNumbers;
+
+public class EventBlock extends CraftBlock {
+
+    private final EntityPlayer owner;
+
+    public EventBlock(EntityPlayer owner, GeneratorAccess world, BlockPosition position) {
+        super(world, position);
+        this.owner = owner;
+    }
+
+    @Override public BlockData getBlockData() {
+        return CraftBlockData.fromData(world.getType(position, owner));
+    }
+
+    @Override public Material getType() {
+        return CraftMagicNumbers.getMaterial(world.getType(position, owner).getBlock());
+    }
+
+    @Override public IBlockData getNMS() {
+        return world.getType(position, owner);
+    }
+
+}
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index b5ffd144139babb6619c1916ef96f4156be8669a..16ef018a03d951eb522230685fc0f1d3e7bf6a52 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -1,6 +1,5 @@
 package org.bukkit.craftbukkit.entity;
 
-import com.tuinity.tuinity.util.TickThread; // Tuinity
 import com.destroystokyo.paper.Title;
 import com.destroystokyo.paper.profile.CraftPlayerProfile;
 import com.destroystokyo.paper.profile.PlayerProfile;
@@ -8,25 +7,9 @@ import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.io.BaseEncoding;
 import com.mojang.authlib.GameProfile;
+import com.tuinity.tuinity.util.TickThread;
 import io.netty.buffer.Unpooled;
-import java.io.ByteArrayOutputStream;
-import java.io.IOException;
-import java.lang.ref.WeakReference;
-import java.net.InetSocketAddress;
-import java.net.SocketAddress;
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.LinkedHashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.UUID;
-import java.util.WeakHashMap;
-import java.util.logging.Level;
-import java.util.logging.Logger;
-import javax.annotation.Nullable;
+import net.md_5.bungee.api.chat.BaseComponent;
 import net.minecraft.server.AdvancementDataPlayer;
 import net.minecraft.server.AdvancementProgress;
 import net.minecraft.server.AttributeInstance;
@@ -122,7 +105,24 @@ import org.bukkit.plugin.Plugin;
 import org.bukkit.plugin.messaging.StandardMessenger;
 import org.bukkit.scoreboard.Scoreboard;
 
-import net.md_5.bungee.api.chat.BaseComponent; // Spigot
+import javax.annotation.Nullable;
+import java.io.ByteArrayOutputStream;
+import java.io.IOException;
+import java.lang.ref.WeakReference;
+import java.net.InetSocketAddress;
+import java.net.SocketAddress;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.LinkedHashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.UUID;
+import java.util.WeakHashMap;
+import java.util.logging.Level;
+import java.util.logging.Logger;
 
 @DelegateDeserialization(CraftOfflinePlayer.class)
 public class CraftPlayer extends CraftHumanEntity implements Player {
@@ -636,7 +636,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     public void sendBlockChange(Location loc, Material material, byte data) {
         if (getHandle().playerConnection == null) return;
 
-        PacketPlayOutBlockChange packet = new PacketPlayOutBlockChange(((CraftWorld) loc.getWorld()).getHandle(), new BlockPosition(loc.getBlockX(), loc.getBlockY(), loc.getBlockZ()));
+        PacketPlayOutBlockChange packet = new PacketPlayOutBlockChange(getHandle(), ((CraftWorld) loc.getWorld()).getHandle(), new BlockPosition(loc.getBlockX(), loc.getBlockY(), loc.getBlockZ()));
 
         packet.block = CraftMagicNumbers.getBlock(material, data);
         getHandle().playerConnection.sendPacket(packet);
@@ -646,7 +646,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     public void sendBlockChange(Location loc, BlockData block) {
         if (getHandle().playerConnection == null) return;
 
-        PacketPlayOutBlockChange packet = new PacketPlayOutBlockChange(((CraftWorld) loc.getWorld()).getHandle(), new BlockPosition(loc.getBlockX(), loc.getBlockY(), loc.getBlockZ()));
+        PacketPlayOutBlockChange packet = new PacketPlayOutBlockChange(getHandle(), ((CraftWorld) loc.getWorld()).getHandle(), new BlockPosition(loc.getBlockX(), loc.getBlockY(), loc.getBlockZ()));
 
         packet.block = ((CraftBlockData) block).getState();
         getHandle().playerConnection.sendPacket(packet);
diff --git a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
index 1f5d15bb49852053ed47a8c608ebde42f71373c1..8146ca7b131896b05eda7ff3d04b78e126245a87 100644
--- a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
+++ b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
@@ -4,13 +4,6 @@ import com.google.common.base.Function;
 import com.google.common.base.Functions;
 import com.google.common.collect.Lists;
 import com.mojang.datafixers.util.Either;
-import java.net.InetAddress;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.EnumMap;
-import java.util.List;
-import java.util.Map;
-import javax.annotation.Nullable;
 import net.minecraft.server.BlockPosition;
 import net.minecraft.server.BlockPropertyInstrument;
 import net.minecraft.server.ChatMessage;
@@ -37,9 +30,9 @@ import net.minecraft.server.EntityLiving;
 import net.minecraft.server.EntityMonster;
 import net.minecraft.server.EntityPlayer;
 import net.minecraft.server.EntityPotion;
+import net.minecraft.server.EntityRaider;
 import net.minecraft.server.EntitySheep;
 import net.minecraft.server.EntitySlime;
-import net.minecraft.server.EntityRaider;
 import net.minecraft.server.EntityTypes;
 import net.minecraft.server.EntityVillager;
 import net.minecraft.server.EntityWaterAnimal;
@@ -79,11 +72,12 @@ import org.bukkit.craftbukkit.CraftStatistic;
 import org.bukkit.craftbukkit.CraftWorld;
 import org.bukkit.craftbukkit.block.CraftBlock;
 import org.bukkit.craftbukkit.block.CraftBlockState;
+import org.bukkit.craftbukkit.block.EventBlock;
 import org.bukkit.craftbukkit.block.data.CraftBlockData;
 import org.bukkit.craftbukkit.entity.CraftEntity;
 import org.bukkit.craftbukkit.entity.CraftLivingEntity;
-import org.bukkit.craftbukkit.entity.CraftRaider;
 import org.bukkit.craftbukkit.entity.CraftPlayer;
+import org.bukkit.craftbukkit.entity.CraftRaider;
 import org.bukkit.craftbukkit.inventory.CraftInventoryCrafting;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.craftbukkit.inventory.CraftMetaBook;
@@ -112,7 +106,6 @@ import org.bukkit.entity.ThrownPotion;
 import org.bukkit.entity.Vehicle;
 import org.bukkit.entity.Villager;
 import org.bukkit.entity.Villager.Profession;
-import org.bukkit.entity.ExperienceOrb; // Paper
 import org.bukkit.event.Cancellable;
 import org.bukkit.event.Event;
 import org.bukkit.event.Event.Result;
@@ -174,6 +167,7 @@ import org.bukkit.event.entity.PlayerLeashEntityEvent;
 import org.bukkit.event.entity.PotionSplashEvent;
 import org.bukkit.event.entity.ProjectileHitEvent;
 import org.bukkit.event.entity.ProjectileLaunchEvent;
+import org.bukkit.event.entity.SpawnerSpawnEvent;
 import org.bukkit.event.entity.VillagerCareerChangeEvent;
 import org.bukkit.event.inventory.InventoryCloseEvent;
 import org.bukkit.event.inventory.InventoryOpenEvent;
@@ -194,18 +188,24 @@ import org.bukkit.event.player.PlayerLevelChangeEvent;
 import org.bukkit.event.player.PlayerRecipeDiscoverEvent;
 import org.bukkit.event.player.PlayerStatisticIncrementEvent;
 import org.bukkit.event.player.PlayerUnleashEntityEvent;
-import org.bukkit.event.server.ServerListPingEvent;
-import org.bukkit.event.vehicle.VehicleCreateEvent;
-import org.bukkit.event.raid.RaidTriggerEvent;
 import org.bukkit.event.raid.RaidFinishEvent;
-import org.bukkit.event.raid.RaidStopEvent;
 import org.bukkit.event.raid.RaidSpawnWaveEvent;
+import org.bukkit.event.raid.RaidStopEvent;
+import org.bukkit.event.raid.RaidTriggerEvent;
+import org.bukkit.event.server.ServerListPingEvent;
+import org.bukkit.event.vehicle.VehicleCreateEvent;
 import org.bukkit.inventory.EquipmentSlot;
 import org.bukkit.inventory.InventoryView;
 import org.bukkit.inventory.meta.BookMeta;
 import org.bukkit.potion.PotionEffect;
 
-import org.bukkit.event.entity.SpawnerSpawnEvent; // Spigot
+import javax.annotation.Nullable;
+import java.net.InetAddress;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.EnumMap;
+import java.util.List;
+import java.util.Map;
 
 public class CraftEventFactory {
     public static final DamageSource MELTING = CraftDamageSource.copyOf(DamageSource.BURN);
@@ -439,7 +439,7 @@ public class CraftEventFactory {
 
         Block blockClicked = null;
         if (position != null) {
-            blockClicked = craftWorld.getBlockAt(position.getX(), position.getY(), position.getZ());
+            blockClicked = new EventBlock((EntityPlayer) who, craftWorld.getHandle(), position);
         } else {
             switch (action) {
                 case LEFT_CLICK_BLOCK:
diff --git a/src/main/java/org/bukkit/craftbukkit/generator/CraftChunkData.java b/src/main/java/org/bukkit/craftbukkit/generator/CraftChunkData.java
index 969d548de2c6ba4f9df959f73d7324874101a6f6..7babb67e41a0a385c675327fb6e8b7f395bb890b 100644
--- a/src/main/java/org/bukkit/craftbukkit/generator/CraftChunkData.java
+++ b/src/main/java/org/bukkit/craftbukkit/generator/CraftChunkData.java
@@ -1,7 +1,5 @@
 package org.bukkit.craftbukkit.generator;
 
-import java.util.HashSet;
-import java.util.Set;
 import net.minecraft.server.BlockPosition;
 import net.minecraft.server.Blocks;
 import net.minecraft.server.ChunkSection;
@@ -14,6 +12,9 @@ import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.generator.ChunkGenerator;
 import org.bukkit.material.MaterialData;
 
+import java.util.HashSet;
+import java.util.Set;
+
 /**
  * Data to be used for the block types and data in a newly generated chunk.
  */
@@ -159,7 +160,8 @@ public final class CraftChunkData implements ChunkGenerator.ChunkData {
     private ChunkSection getChunkSection(int y, boolean create) {
         ChunkSection section = sections[y >> 4];
         if (create && section == null) {
-            sections[y >> 4] = section = new ChunkSection(y >> 4 << 4, null, world instanceof org.bukkit.craftbukkit.CraftWorld ? ((org.bukkit.craftbukkit.CraftWorld) world).getHandle() : null, true); // Paper - Anti-Xray
+            sections[y >> 4] = section = new ChunkSection(world instanceof org.bukkit.craftbukkit.CraftWorld ? ((org.bukkit.craftbukkit.CraftWorld) world).getHandle() : null,
+                y >> 4 << 4, null, world instanceof org.bukkit.craftbukkit.CraftWorld ? ((org.bukkit.craftbukkit.CraftWorld) world).getHandle() : null, true); // Paper - Anti-Xray
         }
         return section;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/util/DummyGeneratorAccess.java b/src/main/java/org/bukkit/craftbukkit/util/DummyGeneratorAccess.java
index d0b813008ca21fe6aa9b514ed4325596113fd459..b1fc5116af64e72d9ebd725df7c01fda1bcea5f7 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/DummyGeneratorAccess.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/DummyGeneratorAccess.java
@@ -1,8 +1,5 @@
 package org.bukkit.craftbukkit.util;
 
-import java.util.List;
-import java.util.Random;
-import java.util.function.Predicate;
 import net.minecraft.server.AxisAlignedBB;
 import net.minecraft.server.BiomeBase;
 import net.minecraft.server.BiomeManager;
@@ -12,6 +9,7 @@ import net.minecraft.server.ChunkStatus;
 import net.minecraft.server.DifficultyDamageScaler;
 import net.minecraft.server.Entity;
 import net.minecraft.server.EntityHuman;
+import net.minecraft.server.EntityPlayer;
 import net.minecraft.server.Fluid;
 import net.minecraft.server.FluidType;
 import net.minecraft.server.GeneratorAccess;
@@ -30,6 +28,10 @@ import net.minecraft.server.WorldBorder;
 import net.minecraft.server.WorldData;
 import net.minecraft.server.WorldProvider;
 
+import java.util.List;
+import java.util.Random;
+import java.util.function.Predicate;
+
 public class DummyGeneratorAccess implements GeneratorAccess {
 
     public static final GeneratorAccess INSTANCE = new DummyGeneratorAccess();
@@ -214,4 +216,11 @@ public class DummyGeneratorAccess implements GeneratorAccess {
         throw new UnsupportedOperationException("Not supported yet.");
     }
     // Paper end
+
+    // Servett Start
+    @Override public IBlockData getType(BlockPosition position, EntityPlayer tickingPlayer) {
+        return getType(position);
+    }
+    // Servett End
+
 }
-- 
2.20.1

