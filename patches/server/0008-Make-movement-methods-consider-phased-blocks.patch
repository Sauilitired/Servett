From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Alexander=20S=C3=B6derberg?= <sauilitired@gmail.com>
Date: Thu, 26 Mar 2020 16:43:18 +0100
Subject: [PATCH] Make movement methods consider phased blocks


diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index 96d091e4bf2a939e0effe047161a095d1bb073de..a8fbe3e0b8cd9b74fb74502045ddf7447a312b54 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -1,53 +1,54 @@
 package net.minecraft.server;
 
+import co.aikar.timings.MinecraftTimings;
+import co.aikar.timings.Timing;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Iterables;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Sets;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Locale;
-import java.util.Optional;
-import java.util.Random;
-import java.util.Set;
-import java.util.UUID;
-import java.util.concurrent.atomic.AtomicInteger;
-import java.util.stream.Stream;
-import javax.annotation.Nullable;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
-
-// CraftBukkit start
 import org.bukkit.Bukkit;
 import org.bukkit.Location;
 import org.bukkit.Server;
 import org.bukkit.block.BlockFace;
 import org.bukkit.command.CommandSender;
-import org.bukkit.entity.Hanging;
-import org.bukkit.entity.LivingEntity;
-import org.bukkit.entity.Vehicle;
-import co.aikar.timings.MinecraftTimings; // Paper
-import co.aikar.timings.Timing; // Paper
-import org.bukkit.event.entity.EntityCombustByEntityEvent;
-import org.bukkit.event.hanging.HangingBreakByEntityEvent;
-import org.bukkit.event.vehicle.VehicleBlockCollisionEvent;
-import org.bukkit.event.vehicle.VehicleEnterEvent;
-import org.bukkit.event.vehicle.VehicleExitEvent;
 import org.bukkit.craftbukkit.CraftWorld;
 import org.bukkit.craftbukkit.entity.CraftEntity;
 import org.bukkit.craftbukkit.entity.CraftPlayer;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.entity.Hanging;
+import org.bukkit.entity.LivingEntity;
 import org.bukkit.entity.Pose;
+import org.bukkit.entity.Vehicle;
 import org.bukkit.event.entity.EntityAirChangeEvent;
+import org.bukkit.event.entity.EntityCombustByEntityEvent;
 import org.bukkit.event.entity.EntityCombustEvent;
 import org.bukkit.event.entity.EntityDropItemEvent;
 import org.bukkit.event.entity.EntityPortalEvent;
 import org.bukkit.event.entity.EntityPoseChangeEvent;
+import org.bukkit.event.hanging.HangingBreakByEntityEvent;
 import org.bukkit.event.player.PlayerTeleportEvent;
+import org.bukkit.event.vehicle.VehicleBlockCollisionEvent;
+import org.bukkit.event.vehicle.VehicleEnterEvent;
+import org.bukkit.event.vehicle.VehicleExitEvent;
 import org.bukkit.plugin.PluginManager;
+
+import javax.annotation.Nullable;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Locale;
+import java.util.Optional;
+import java.util.Random;
+import java.util.Set;
+import java.util.UUID;
+import java.util.concurrent.atomic.AtomicInteger;
+import java.util.stream.Stream;
+
+// CraftBukkit start
 // CraftBukkit end
 
 public abstract class Entity implements INamableTileEntity, ICommandListener, KeyedObject { // Paper
@@ -743,6 +744,8 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
                 this.recalcPosition();
             }
 
+            final boolean isPlayer = this instanceof EntityPlayer;
+
             this.world.getMethodProfiler().exit();
             this.world.getMethodProfiler().enter("rest");
             this.positionChanged = !MathHelper.b(vec3d.x, vec3d1.x) || !MathHelper.b(vec3d.z, vec3d1.z);
@@ -750,7 +753,15 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
             this.onGround = this.v && vec3d.y < 0.0D;
             this.w = this.positionChanged || this.v;
             BlockPosition blockposition = this.ag();
-            IBlockData iblockdata = this.world.getType(blockposition);
+
+            // Servett Start
+            final IBlockData iblockdata;
+            if (!isPlayer) {
+                iblockdata = this.world.getType(blockposition);
+            } else {
+                iblockdata = this.world.getType(blockposition, (EntityPlayer) this);
+            }
+            // Servett End
 
             this.a(vec3d1.y, this.onGround, iblockdata, blockposition);
             Vec3D vec3d2 = this.getMot();
@@ -883,10 +894,27 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
         int k = MathHelper.floor(this.locZ);
         BlockPosition blockposition = new BlockPosition(i, j, k);
 
-        if (this.world.getType(blockposition).isAir()) {
+        // Servett Start
+        final IBlockData iBlockData;
+        if (this instanceof EntityPlayer) {
+            iBlockData = this.world.getType(blockposition, (EntityPlayer) this);
+        } else {
+            iBlockData = this.world.getType(blockposition);
+        }
+        // Servett End
+
+        if (iBlockData.isAir()) {
             BlockPosition blockposition1 = blockposition.down();
-            IBlockData iblockdata = this.world.getType(blockposition1);
-            Block block = iblockdata.getBlock();
+
+            // Servett Start
+            final IBlockData iBlockData1;
+            if (this instanceof EntityPlayer) {
+                iBlockData1 = this.world.getType(blockposition1, (EntityPlayer) this);
+            } else {
+                iBlockData1 = this.world.getType(blockposition1);
+            }
+            Block block = iBlockData1.getBlock();
+            // Servett End
 
             if (block.a(TagsBlock.FENCES) || block.a(TagsBlock.WALLS) || block instanceof BlockFenceGate) {
                 return blockposition1;
@@ -904,7 +932,16 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
     }
 
     protected float ai() {
-        Block block = this.world.getType(new BlockPosition(this)).getBlock();
+        Block block;
+
+        // Servett Start
+        if (this instanceof EntityPlayer) {
+            block = this.world.getType(new BlockPosition(this), (EntityPlayer) this).getBlock();
+        } else {
+            block = this.world.getType(new BlockPosition(this)).getBlock();
+        }
+        // Servett End
+
         float f = block.m();
 
         return block != Blocks.WATER && block != Blocks.BUBBLE_COLUMN ? ((double) f == 1.0D ? this.world.getType(this.aj()).getBlock().m() : f) : f;
@@ -1000,13 +1037,21 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
         if ((!flag || !flag1) && (!flag || !flag2) && (!flag1 || !flag2)) {
             StreamAccumulator<VoxelShape> streamaccumulator1 = new StreamAccumulator<>(Stream.concat(streamaccumulator.a(), world.b(entity, axisalignedbb.a(vec3d))));
 
-            return a(vec3d, axisalignedbb, streamaccumulator1);
+            return a(entity, vec3d, axisalignedbb, streamaccumulator1);
         } else {
-            return a(vec3d, axisalignedbb, world, voxelshapecollision, streamaccumulator);
+            return a_int(entity, vec3d, axisalignedbb, world, voxelshapecollision, streamaccumulator);
         }
     }
+    /*
+    public static Vec3D a(Entity entity, Vec3D vec3d, AxisAlignedBB axisalignedbb, IWorldReader iworldreader, VoxelShapeCollision voxelshapecollision, StreamAccumulator<VoxelShape> streamaccumulator) {
+     */
 
     public static Vec3D a(Vec3D vec3d, AxisAlignedBB axisalignedbb, StreamAccumulator<VoxelShape> streamaccumulator) {
+        return a(null, vec3d, axisalignedbb, streamaccumulator);
+    }
+
+    // Servett Start
+    public static Vec3D a(Entity entity, Vec3D vec3d, AxisAlignedBB axisalignedbb, StreamAccumulator<VoxelShape> streamaccumulator) {
         double d0 = vec3d.x;
         double d1 = vec3d.y;
         double d2 = vec3d.z;
@@ -1040,14 +1085,20 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
 
         return new Vec3D(d0, d1, d2);
     }
+    // Servett End
 
     public static Vec3D a(Vec3D vec3d, AxisAlignedBB axisalignedbb, IWorldReader iworldreader, VoxelShapeCollision voxelshapecollision, StreamAccumulator<VoxelShape> streamaccumulator) {
+        return a_int(null, vec3d, axisalignedbb, iworldreader, voxelshapecollision, streamaccumulator);
+    }
+
+    // Servett Start
+    public static Vec3D a_int(Entity entity, Vec3D vec3d, AxisAlignedBB axisalignedbb, IWorldReader iworldreader, VoxelShapeCollision voxelshapecollision, StreamAccumulator<VoxelShape> streamaccumulator) {
         double d0 = vec3d.x;
         double d1 = vec3d.y;
         double d2 = vec3d.z;
 
         if (d1 != 0.0D) {
-            d1 = VoxelShapes.a(EnumDirection.EnumAxis.Y, axisalignedbb, iworldreader, d1, voxelshapecollision, streamaccumulator.a());
+            d1 = VoxelShapes.a(entity, EnumDirection.EnumAxis.Y, axisalignedbb, iworldreader, d1, voxelshapecollision, streamaccumulator.a());
             if (d1 != 0.0D) {
                 axisalignedbb = axisalignedbb.d(0.0D, d1, 0.0D);
             }
@@ -1056,25 +1107,26 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
         boolean flag = Math.abs(d0) < Math.abs(d2);
 
         if (flag && d2 != 0.0D) {
-            d2 = VoxelShapes.a(EnumDirection.EnumAxis.Z, axisalignedbb, iworldreader, d2, voxelshapecollision, streamaccumulator.a());
+            d2 = VoxelShapes.a(entity, EnumDirection.EnumAxis.Z, axisalignedbb, iworldreader, d2, voxelshapecollision, streamaccumulator.a());
             if (d2 != 0.0D) {
                 axisalignedbb = axisalignedbb.d(0.0D, 0.0D, d2);
             }
         }
 
         if (d0 != 0.0D) {
-            d0 = VoxelShapes.a(EnumDirection.EnumAxis.X, axisalignedbb, iworldreader, d0, voxelshapecollision, streamaccumulator.a());
+            d0 = VoxelShapes.a(entity, EnumDirection.EnumAxis.X, axisalignedbb, iworldreader, d0, voxelshapecollision, streamaccumulator.a());
             if (!flag && d0 != 0.0D) {
                 axisalignedbb = axisalignedbb.d(d0, 0.0D, 0.0D);
             }
         }
 
         if (!flag && d2 != 0.0D) {
-            d2 = VoxelShapes.a(EnumDirection.EnumAxis.Z, axisalignedbb, iworldreader, d2, voxelshapecollision, streamaccumulator.a());
+            d2 = VoxelShapes.a(entity, EnumDirection.EnumAxis.Z, axisalignedbb, iworldreader, d2, voxelshapecollision, streamaccumulator.a());
         }
 
         return new Vec3D(d0, d1, d2);
     }
+    // Servett End
 
     protected float ak() {
         return (float) ((int) this.C + 1);
@@ -1100,6 +1152,8 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
     }
 
     protected void checkBlockCollisions() {
+        final boolean isPlayer = this instanceof EntityPlayer;
+
         AxisAlignedBB axisalignedbb = this.getBoundingBox();
         BlockPosition.PooledBlockPosition blockposition_pooledblockposition = BlockPosition.PooledBlockPosition.d(axisalignedbb.minX + 0.001D, axisalignedbb.minY + 0.001D, axisalignedbb.minZ + 0.001D);
         Throwable throwable = null;
@@ -1118,7 +1172,15 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
                             for (int j = blockposition_pooledblockposition.getY(); j <= blockposition_pooledblockposition1.getY(); ++j) {
                                 for (int k = blockposition_pooledblockposition.getZ(); k <= blockposition_pooledblockposition1.getZ(); ++k) {
                                     blockposition_pooledblockposition2.d(i, j, k);
-                                    IBlockData iblockdata = this.world.getType(blockposition_pooledblockposition2);
+
+                                    // Servett Start
+                                    final IBlockData iblockdata;
+                                    if (!isPlayer) {
+                                        iblockdata = this.world.getType(blockposition_pooledblockposition2);
+                                    } else {
+                                        iblockdata = this.world.getType(blockposition_pooledblockposition2, (EntityPlayer) this);
+                                    }
+                                    // Servett End
 
                                     try {
                                         iblockdata.a(this.world, blockposition_pooledblockposition2, this);
@@ -1315,7 +1377,15 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
     }
 
     private boolean l() {
-        return this.world.getType(new BlockPosition(this)).getBlock() == Blocks.BUBBLE_COLUMN;
+        // Servett Start
+        final IBlockData iBlockData;
+        if (this instanceof EntityPlayer) {
+            iBlockData = this.world.getType(new BlockPosition(this), (EntityPlayer) this);
+        } else {
+            iBlockData = this.world.getType(new BlockPosition(this));
+        }
+        // Servett End
+        return iBlockData.getBlock() == Blocks.BUBBLE_COLUMN;
     }
 
     public boolean isInWaterOrRain() {
@@ -1420,7 +1490,14 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
         int j = MathHelper.floor(this.locY() - 0.20000000298023224D);
         int k = MathHelper.floor(this.locZ());
         BlockPosition blockposition = new BlockPosition(i, j, k);
-        IBlockData iblockdata = this.world.getType(blockposition);
+        IBlockData iblockdata;
+        // Servett Start
+        if (!(this instanceof EntityPlayer)) {
+            iblockdata = this.world.getType(blockposition);
+        } else {
+            iblockdata = this.world.getType(blockposition, (EntityPlayer) this);
+        }
+        // Servett End
 
         if (iblockdata.j() != EnumRenderType.INVISIBLE) {
             Vec3D vec3d = this.getMot();
@@ -2130,7 +2207,17 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
 
                     if (blockposition_pooledblockposition.getX() != k || blockposition_pooledblockposition.getY() != j || blockposition_pooledblockposition.getZ() != l) {
                         blockposition_pooledblockposition.d(k, j, l);
-                        if (this.world.getType(blockposition_pooledblockposition).m(this.world, blockposition_pooledblockposition)) {
+
+                        // Servett Start
+                        final IBlockData iBlockData;
+                        if (this instanceof EntityPlayer) {
+                            iBlockData = this.world.getType(blockposition_pooledblockposition, (EntityPlayer) this);
+                        } else {
+                            iBlockData = this.world.getType(blockposition_pooledblockposition);
+                        }
+                        // Servett End
+
+                        if (iBlockData.m(this.world, blockposition_pooledblockposition)) {
                             boolean flag = true;
 
                             return flag;
@@ -2644,7 +2731,17 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
             EnumDirection enumdirection1 = aenumdirection[j];
 
             blockposition_mutableblockposition.g(blockposition).c(enumdirection1);
-            if (!this.world.getType(blockposition_mutableblockposition).p(this.world, blockposition_mutableblockposition)) {
+
+            // Servett Start
+            final IBlockData iBlockData;
+            if (this instanceof EntityPlayer) {
+                iBlockData = this.world.getType(blockposition_mutableblockposition, (EntityPlayer) this);
+            } else {
+                iBlockData = this.world.getType(blockposition_mutableblockposition);
+            }
+            // Servett End
+
+            if (!iBlockData.p(this.world, blockposition_mutableblockposition)) {
                 double d4 = vec3d.a(enumdirection1.m());
                 double d5 = enumdirection1.d() == EnumDirection.EnumAxisDirection.POSITIVE ? 1.0D - d4 : d4;
 
diff --git a/src/main/java/net/minecraft/server/VoxelShapes.java b/src/main/java/net/minecraft/server/VoxelShapes.java
index d5da9f582558356c128c9543aac5dac2325e6167..5b1cd112faca36a2653e3fc2a536a5a9ca9d1932 100644
--- a/src/main/java/net/minecraft/server/VoxelShapes.java
+++ b/src/main/java/net/minecraft/server/VoxelShapes.java
@@ -3,8 +3,8 @@ package net.minecraft.server;
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.math.DoubleMath;
 import com.google.common.math.IntMath;
-import it.unimi.dsi.fastutil.doubles.DoubleArrayList;
 import it.unimi.dsi.fastutil.doubles.DoubleList;
+
 import java.util.Arrays;
 import java.util.Iterator;
 import java.util.Objects;
@@ -185,10 +185,21 @@ public final class VoxelShapes {
     }
 
     public static double a(EnumDirection.EnumAxis enumdirection_enumaxis, AxisAlignedBB axisalignedbb, IWorldReader iworldreader, double d0, VoxelShapeCollision voxelshapecollision, Stream<VoxelShape> stream) {
-        return a(axisalignedbb, iworldreader, d0, voxelshapecollision, EnumAxisCycle.a(enumdirection_enumaxis, EnumDirection.EnumAxis.Z), stream);
+        return a(null, enumdirection_enumaxis, axisalignedbb, iworldreader, d0, voxelshapecollision, stream);
+    }
+
+    // Servett Start
+    public static double a(Entity entity, EnumDirection.EnumAxis enumdirection_enumaxis, AxisAlignedBB axisalignedbb, IWorldReader iworldreader, double d0, VoxelShapeCollision voxelshapecollision, Stream<VoxelShape> stream) {
+        return a(entity, axisalignedbb, iworldreader, d0, voxelshapecollision, EnumAxisCycle.a(enumdirection_enumaxis, EnumDirection.EnumAxis.Z), stream);
     }
+    // Servett End
 
     private static double a(AxisAlignedBB axisalignedbb, IWorldReader iworldreader, double d0, VoxelShapeCollision voxelshapecollision, EnumAxisCycle enumaxiscycle, Stream<VoxelShape> stream) {
+        return a(null, axisalignedbb, iworldreader, d0, voxelshapecollision, enumaxiscycle, stream);
+    }
+
+    // Servett Start
+    private static double a(Entity entity, AxisAlignedBB axisalignedbb, IWorldReader iworldreader, double d0, VoxelShapeCollision voxelshapecollision, EnumAxisCycle enumaxiscycle, Stream<VoxelShape> stream) {
         if (axisalignedbb.b() >= 1.0E-6D && axisalignedbb.c() >= 1.0E-6D && axisalignedbb.d() >= 1.0E-6D) {
             if (Math.abs(d0) < 1.0E-7D) {
                 return 0.0D;
@@ -237,7 +248,13 @@ public final class VoxelShapes {
 
                             if (k2 < 3) {
                                 blockposition_mutableblockposition.a(enumaxiscycle1, i2, j2, l1);
-                                IBlockData iblockdata = iworldreader.getType(blockposition_mutableblockposition);
+
+                                final IBlockData iblockdata;
+                                if (entity instanceof EntityPlayer) {
+                                    iblockdata = iworldreader.getType(blockposition_mutableblockposition, (EntityPlayer) entity);
+                                } else {
+                                    iblockdata = iworldreader.getType(blockposition_mutableblockposition);
+                                }
 
                                 if ((k2 != 1 || iblockdata.f()) && (k2 != 2 || iblockdata.getBlock() == Blocks.MOVING_PISTON)) {
                                     d0 = iblockdata.b((IBlockAccess) iworldreader, blockposition_mutableblockposition, voxelshapecollision).a(enumdirection_enumaxis2, axisalignedbb.d((double) (-blockposition_mutableblockposition.getX()), (double) (-blockposition_mutableblockposition.getY()), (double) (-blockposition_mutableblockposition.getZ())), d0);
@@ -265,6 +282,7 @@ public final class VoxelShapes {
             return d0;
         }
     }
+    // Servett End
 
     private static int a(double d0, double d1, double d2) {
         return d0 > 0.0D ? MathHelper.floor(d2 + d0) + 1 : MathHelper.floor(d1 + d0) - 1;
-- 
2.20.1

