From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Alexander=20S=C3=B6derberg?= <sauilitired@gmail.com>
Date: Fri, 20 Mar 2020 22:29:56 +0100
Subject: [PATCH] Fix POM


diff --git a/pom.xml b/pom.xml
index c1312f31f781eb971eb8a3691e3caeef07ec72b5..30f8734caf9b83eab221968f0a37dce034d637f9 100644
--- a/pom.xml
+++ b/pom.xml
@@ -1,7 +1,7 @@
  <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
     <modelVersion>4.0.0</modelVersion>
-    <artifactIdy>servett</artifactId>
+    <artifactId>servett</artifactId>
     <packaging>jar</packaging>
     <version>1.15.2-R0.1-SNAPSHOT</version>
     <name>Servett-Server</name>
diff --git a/src/test/java/org/bukkit/ArtTest.java b/src/test/java/org/bukkit/ArtTest.java
deleted file mode 100644
index 39e3d2150aa0da327ab8980d18e1a0d0e77ae3a9..0000000000000000000000000000000000000000
--- a/src/test/java/org/bukkit/ArtTest.java
+++ /dev/null
@@ -1,65 +0,0 @@
-package org.bukkit;
-
-import static org.hamcrest.Matchers.*;
-import static org.junit.Assert.*;
-import com.google.common.collect.Lists;
-import java.util.Collections;
-import java.util.EnumMap;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-import net.minecraft.server.IRegistry;
-import net.minecraft.server.MinecraftKey;
-import net.minecraft.server.Paintings;
-import org.bukkit.craftbukkit.CraftArt;
-import org.bukkit.support.AbstractTestingBase;
-import org.junit.Test;
-
-public class ArtTest extends AbstractTestingBase {
-    private static final int UNIT_MULTIPLIER = 16;
-
-    @Test
-    public void verifyMapping() {
-        List<Art> arts = Lists.newArrayList(Art.values());
-
-        for (MinecraftKey key : IRegistry.MOTIVE.keySet()) {
-            Paintings enumArt = IRegistry.MOTIVE.get(key);
-            String name = key.getKey();
-            int width = enumArt.getWidth() / UNIT_MULTIPLIER;
-            int height = enumArt.getHeight() / UNIT_MULTIPLIER;
-
-            Art subject = CraftArt.NotchToBukkit(enumArt);
-
-            String message = String.format("org.bukkit.Art is missing '%s'", name);
-            assertNotNull(message, subject);
-
-            assertThat(Art.getByName(name), is(subject));
-            assertThat("Art." + subject + "'s width", subject.getBlockWidth(), is(width));
-            assertThat("Art." + subject + "'s height", subject.getBlockHeight(), is(height));
-
-            arts.remove(subject);
-        }
-
-        assertThat("org.bukkit.Art has too many arts", arts, is(Collections.EMPTY_LIST));
-    }
-
-    @Test
-    public void testCraftArtToNotch() {
-        Map<Paintings, Art> cache = new HashMap<>();
-        for (Art art : Art.values()) {
-            Paintings enumArt = CraftArt.BukkitToNotch(art);
-            assertNotNull(art.name(), enumArt);
-            assertThat(art.name(), cache.put(enumArt, art), is(nullValue()));
-        }
-    }
-
-    @Test
-    public void testCraftArtToBukkit() {
-        Map<Art, Paintings> cache = new EnumMap(Art.class);
-        for (Paintings enumArt : IRegistry.MOTIVE) {
-            Art art = CraftArt.NotchToBukkit(enumArt);
-            assertNotNull("Could not CraftArt.NotchToBukkit " + enumArt, art);
-            assertThat("Duplicate artwork " + enumArt, cache.put(art, enumArt), is(nullValue()));
-        }
-    }
-}
diff --git a/src/test/java/org/bukkit/BiomeTest.java b/src/test/java/org/bukkit/BiomeTest.java
deleted file mode 100644
index 913c4cf3fc29fd6c2d47566518e4aaff936a4bdd..0000000000000000000000000000000000000000
--- a/src/test/java/org/bukkit/BiomeTest.java
+++ /dev/null
@@ -1,26 +0,0 @@
-package org.bukkit;
-
-import net.minecraft.server.BiomeBase;
-import net.minecraft.server.IRegistry;
-import org.bukkit.block.Biome;
-import org.bukkit.craftbukkit.block.CraftBlock;
-import org.bukkit.support.AbstractTestingBase;
-import org.junit.Assert;
-import org.junit.Test;
-
-public class BiomeTest extends AbstractTestingBase {
-
-    @Test
-    public void testBukkitToMinecraft() {
-        for (Biome biome : Biome.values()) {
-            Assert.assertNotNull("No NMS mapping for " + biome, CraftBlock.biomeToBiomeBase(biome));
-        }
-    }
-
-    @Test
-    public void testMinecraftToBukkit() {
-        for (Object biome : IRegistry.BIOME) {
-            Assert.assertNotNull("No Bukkit mapping for " + biome, CraftBlock.biomeBaseToBiome((BiomeBase) biome));
-        }
-    }
-}
diff --git a/src/test/java/org/bukkit/BlockDataConversionTest.java b/src/test/java/org/bukkit/BlockDataConversionTest.java
deleted file mode 100644
index 46cc26b316f0ab17f676bae98ffbd109928c85dd..0000000000000000000000000000000000000000
--- a/src/test/java/org/bukkit/BlockDataConversionTest.java
+++ /dev/null
@@ -1,38 +0,0 @@
-package org.bukkit;
-
-import java.util.ArrayList;
-import java.util.List;
-import net.minecraft.server.Block;
-import net.minecraft.server.IBlockData;
-import net.minecraft.server.IRegistry;
-import org.bukkit.craftbukkit.block.data.CraftBlockData;
-import org.bukkit.support.AbstractTestingBase;
-import org.junit.Assert;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.junit.runners.Parameterized;
-
-/**
- * This test class ensures that all Blocks (as registered in IRegistry.BLOCK)
- * can be converted into their CraftBlockData equivalent.
- */
-@RunWith(Parameterized.class)
-public class BlockDataConversionTest extends AbstractTestingBase {
-
-    @Parameterized.Parameters(name = "{index}: {0}")
-    public static List<Object[]> args() {
-        List<Object[]> list = new ArrayList<>();
-        for (Block block : (Iterable<Block>) IRegistry.BLOCK) {
-            list.add(new Object[]{block.getBlockData()});
-        }
-        return list;
-    }
-
-    @Parameterized.Parameter(0) public IBlockData data;
-
-    @Test
-    public void testNotNull() {
-        Assert.assertNotNull(data);
-        Assert.assertNotNull(CraftBlockData.fromData(data));
-    }
-}
diff --git a/src/test/java/org/bukkit/BlockDataTest.java b/src/test/java/org/bukkit/BlockDataTest.java
deleted file mode 100644
index 00b8ad356f013943396ef971641ea121babb3ffb..0000000000000000000000000000000000000000
--- a/src/test/java/org/bukkit/BlockDataTest.java
+++ /dev/null
@@ -1,172 +0,0 @@
-package org.bukkit;
-
-import static org.hamcrest.Matchers.*;
-import net.minecraft.server.BlockCake;
-import net.minecraft.server.BlockChest;
-import net.minecraft.server.Blocks;
-import net.minecraft.server.EnumDirection;
-import org.bukkit.block.BlockFace;
-import org.bukkit.block.data.BlockData;
-import org.bukkit.block.data.type.Cake;
-import org.bukkit.block.data.type.Chest;
-import org.bukkit.craftbukkit.block.data.CraftBlockData;
-import org.bukkit.support.AbstractTestingBase;
-import org.junit.Assert;
-import org.junit.Test;
-
-public class BlockDataTest extends AbstractTestingBase {
-
-    @Test
-    public void testParsing() {
-        BlockData cakeTest = CraftBlockData.fromData(Blocks.CAKE.getBlockData().set(BlockCake.BITES, 3));
-
-        BlockData materialString = CraftBlockData.newData(Material.CAKE, "[bites=3]");
-        Assert.assertThat(materialString, is(cakeTest));
-
-        BlockData combined = CraftBlockData.newData(null, "cake[bites=3]");
-        Assert.assertThat(combined, is(cakeTest));
-
-        BlockData combinedMinecraft = CraftBlockData.newData(null, "minecraft:cake[bites=3]");
-        Assert.assertThat(combinedMinecraft, is(cakeTest));
-
-        BlockData inverted = CraftBlockData.newData(null, cakeTest.getAsString());
-        Assert.assertThat(inverted, is(cakeTest));
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    public void testBadMaterial() {
-        CraftBlockData.newData(null, "invalid");
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    public void testBadSyntax() {
-        CraftBlockData.newData(null, "minecraft:cake[bites=3");
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    public void testDoubleMaterial() {
-        CraftBlockData.newData(Material.CAKE, "minecraft:cake[bites=3]");
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    public void testMistake() {
-        BlockData cakeTest = CraftBlockData.fromData(Blocks.CAKE.getBlockData().set(BlockCake.BITES, 3));
-
-        CraftBlockData.newData(Material.CAKE, cakeTest.toString());
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    public void testItem() {
-        CraftBlockData.newData(Material.DIAMOND_AXE, null);
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    public void testItemParse() {
-        CraftBlockData.newData(null, "minecraft:diamond_axe");
-    }
-
-    @Test
-    public void testClone() {
-        Cake cakeTest = (Cake) CraftBlockData.fromData(Blocks.CAKE.getBlockData().set(BlockCake.BITES, 3));
-        Cake clone = (Cake) cakeTest.clone();
-
-        Assert.assertFalse("Clone did not return new object", cakeTest == clone);
-        Assert.assertThat("Clone is not equal", clone, is(cakeTest));
-
-        clone.setBites(1);
-        Assert.assertThat("Clone is not actually clone", clone, is(not(cakeTest)));
-    }
-
-    @Test
-    public void testMerge() {
-        Chest trueTarget = (Chest) CraftBlockData.newData(null, "minecraft:chest[facing=east,waterlogged=true]");
-        Chest falseTarget = (Chest) CraftBlockData.newData(null, "minecraft:chest[facing=east,waterlogged=false]");
-        Chest waterlogged = (Chest) CraftBlockData.newData(null, "minecraft:chest[waterlogged=true]");
-
-        BlockData candidate;
-
-        Assert.assertFalse("Target and match are not yet equal", trueTarget.equals(waterlogged));
-        candidate = trueTarget.merge(waterlogged);
-        Assert.assertTrue("Target and candidate are now equal", trueTarget.equals(candidate));
-
-        Assert.assertFalse("Target and match are not yet equal", falseTarget.equals(waterlogged));
-        candidate = falseTarget.merge(waterlogged);
-        Assert.assertFalse("Target and candidate are still not equal", falseTarget.equals(candidate));
-    }
-
-    @Test
-    public void testMergeAny() {
-        Chest trueTarget = (Chest) CraftBlockData.newData(null, "minecraft:chest[facing=east,waterlogged=true]");
-        Chest falseTarget = (Chest) CraftBlockData.newData(null, "minecraft:chest[facing=east,waterlogged=false]");
-        Chest any = (Chest) CraftBlockData.newData(null, "minecraft:chest");
-
-        BlockData candidate;
-
-        Assert.assertFalse("Target and match are not yet equal", trueTarget.equals(any));
-        candidate = trueTarget.merge(any);
-        Assert.assertTrue("Target and candidate are now equal", trueTarget.equals(candidate));
-
-        Assert.assertFalse("Target and match are not yet equal", falseTarget.equals(any));
-        candidate = falseTarget.merge(any);
-        Assert.assertTrue("Target and candidate are now equal", falseTarget.equals(candidate));
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    public void testCannotMerge1() {
-        Chest one = (Chest) CraftBlockData.newData(null, "minecraft:chest[facing=east,waterlogged=true]");
-        Chest two = (Chest) CraftBlockData.fromData(Blocks.CHEST.getBlockData());
-
-        one.merge(two);
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    public void testCannotMerge2() {
-        Chest one = (Chest) CraftBlockData.newData(null, "minecraft:chest[waterlogged=true]");
-        Chest two = (Chest) CraftBlockData.newData(null, "minecraft:chest[waterlogged=true]");
-
-        one.merge(two);
-
-        two.setFacing(BlockFace.NORTH);
-        one.merge(two);
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    public void testCannotMerge3() {
-        Chest one = (Chest) CraftBlockData.newData(null, "minecraft:chest[waterlogged=true]");
-        Chest two = (Chest) CraftBlockData.newData(null, "minecraft:trapped_chest[waterlogged=true]");
-
-        one.merge(two);
-    }
-
-    @Test
-    public void testMatch() {
-        Assert.assertTrue(CraftBlockData.newData(null, "minecraft:chest[facing=east,waterlogged=true]").matches(CraftBlockData.newData(null, "minecraft:chest[waterlogged=true]")));
-        Assert.assertFalse(CraftBlockData.newData(null, "minecraft:chest[facing=east,waterlogged=false]").matches(CraftBlockData.newData(null, "minecraft:chest[waterlogged=true]")));
-        Assert.assertTrue(CraftBlockData.newData(null, "minecraft:chest[facing=east,waterlogged=true]").matches(CraftBlockData.newData(null, "minecraft:chest")));
-        Assert.assertFalse(CraftBlockData.newData(null, "minecraft:trapped_chest[facing=east,waterlogged=false]").matches(CraftBlockData.newData(null, "minecraft:chest[waterlogged=true]")));
-        Assert.assertTrue(CraftBlockData.newData(null, "minecraft:chest[facing=east,waterlogged=true]").matches(CraftBlockData.newData(null, "minecraft:chest[waterlogged=true,facing=east]")));
-
-        Chest one = (Chest) CraftBlockData.fromData(Blocks.CHEST.getBlockData().set(BlockChest.FACING, EnumDirection.EAST));
-        Chest two = (Chest) CraftBlockData.newData(null, "minecraft:chest[waterlogged=false]");
-
-        Assert.assertTrue(one.matches(two));
-        Assert.assertFalse(two.matches(one));
-    }
-
-    @Test
-    public void testGetAsString() {
-        String dataString = "minecraft:chest[facing=east,waterlogged=true]";
-        BlockData data = CraftBlockData.newData(null, dataString);
-
-        Assert.assertThat(data.getAsString(true), is(dataString));
-        Assert.assertThat(data.getAsString(false), is("minecraft:chest[facing=east,type=single,waterlogged=true]"));
-    }
-
-    @Test
-    public void testGetAsString2() {
-        Chest data = (Chest) CraftBlockData.fromData(Blocks.CHEST.getBlockData().set(BlockChest.FACING, EnumDirection.EAST));
-
-        Assert.assertThat(data.getAsString(true), is("minecraft:chest[facing=east,type=single,waterlogged=false]"));
-        Assert.assertThat(data.getAsString(false), is("minecraft:chest[facing=east,type=single,waterlogged=false]"));
-    }
-}
diff --git a/src/test/java/org/bukkit/ChatTest.java b/src/test/java/org/bukkit/ChatTest.java
deleted file mode 100644
index 11a78cf74d3f43f9ce6e82937b1f8229710c1591..0000000000000000000000000000000000000000
--- a/src/test/java/org/bukkit/ChatTest.java
+++ /dev/null
@@ -1,40 +0,0 @@
-package org.bukkit;
-
-import static org.junit.Assert.*;
-import net.minecraft.server.EnumChatFormat;
-import net.minecraft.server.IChatBaseComponent;
-import org.bukkit.craftbukkit.util.CraftChatMessage;
-import org.junit.Assert;
-import org.junit.Test;
-
-public class ChatTest {
-
-    @Test
-    public void testColors() {
-        for (ChatColor color : ChatColor.values()) {
-            Assert.assertNotNull(CraftChatMessage.getColor(color));
-            Assert.assertEquals(color, CraftChatMessage.getColor(CraftChatMessage.getColor(color)));
-        }
-
-        for (EnumChatFormat format : EnumChatFormat.values()) {
-            Assert.assertNotNull(CraftChatMessage.getColor(format));
-            Assert.assertEquals(format, CraftChatMessage.getColor(CraftChatMessage.getColor(format)));
-        }
-    }
-
-    @Test
-    public void testURLJsonConversion() {
-        IChatBaseComponent[] components;
-        components = CraftChatMessage.fromString("https://spigotmc.org/test Test Message");
-        assertEquals("{\"extra\":[{\"clickEvent\":{\"action\":\"open_url\",\"value\":\"https://spigotmc.org/test\"},\"text\":\"https://spigotmc.org/test\"},{\"text\":\" Test Message\"}],\"text\":\"\"}",
-                CraftChatMessage.toJSON(components[0]));
-
-        components = CraftChatMessage.fromString("123 " + ChatColor.GOLD + "https://spigotmc.org " + ChatColor.BOLD + "test");
-        assertEquals("{\"extra\":[{\"text\":\"123 \"},{\"color\":\"gold\",\"clickEvent\":{\"action\":\"open_url\",\"value\":\"https://spigotmc.org\"},\"text\":\"https://spigotmc.org\"},{\"color\":\"gold\",\"text\":\" \"},{\"bold\":true,\"color\":\"gold\",\"text\":\"test\"}],\"text\":\"\"}",
-                CraftChatMessage.toJSON(components[0]));
-
-        components = CraftChatMessage.fromString("multiCase http://SpigotMC.ORg/SpOngeBobMeEMeGoESHeRE");
-        assertEquals("{\"extra\":[{\"text\":\"multiCase \"},{\"clickEvent\":{\"action\":\"open_url\",\"value\":\"http://SpigotMC.ORg/SpOngeBobMeEMeGoESHeRE\"},\"text\":\"http://SpigotMC.ORg/SpOngeBobMeEMeGoESHeRE\"}],\"text\":\"\"}",
-                CraftChatMessage.toJSON(components[0]));
-    }
-}
diff --git a/src/test/java/org/bukkit/DyeColorsTest.java b/src/test/java/org/bukkit/DyeColorsTest.java
deleted file mode 100644
index 50388c34a1b81da4b0a8373e5034dcb4234bc69d..0000000000000000000000000000000000000000
--- a/src/test/java/org/bukkit/DyeColorsTest.java
+++ /dev/null
@@ -1,43 +0,0 @@
-package org.bukkit;
-
-import static org.hamcrest.Matchers.*;
-import static org.junit.Assert.*;
-import java.util.ArrayList;
-import java.util.List;
-import net.minecraft.server.EnumColor;
-import org.bukkit.support.AbstractTestingBase;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.junit.runners.Parameterized;
-import org.junit.runners.Parameterized.Parameter;
-import org.junit.runners.Parameterized.Parameters;
-
-@RunWith(Parameterized.class)
-public class DyeColorsTest extends AbstractTestingBase {
-
-    @Parameters(name= "{index}: {0}")
-    public static List<Object[]> data() {
-        List<Object[]> list = new ArrayList<Object[]>();
-        for (DyeColor dye : DyeColor.values()) {
-            list.add(new Object[] {dye});
-        }
-        return list;
-    }
-
-    @Parameter public DyeColor dye;
-
-    @Test
-    public void checkColor() {
-        Color color = dye.getColor();
-        float[] nmsColorArray = EnumColor.fromColorIndex(dye.getWoolData()).d();
-        Color nmsColor = Color.fromRGB((int) (nmsColorArray[0] * 255), (int) (nmsColorArray[1] * 255), (int) (nmsColorArray[2] * 255));
-        assertThat(color, is(nmsColor));
-    }
-
-    @Test
-    public void checkFireworkColor() {
-        Color color = dye.getFireworkColor();
-        int nmsColor = EnumColor.fromColorIndex(dye.getWoolData()).f();
-        assertThat(color, is(Color.fromRGB(nmsColor)));
-    }
-}
diff --git a/src/test/java/org/bukkit/EnchantmentTest.java b/src/test/java/org/bukkit/EnchantmentTest.java
deleted file mode 100644
index e69283b1f2170b0c02a50687a7c4c43ae6f872c3..0000000000000000000000000000000000000000
--- a/src/test/java/org/bukkit/EnchantmentTest.java
+++ /dev/null
@@ -1,25 +0,0 @@
-package org.bukkit;
-
-import net.minecraft.server.IRegistry;
-import net.minecraft.server.MinecraftKey;
-import org.bukkit.craftbukkit.util.CraftNamespacedKey;
-import org.bukkit.enchantments.Enchantment;
-import org.bukkit.support.AbstractTestingBase;
-import org.junit.Assert;
-import org.junit.Test;
-
-public class EnchantmentTest extends AbstractTestingBase {
-
-    @Test
-    public void verifyMapping() {
-        for (MinecraftKey key : IRegistry.ENCHANTMENT.keySet()) {
-            net.minecraft.server.Enchantment nms = IRegistry.ENCHANTMENT.get(key);
-
-            Enchantment bukkitById = Enchantment.getByKey(CraftNamespacedKey.fromMinecraft(key));
-
-            Assert.assertFalse("Unknown enchant name for " + key, bukkitById.getName().startsWith("UNKNOWN"));
-
-            Assert.assertNotNull("Unknown target for " + key, bukkitById.getItemTarget());
-        }
-    }
-}
diff --git a/src/test/java/org/bukkit/GameRuleTest.java b/src/test/java/org/bukkit/GameRuleTest.java
deleted file mode 100644
index ca598c58b400aacbf1c1801cf29fd7b0b7c12d63..0000000000000000000000000000000000000000
--- a/src/test/java/org/bukkit/GameRuleTest.java
+++ /dev/null
@@ -1,56 +0,0 @@
-package org.bukkit;
-
-import java.util.Map;
-import net.minecraft.server.GameRules;
-import org.bukkit.craftbukkit.CraftWorld;
-import org.junit.Assert;
-import org.junit.Test;
-
-public class GameRuleTest {
-
-    @Test
-    public void testBukkitRules() {
-        GameRule<?>[] rules = GameRule.values();
-
-        for (GameRule<?> rule : rules) {
-            GameRule<?> registeredRule = GameRule.getByName(rule.getName());
-            Assert.assertNotNull("Null GameRule", registeredRule);
-            Assert.assertEquals("Invalid GameRule equality", rule, registeredRule);
-        }
-    }
-
-    @Test
-    public void testMinecraftRules() {
-        Map<String, GameRules.GameRuleKey<?>> minecraftRules = CraftWorld.getGameRulesNMS();
-
-        for (Map.Entry<String, GameRules.GameRuleKey<?>> entry : minecraftRules.entrySet()) {
-            GameRule<?> bukkitRule = GameRule.getByName(entry.getKey());
-
-            Assert.assertNotNull("Missing " + entry.getKey(), bukkitRule);
-            Assert.assertEquals("Invalid GameRule Name", bukkitRule.getName(), entry.getKey());
-        }
-    }
-
-    @Test(expected = NullPointerException.class)
-    public void nullGameRuleName() {
-        GameRule.getByName(null);
-    }
-
-    @Test
-    public void emptyGameRuleName() {
-        Assert.assertNull(GameRule.getByName(""));
-    }
-
-    @Test
-    public void incorrectGameRuleName() {
-        Assert.assertNull(GameRule.getByName("doAnnounceAdvancements"));
-        Assert.assertNull(GameRule.getByName("sendCommandBlockFeedback"));
-    }
-
-    @Test
-    public void invalidCasing() {
-        Assert.assertNull(GameRule.getByName("CommandBlockOutput"));
-        Assert.assertNull(GameRule.getByName("spAwnRadius"));
-        Assert.assertNull(GameRule.getByName("rand0mTickSpeEd"));
-    }
-}
diff --git a/src/test/java/org/bukkit/LootTablesTest.java b/src/test/java/org/bukkit/LootTablesTest.java
deleted file mode 100644
index bb44fd7aaee0ffef6bdb8765212d45ac3dfe6e6c..0000000000000000000000000000000000000000
--- a/src/test/java/org/bukkit/LootTablesTest.java
+++ /dev/null
@@ -1,35 +0,0 @@
-package org.bukkit;
-
-import net.minecraft.server.MinecraftKey;
-import org.bukkit.craftbukkit.util.CraftNamespacedKey;
-import org.bukkit.loot.LootTable;
-import org.bukkit.loot.LootTables;
-import org.bukkit.support.AbstractTestingBase;
-import org.junit.Assert;
-import org.junit.Test;
-
-public class LootTablesTest extends AbstractTestingBase {
-
-    @Test
-    public void testLootTablesEnumExists() {
-        LootTables[] tables = LootTables.values();
-
-        for (LootTables table : tables) {
-            LootTable lootTable = Bukkit.getLootTable(table.getKey());
-
-            Assert.assertNotNull("Unknown LootTable " + table.getKey(), lootTable);
-            Assert.assertEquals(lootTable.getKey(), table.getKey());
-        }
-    }
-
-    @Test
-    public void testNMS() {
-        for (MinecraftKey key : net.minecraft.server.LootTables.a()) {
-            NamespacedKey bukkitKey = CraftNamespacedKey.fromMinecraft(key);
-            LootTables lootTable = Registry.LOOT_TABLES.get(bukkitKey);
-
-            Assert.assertNotNull("Unknown LootTable " + key, lootTable);
-            Assert.assertEquals(lootTable.getKey(), bukkitKey);
-        }
-    }
-}
diff --git a/src/test/java/org/bukkit/MaterialTest.java b/src/test/java/org/bukkit/MaterialTest.java
deleted file mode 100644
index 3b905b73afbfcbeaefc467c1f4a1b5023553697e..0000000000000000000000000000000000000000
--- a/src/test/java/org/bukkit/MaterialTest.java
+++ /dev/null
@@ -1,46 +0,0 @@
-package org.bukkit;
-
-import static org.hamcrest.Matchers.*;
-import static org.junit.Assert.*;
-import com.google.common.collect.Maps;
-import java.util.Collections;
-import java.util.Iterator;
-import java.util.Map;
-import net.minecraft.server.IRegistry;
-import net.minecraft.server.Item;
-import net.minecraft.server.MinecraftKey;
-import org.bukkit.craftbukkit.util.CraftMagicNumbers;
-import org.bukkit.support.AbstractTestingBase;
-import org.junit.Test;
-
-public class MaterialTest extends AbstractTestingBase {
-
-    @Test
-    public void verifyMapping() {
-        Map<MinecraftKey, Material> materials = Maps.newHashMap();
-        for (Material material : Material.values()) {
-            if (INVALIDATED_MATERIALS.contains(material)) {
-                continue;
-            }
-
-            materials.put(CraftMagicNumbers.key(material), material);
-        }
-
-        Iterator<Item> items = IRegistry.ITEM.iterator();
-
-        while (items.hasNext()) {
-            Item item = items.next();
-            if (item == null) continue;
-
-            MinecraftKey id = IRegistry.ITEM.getKey(item);
-            String name = item.getName();
-
-            Material material = materials.remove(id);
-
-            assertThat("Missing " + name + "(" + id + ")", material, is(not(nullValue())));
-            assertNotNull("No item mapping for " + name, CraftMagicNumbers.getMaterial(item));
-        }
-
-        assertThat(materials, is(Collections.EMPTY_MAP));
-    }
-}
diff --git a/src/test/java/org/bukkit/NibbleArrayTest.java b/src/test/java/org/bukkit/NibbleArrayTest.java
deleted file mode 100644
index 40ba97fb77dddafe7c792249ca343d5abee3e5d0..0000000000000000000000000000000000000000
--- a/src/test/java/org/bukkit/NibbleArrayTest.java
+++ /dev/null
@@ -1,29 +0,0 @@
-package org.bukkit;
-
-import java.util.Random;
-import net.minecraft.server.NibbleArray;
-import org.junit.Assert;
-import org.junit.Test;
-
-public class NibbleArrayTest {
-
-    private static final int NIBBLE_SIZE = 4096;
-
-    @Test
-    public void testNibble() {
-        Random random = new Random();
-        byte[] classic = new byte[NIBBLE_SIZE];
-        NibbleArray nibble = new NibbleArray();
-
-        for (int i = 0; i < classic.length; i++) {
-            byte number = (byte) (random.nextInt() & 0xF);
-
-            classic[i] = number;
-            nibble.a(i, number);
-        }
-
-        for (int i = 0; i < classic.length; i++) {
-            Assert.assertEquals("Nibble array mismatch", classic[i], nibble.b(i));
-        }
-    }
-}
diff --git a/src/test/java/org/bukkit/ParticleTest.java b/src/test/java/org/bukkit/ParticleTest.java
deleted file mode 100644
index 33701c812b303ab95fdf468504ae7aa5b7054505..0000000000000000000000000000000000000000
--- a/src/test/java/org/bukkit/ParticleTest.java
+++ /dev/null
@@ -1,35 +0,0 @@
-package org.bukkit;
-
-import net.minecraft.server.IRegistry;
-import org.bukkit.block.data.BlockData;
-import org.bukkit.craftbukkit.CraftParticle;
-import org.bukkit.craftbukkit.block.data.CraftBlockData;
-import org.bukkit.inventory.ItemStack;
-import org.bukkit.material.MaterialData;
-import org.bukkit.support.AbstractTestingBase;
-import org.junit.Assert;
-import org.junit.Test;
-
-public class ParticleTest extends AbstractTestingBase {
-
-    @Test
-    public void verifyMapping() {
-        for (Particle bukkit : Particle.values()) {
-            Object data = null;
-            if (bukkit.getDataType().equals(ItemStack.class)) {
-                data = new ItemStack(Material.STONE);
-            } else if (bukkit.getDataType() == MaterialData.class) {
-                data = new MaterialData(Material.LEGACY_STONE);
-            } else if (bukkit.getDataType() == Particle.DustOptions.class) {
-                data = new Particle.DustOptions(Color.BLACK, 0);
-            } else if (bukkit.getDataType() == BlockData.class) {
-                data = CraftBlockData.newData(Material.STONE, "");
-            }
-
-            Assert.assertNotNull("Missing Bukkit->NMS particle mapping for " + bukkit, CraftParticle.toNMS(bukkit, data));
-        }
-        for (net.minecraft.server.Particle nms : IRegistry.PARTICLE_TYPE) {
-            Assert.assertNotNull("Missing NMS->Bukkit particle mapping for " + IRegistry.PARTICLE_TYPE.getKey(nms), CraftParticle.toBukkit(nms));
-        }
-    }
-}
diff --git a/src/test/java/org/bukkit/PerMaterialTest.java b/src/test/java/org/bukkit/PerMaterialTest.java
deleted file mode 100644
index ba289fae8aa8ffe5af3223a27c23437422ebd03e..0000000000000000000000000000000000000000
--- a/src/test/java/org/bukkit/PerMaterialTest.java
+++ /dev/null
@@ -1,248 +0,0 @@
-package org.bukkit;
-
-import static org.hamcrest.Matchers.*;
-import static org.junit.Assert.*;
-import com.google.common.collect.Lists;
-import java.util.List;
-import java.util.Map;
-import net.minecraft.server.Block;
-import net.minecraft.server.BlockAccessAir;
-import net.minecraft.server.BlockFalling;
-import net.minecraft.server.BlockFire;
-import net.minecraft.server.BlockPosition;
-import net.minecraft.server.Blocks;
-import net.minecraft.server.EntityHuman;
-import net.minecraft.server.EnumHand;
-import net.minecraft.server.IBlockData;
-import net.minecraft.server.Item;
-import net.minecraft.server.ItemRecord;
-import net.minecraft.server.MovingObjectPositionBlock;
-import net.minecraft.server.TileEntityFurnace;
-import org.bukkit.craftbukkit.inventory.CraftItemStack;
-import org.bukkit.craftbukkit.util.CraftMagicNumbers;
-import org.bukkit.enchantments.EnchantmentTarget;
-import org.bukkit.inventory.ItemStack;
-import org.bukkit.support.AbstractTestingBase;
-import org.bukkit.support.Util;
-import org.junit.BeforeClass;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.junit.runners.Parameterized;
-import org.junit.runners.Parameterized.Parameter;
-import org.junit.runners.Parameterized.Parameters;
-
-@RunWith(Parameterized.class)
-public class PerMaterialTest extends AbstractTestingBase {
-    private static Map<Block, Integer> fireValues;
-
-    @BeforeClass
-    public static void getFireValues() {
-        fireValues = Util.getInternalState(BlockFire.class, Blocks.FIRE, "flameChances");
-    }
-
-    @Parameters(name= "{index}: {0}")
-    public static List<Object[]> data() {
-        List<Object[]> list = Lists.newArrayList();
-        for (Material material : Material.values()) {
-            if (!material.isLegacy()) {
-                list.add(new Object[] {material});
-            }
-        }
-        return list;
-    }
-
-    @Parameter public Material material;
-
-    @Test
-    public void isBlock() {
-        if (material != Material.AIR && material != Material.CAVE_AIR && material != Material.VOID_AIR) {
-            assertThat(material.isBlock(), is(not(CraftMagicNumbers.getBlock(material) == null)));
-        }
-    }
-
-    @Test
-    public void isSolid() {
-        if (material == Material.AIR) {
-            assertFalse(material.isSolid());
-        } else if (material.isBlock()) {
-            assertThat(material.isSolid(), is(CraftMagicNumbers.getBlock(material).getBlockData().getMaterial().isSolid()));
-        } else {
-            assertFalse(material.isSolid());
-        }
-    }
-
-    @Test
-    public void isEdible() {
-        if (material.isBlock()) {
-            assertFalse(material.isEdible());
-        } else {
-            assertThat(material.isEdible(), is(CraftMagicNumbers.getItem(material).isFood()));
-        }
-    }
-
-    @Test
-    public void isRecord() {
-        assertThat(material.isRecord(), is(CraftMagicNumbers.getItem(material) instanceof ItemRecord));
-    }
-
-    @Test
-    public void maxDurability() {
-        if (INVALIDATED_MATERIALS.contains(material)) return;
-
-        if (material == Material.AIR) {
-            assertThat((int) material.getMaxDurability(), is(0));
-        } else if (material.isBlock()){
-            Item item = CraftMagicNumbers.getItem(material);
-            assertThat((int) material.getMaxDurability(), is(item.getMaxDurability()));
-        }
-    }
-
-    @Test
-    public void maxStackSize() {
-        if (INVALIDATED_MATERIALS.contains(material)) return;
-
-        final ItemStack bukkit = new ItemStack(material);
-        final CraftItemStack craft = CraftItemStack.asCraftCopy(bukkit);
-        if (material == Material.AIR) {
-            final int MAX_AIR_STACK = 0 /* Why can't I hold all of these AIR? */;
-            assertThat(material.getMaxStackSize(), is(MAX_AIR_STACK));
-            assertThat(bukkit.getMaxStackSize(), is(MAX_AIR_STACK));
-            assertThat(craft.getMaxStackSize(), is(MAX_AIR_STACK));
-        } else {
-            assertThat(material.getMaxStackSize(), is(CraftMagicNumbers.getItem(material).getMaxStackSize()));
-            assertThat(bukkit.getMaxStackSize(), is(material.getMaxStackSize()));
-            assertThat(craft.getMaxStackSize(), is(material.getMaxStackSize()));
-        }
-    }
-
-    @Test
-    public void isTransparent() {
-        if (material == Material.AIR) {
-            assertTrue(material.isTransparent());
-        } else if (material.isBlock()) {
-            // assertThat(material.isTransparent(), is(not(CraftMagicNumbers.getBlock(material).getBlockData().getMaterial().blocksLight()))); // PAIL: not unit testable anymore (17w50a)
-        } else {
-            assertFalse(material.isTransparent());
-        }
-    }
-
-    @Test
-    public void isFlammable() {
-        if (material != Material.AIR && material.isBlock()) {
-            assertThat(material.isFlammable(), is(CraftMagicNumbers.getBlock(material).getBlockData().getMaterial().isBurnable()));
-        } else {
-            assertFalse(material.isFlammable());
-        }
-    }
-
-    @Test
-    public void isBurnable() {
-        if (material.isBlock()) {
-            Block block = CraftMagicNumbers.getBlock(material);
-            assertThat(material.isBurnable(), is(fireValues.containsKey(block) && fireValues.get(block) > 0));
-        } else {
-            assertFalse(material.isBurnable());
-        }
-    }
-
-    @Test
-    public void isFuel() {
-        assertThat(material.isFuel(), is(TileEntityFurnace.isFuel(new net.minecraft.server.ItemStack(CraftMagicNumbers.getItem(material)))));
-    }
-
-    @Test
-    public void isOccluding() {
-        if (material.isBlock()) {
-            assertThat(material.isOccluding(), is(CraftMagicNumbers.getBlock(material).isOccluding(CraftMagicNumbers.getBlock(material).getBlockData(), BlockAccessAir.INSTANCE, BlockPosition.ZERO)));
-        } else {
-            assertFalse(material.isOccluding());
-        }
-    }
-
-    @Test
-    public void hasGravity() {
-        if (material.isBlock()) {
-            assertThat(material.hasGravity(), is(CraftMagicNumbers.getBlock(material) instanceof BlockFalling));
-        } else {
-            assertFalse(material.hasGravity());
-        }
-    }
-
-    @Test
-    public void usesDurability() {
-        if (!material.isBlock()) {
-            assertThat(EnchantmentTarget.BREAKABLE.includes(material), is(CraftMagicNumbers.getItem(material).usesDurability()));
-        } else {
-            assertFalse(EnchantmentTarget.BREAKABLE.includes(material));
-        }
-    }
-
-    @Test
-    public void testDurability() {
-        if (!material.isBlock()) {
-            assertThat(material.getMaxDurability(), is((short) CraftMagicNumbers.getItem(material).getMaxDurability()));
-        } else {
-            assertThat(material.getMaxDurability(), is((short) 0));
-        }
-    }
-
-    @Test
-    public void testBlock() {
-        if (material == Material.AIR) {
-            assertTrue(material.isBlock());
-        } else {
-            assertThat(material.isBlock(), is(equalTo(CraftMagicNumbers.getBlock(material) != null)));
-        }
-    }
-
-    @Test
-    public void testAir() {
-        if (material.isBlock()) {
-            assertThat(material.isAir(), is(equalTo(CraftMagicNumbers.getBlock(material).getBlockData().isAir())));
-        } else {
-            assertThat(material.isAir(), is(equalTo(false)));
-        }
-    }
-
-    @Test
-    public void testItem() {
-        if (material == Material.AIR) {
-            assertTrue(material.isItem());
-        } else {
-            assertThat(material.isItem(), is(equalTo(CraftMagicNumbers.getItem(material) != null)));
-        }
-    }
-
-    @Test
-    public void testInteractable() throws ReflectiveOperationException {
-        if (material.isBlock()) {
-            assertThat(material.isInteractable(),
-                    is(!CraftMagicNumbers.getBlock(material).getClass()
-                            .getMethod("interact", IBlockData.class, net.minecraft.server.World.class, BlockPosition.class, EntityHuman.class, EnumHand.class, MovingObjectPositionBlock.class)
-                            .getDeclaringClass().equals(Block.class)));
-        } else {
-            assertFalse(material.isInteractable());
-        }
-    }
-
-    @Test
-    public void testBlockHardness() {
-        if (material.isBlock()) {
-            assertThat(material.getHardness(), is(CraftMagicNumbers.getBlock(material).strength));
-        }
-    }
-
-    @Test
-    public void testBlastResistance() {
-        if (material.isBlock()) {
-            assertThat(material.getBlastResistance(), is(CraftMagicNumbers.getBlock(material).getDurability()));
-        }
-    }
-
-    @Test
-    public void testBlockDataCreation() {
-        if (material.isBlock()) {
-            assertNotNull(material.createBlockData());
-        }
-    }
-}
diff --git a/src/test/java/org/bukkit/SoundTest.java b/src/test/java/org/bukkit/SoundTest.java
deleted file mode 100644
index f8e87443438eadd7d95da05027c2bb78114f9c47..0000000000000000000000000000000000000000
--- a/src/test/java/org/bukkit/SoundTest.java
+++ /dev/null
@@ -1,40 +0,0 @@
-package org.bukkit;
-
-import static org.hamcrest.Matchers.*;
-import static org.junit.Assert.*;
-import net.minecraft.server.IRegistry;
-import net.minecraft.server.MinecraftKey;
-import org.bukkit.craftbukkit.CraftSound;
-import org.bukkit.support.AbstractTestingBase;
-import org.junit.Test;
-
-public class SoundTest extends AbstractTestingBase {
-
-    @Test
-    public void testGetSound() {
-        for (Sound sound : Sound.values()) {
-            assertThat(sound.name(), CraftSound.getSound(sound), is(not(nullValue())));
-        }
-    }
-
-    @Test
-    public void testReverse() {
-        for (MinecraftKey effect : IRegistry.SOUND_EVENT.keySet()) {
-            assertNotNull(effect + "", Sound.valueOf(effect.getKey().replace('.', '_').toUpperCase(java.util.Locale.ENGLISH)));
-        }
-    }
-
-    @Test
-    public void testCategory() {
-        for (SoundCategory category : SoundCategory.values()) {
-            assertNotNull(category + "", net.minecraft.server.SoundCategory.valueOf(category.name()));
-        }
-    }
-
-    @Test
-    public void testCategoryReverse() {
-        for (net.minecraft.server.SoundCategory category : net.minecraft.server.SoundCategory.values()) {
-            assertNotNull(category + "", SoundCategory.valueOf(category.name()));
-        }
-    }
-}
diff --git a/src/test/java/org/bukkit/StatisticsAndAchievementsTest.java b/src/test/java/org/bukkit/StatisticsAndAchievementsTest.java
deleted file mode 100644
index f45fa3fd632a7bcea7ef51b26d6ae5e3fb67fc6f..0000000000000000000000000000000000000000
--- a/src/test/java/org/bukkit/StatisticsAndAchievementsTest.java
+++ /dev/null
@@ -1,57 +0,0 @@
-package org.bukkit;
-
-import static org.hamcrest.Matchers.*;
-import static org.junit.Assert.*;
-import com.google.common.collect.HashMultiset;
-import net.minecraft.server.EntityTypes;
-import net.minecraft.server.IRegistry;
-import net.minecraft.server.StatisticWrapper;
-import org.bukkit.craftbukkit.CraftStatistic;
-import org.bukkit.entity.EntityType;
-import org.bukkit.support.AbstractTestingBase;
-import org.junit.Test;
-
-public class StatisticsAndAchievementsTest extends AbstractTestingBase {
-
-    @Test
-    @SuppressWarnings("unchecked")
-    public void verifyEntityMapping() throws Throwable {
-        for (Statistic statistic : Statistic.values()) {
-            if (statistic.getType() == Statistic.Type.ENTITY) {
-                for (EntityType entity : EntityType.values()) {
-                    if (entity.getName() != null) {
-                        assertNotNull(statistic + " missing for " + entity, CraftStatistic.getEntityStatistic(statistic, entity));
-                    }
-                }
-            }
-        }
-    }
-
-    @Test
-    @SuppressWarnings("unchecked")
-    public void verifyStatisticMapping() throws Throwable {
-        HashMultiset<Statistic> statistics = HashMultiset.create();
-        for (StatisticWrapper wrapper : IRegistry.STATS) {
-            for (Object child : wrapper.getRegistry()) {
-                net.minecraft.server.Statistic<?> statistic = wrapper.b(child);
-                String message = String.format("org.bukkit.Statistic is missing: '%s'", statistic);
-
-                Statistic subject = CraftStatistic.getBukkitStatistic(statistic);
-                assertThat(message, subject, is(not(nullValue())));
-
-                if (wrapper.getRegistry() == IRegistry.BLOCK || wrapper.getRegistry() == IRegistry.ITEM) {
-                    assertNotNull("Material type map missing for " + wrapper.getRegistry().getKey(child), CraftStatistic.getMaterialFromStatistic(statistic));
-                } else if (wrapper.getRegistry() == IRegistry.ENTITY_TYPE) {
-                    assertNotNull("Entity type map missing for " + EntityTypes.getName((EntityTypes<?>) child), CraftStatistic.getEntityTypeFromStatistic((net.minecraft.server.Statistic<EntityTypes<?>>) statistic));
-                }
-
-                statistics.add(subject);
-            }
-        }
-
-        for (Statistic statistic : Statistic.values()) {
-            String message = String.format("org.bukkit.Statistic.%s does not have a corresponding minecraft statistic", statistic.name());
-            assertThat(message, statistics.remove(statistic, statistics.count(statistic)), is(greaterThan(0)));
-        }
-    }
-}
diff --git a/src/test/java/org/bukkit/StructureTypeTest.java b/src/test/java/org/bukkit/StructureTypeTest.java
deleted file mode 100644
index f25e13c08ac20da2e1fcc817cadd3a86c411915c..0000000000000000000000000000000000000000
--- a/src/test/java/org/bukkit/StructureTypeTest.java
+++ /dev/null
@@ -1,46 +0,0 @@
-package org.bukkit;
-
-import java.util.Map;
-import net.minecraft.server.IRegistry;
-import net.minecraft.server.MinecraftKey;
-import org.bukkit.support.AbstractTestingBase;
-import org.junit.Assert;
-import org.junit.BeforeClass;
-import org.junit.Test;
-
-/**
- * This test makes sure that Bukkit always has Minecraft structure types up to
- * date.
- */
-public class StructureTypeTest extends AbstractTestingBase {
-
-    private static Map<String, StructureType> structures;
-
-    @BeforeClass
-    public static void setUp() {
-        structures = StructureType.getStructureTypes();
-    }
-
-    @Test
-    public void testMinecraftToBukkit() {
-        for (MinecraftKey key : IRegistry.STRUCTURE_FEATURE.keySet()) {
-            Assert.assertNotNull(key.getKey(), structures.get(key.getKey()));
-        }
-    }
-
-    @Test
-    public void testBukkit() {
-        for (Map.Entry<String, StructureType> entry : structures.entrySet()) {
-            Assert.assertNotNull(entry.getKey(), StructureType.getStructureTypes().get(entry.getKey()));
-            Assert.assertNotNull(entry.getValue().getName(), StructureType.getStructureTypes().get(entry.getValue().getName()));
-        }
-    }
-
-    @Test
-    public void testBukkitToMinecraft() {
-        for (Map.Entry<String, StructureType> entry : structures.entrySet()) {
-            Assert.assertNotNull(entry.getKey(), IRegistry.STRUCTURE_FEATURE.get(new MinecraftKey(entry.getKey())));
-            Assert.assertNotNull(entry.getValue().getName(), IRegistry.STRUCTURE_FEATURE.get(new MinecraftKey(entry.getValue().getName())));
-        }
-    }
-}
diff --git a/src/test/java/org/bukkit/WorldTypeTest.java b/src/test/java/org/bukkit/WorldTypeTest.java
deleted file mode 100644
index f71d6b8231b825134b7812153073993a5b5fa1bf..0000000000000000000000000000000000000000
--- a/src/test/java/org/bukkit/WorldTypeTest.java
+++ /dev/null
@@ -1,18 +0,0 @@
-package org.bukkit;
-
-import static org.hamcrest.Matchers.*;
-import static org.junit.Assert.*;
-import net.minecraft.server.WorldType;
-import org.junit.Test;
-
-public class WorldTypeTest {
-    @Test
-    public void testTypes() {
-        for (WorldType type : WorldType.types) {
-            if (type == null) continue;
-            if (type == WorldType.DEBUG_ALL_BLOCK_STATES) continue; // Doesn't work anyway
-
-            assertThat(type.name() + " has no Bukkit world", org.bukkit.WorldType.getByName(type.name()), is(not(nullValue())));
-        }
-    }
-}
diff --git a/src/test/java/org/bukkit/block/banner/PatternTypeTest.java b/src/test/java/org/bukkit/block/banner/PatternTypeTest.java
deleted file mode 100644
index 489d46c950b8617ac2425ec58087ec06937f3eba..0000000000000000000000000000000000000000
--- a/src/test/java/org/bukkit/block/banner/PatternTypeTest.java
+++ /dev/null
@@ -1,33 +0,0 @@
-package org.bukkit.block.banner;
-
-import junit.framework.Assert;
-import net.minecraft.server.EnumBannerPatternType;
-import org.bukkit.support.AbstractTestingBase;
-import org.junit.Test;
-
-public class PatternTypeTest extends AbstractTestingBase {
-
-    @Test
-    public void testToBukkit() {
-        for (EnumBannerPatternType nms : EnumBannerPatternType.values()) {
-            PatternType bukkit = PatternType.getByIdentifier(nms.b());
-
-            Assert.assertNotNull("No Bukkit banner for " + nms + " " + nms.b(), bukkit);
-        }
-    }
-
-    @Test
-    public void testToNMS() {
-        for (PatternType bukkit : PatternType.values()) {
-            EnumBannerPatternType found = null;
-            for (EnumBannerPatternType nms : EnumBannerPatternType.values()) {
-                if (bukkit.getIdentifier().equals(nms.b())) {
-                    found = nms;
-                    break;
-                }
-            }
-
-            Assert.assertNotNull("No NMS banner for " + bukkit + " " + bukkit.getIdentifier(), found);
-        }
-    }
-}
diff --git a/src/test/java/org/bukkit/craftbukkit/HeightMapTest.java b/src/test/java/org/bukkit/craftbukkit/HeightMapTest.java
deleted file mode 100644
index 6db64c52927255898cee64358daa328b627528c0..0000000000000000000000000000000000000000
--- a/src/test/java/org/bukkit/craftbukkit/HeightMapTest.java
+++ /dev/null
@@ -1,22 +0,0 @@
-package org.bukkit.craftbukkit;
-
-import org.bukkit.HeightMap;
-import org.junit.Assert;
-import org.junit.Test;
-
-public class HeightMapTest {
-
-    @Test
-    public void heightMapConversionFromNMSToBukkitShouldNotThrowExceptio() {
-        for (net.minecraft.server.HeightMap.Type nmsHeightMapType : net.minecraft.server.HeightMap.Type.values()) {
-            Assert.assertNotNull("fromNMS", CraftHeightMap.fromNMS(nmsHeightMapType));
-        }
-    }
-
-    @Test
-    public void heightMapConversionFromBukkitToNMSShouldNotThrowExceptio() {
-        for (HeightMap bukkitHeightMap : HeightMap.values()) {
-            Assert.assertNotNull("toNMS", CraftHeightMap.toNMS(bukkitHeightMap));
-        }
-    }
-}
diff --git a/src/test/java/org/bukkit/craftbukkit/generator/ChunkDataTest.java b/src/test/java/org/bukkit/craftbukkit/generator/ChunkDataTest.java
deleted file mode 100644
index b59b28aa9c3824d352b89394eb3a506a11a0dff6..0000000000000000000000000000000000000000
--- a/src/test/java/org/bukkit/craftbukkit/generator/ChunkDataTest.java
+++ /dev/null
@@ -1,81 +0,0 @@
-package org.bukkit.craftbukkit.generator;
-
-import static org.junit.Assert.*;
-import org.bukkit.Material;
-import org.bukkit.block.data.BlockData;
-import org.bukkit.support.AbstractTestingBase;
-import org.junit.Test;
-
-public class ChunkDataTest extends AbstractTestingBase {
-
-    private static final BlockData RED_WOOL = Material.RED_WOOL.createBlockData();
-    private static final BlockData AIR = Material.AIR.createBlockData();
-
-    private boolean testSetBlock(CraftChunkData data, int x, int y, int z, BlockData type, BlockData expected) {
-        data.setBlock(x, y, z, type);
-        return expected.equals(data.getBlockData(x, y, z)) && expected.getMaterial().equals(data.getType(x, y, z));
-    }
-
-    private void testSetRegion(CraftChunkData data, int minx, int miny, int minz, int maxx, int maxy, int maxz, BlockData type) {
-        data.setRegion(minx, miny, minz, maxx, maxy, maxz, type);
-        for (int y = 0; y < data.getMaxHeight(); y++) {
-            for (int z = 0; z < 16; z++) {
-                for (int x = 0; x < 16; x++) {
-                    boolean inRegion = miny <= y && y < maxy && minx <= x && x < maxx && minz <= z && z < maxz;
-                    if (inRegion != type.equals(data.getBlockData(x, y, z))) {
-                        throw new IllegalStateException(
-                                "setRegion(" + minx + ", " + miny + ", " + minz + ", " + maxx + ", " + maxy + ", " + maxz + ", " + type + ")"
-                                + "-> block at " + x + ", " + y + ", " + z + " is " + data.getBlockData(x, y, z));
-                    }
-                }
-            }
-        }
-    }
-
-    @Test
-    public void testMaxHeight() {
-        CraftChunkData data = new CraftChunkData(128);
-        assertTrue("Could not set block above max height", testSetBlock(data, 0, 128, 0, RED_WOOL, AIR));
-        assertTrue("Could set block below max height", testSetBlock(data, 0, 127, 0, RED_WOOL, RED_WOOL));
-    }
-
-    @Test
-    public void testBoundsCheckingSingle() {
-        CraftChunkData data = new CraftChunkData(256);
-        assertTrue("Can set block inside chunk bounds", testSetBlock(data, 0, 0, 0, RED_WOOL, RED_WOOL));
-        assertTrue("Can set block inside chunk bounds", testSetBlock(data, 15, 255, 15, RED_WOOL, RED_WOOL));
-        assertTrue("Can no set block outside chunk bounds", testSetBlock(data, -1, 0, 0, RED_WOOL, AIR));
-        assertTrue("Can no set block outside chunk bounds", testSetBlock(data, 0, -1, 0, RED_WOOL, AIR));
-        assertTrue("Can no set block outside chunk bounds", testSetBlock(data, 0, 0, -1, RED_WOOL, AIR));
-        assertTrue("Can no set block outside chunk bounds", testSetBlock(data, 16, 0, 0, RED_WOOL, AIR));
-        assertTrue("Can no set block outside chunk bounds", testSetBlock(data, 0, 256, 0, RED_WOOL, AIR));
-        assertTrue("Can no set block outside chunk bounds", testSetBlock(data, 0, 0, 16, RED_WOOL, AIR));
-    }
-
-    @Test
-    public void testSetRegion() {
-        CraftChunkData data = new CraftChunkData(256);
-        testSetRegion(data, -100, 0, -100, 0, 256, 0, RED_WOOL); // exclusively outside
-        testSetRegion(data, 16, 256, 16, 0, 0, 0, RED_WOOL); // minimum >= maximum
-        testSetRegion(data, 0, 0, 0, 0, 0, 0, RED_WOOL); // minimum == maximum
-        testSetRegion(data, 0, 0, 0, 16, 16, 16, RED_WOOL); // Whole Chunk Section
-        data.setRegion(0, 0, 0, 16, 256, 16, AIR);
-        testSetRegion(data, 0, 8, 0, 16, 24, 16, RED_WOOL); // Start middle of this section, end middle of next
-        data.setRegion(0, 0, 0, 16, 256, 16, AIR);
-        testSetRegion(data, 0, 4, 0, 16, 12, 16, RED_WOOL); // Start in this section, end in this section
-        data.setRegion(0, 0, 0, 16, 256, 16, AIR);
-        testSetRegion(data, 0, 0, 0, 16, 16, 1, RED_WOOL); // Whole Chunk Section
-        data.setRegion(0, 0, 0, 16, 256, 16, AIR);
-        testSetRegion(data, 0, 8, 0, 16, 24, 1, RED_WOOL); // Start middle of this section, end middle of next
-        data.setRegion(0, 0, 0, 16, 256, 16, AIR);
-        testSetRegion(data, 0, 4, 0, 16, 12, 1, RED_WOOL); // Start in this section, end in this section
-        data.setRegion(0, 0, 0, 16, 256, 16, AIR);
-        testSetRegion(data, 0, 0, 0, 1, 16, 1, RED_WOOL); // Whole Chunk Section
-        data.setRegion(0, 0, 0, 16, 256, 16, AIR);
-        testSetRegion(data, 0, 8, 0, 1, 24, 1, RED_WOOL); // Start middle of this section, end middle of next
-        data.setRegion(0, 0, 0, 16, 256, 16, AIR);
-        testSetRegion(data, 0, 4, 0, 1, 12, 1, RED_WOOL); // Start in this section, end in this section
-        data.setRegion(0, 0, 0, 16, 256, 16, AIR);
-        testSetRegion(data, 0, 0, 0, 1, 1, 1, RED_WOOL); // Set single block.
-    }
-}
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/CompositeSerialization.java b/src/test/java/org/bukkit/craftbukkit/inventory/CompositeSerialization.java
deleted file mode 100644
index 4a85b083b4185e25a6da38d299d01b0a0eca117f..0000000000000000000000000000000000000000
--- a/src/test/java/org/bukkit/craftbukkit/inventory/CompositeSerialization.java
+++ /dev/null
@@ -1,71 +0,0 @@
-package org.bukkit.craftbukkit.inventory;
-
-import static org.hamcrest.Matchers.*;
-import static org.junit.Assert.*;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
-import org.bukkit.ChatColor;
-import org.bukkit.Material;
-import org.bukkit.configuration.InvalidConfigurationException;
-import org.bukkit.configuration.file.YamlConfiguration;
-import org.bukkit.enchantments.Enchantment;
-import org.bukkit.inventory.ItemStack;
-import org.bukkit.inventory.meta.ItemMeta;
-import org.bukkit.support.AbstractTestingBase;
-import org.junit.Test;
-
-
-public class CompositeSerialization extends AbstractTestingBase {
-
-    public YamlConfiguration getConfig() {
-        return new YamlConfiguration();
-    }
-
-    @Test
-    public void testSaveRestoreCompositeList() throws InvalidConfigurationException {
-        YamlConfiguration out = getConfig();
-
-        List<ItemStack> stacks = new ArrayList<ItemStack>();
-        stacks.add(new ItemStack(Material.STONE));
-        stacks.add(new ItemStack(Material.GRASS));
-        stacks.add(new ItemStack(Material.DIRT));
-        stacks.add(new ItemStack(Material.COBBLESTONE, 17));
-        stacks.add(new ItemStack(Material.OAK_PLANKS, 63));
-        stacks.add(new ItemStack(Material.OAK_SAPLING, 1, (short) 1));
-        stacks.add(new ItemStack(Material.OAK_LEAVES, 32, (short) 2));
-
-        ItemStack item7 = new ItemStack(Material.IRON_SHOVEL);
-        item7.addUnsafeEnchantment(Enchantment.PROTECTION_FIRE, 1);
-        stacks.add(item7);
-
-        ItemStack item8 = new ItemStack(Material.IRON_PICKAXE);
-        item8.addUnsafeEnchantment(Enchantment.PROTECTION_FALL, 2);
-        item8.addUnsafeEnchantment(Enchantment.PROTECTION_EXPLOSIONS, 1);
-        item8.addUnsafeEnchantment(Enchantment.PROTECTION_PROJECTILE, 5);
-        item8.addUnsafeEnchantment(Enchantment.OXYGEN, 4);
-        stacks.add(item8);
-
-        ItemStack item9 = new ItemStack(Material.APPLE);
-        ItemMeta meta9 = item9.getItemMeta();
-        meta9.setDisplayName(ChatColor.RED + "DisplayName");
-        meta9.setLocalizedName(ChatColor.AQUA + "LocalizedName");
-        meta9.setLore(Arrays.asList(ChatColor.BLUE + "Lore1", ChatColor.DARK_AQUA + "Lore2"));
-        item9.setItemMeta(meta9);
-        stacks.add(item9);
-
-        out.set("composite-list.abc.def", stacks);
-        String yaml = out.saveToString();
-
-        YamlConfiguration in = new YamlConfiguration();
-        in.loadFromString(yaml);
-        List<?> raw = in.getList("composite-list.abc.def");
-
-        assertThat(stacks, hasSize(raw.size()));
-
-        for (int i = 0; i < raw.size(); i++) {
-            assertThat(String.valueOf(i), (Object) stacks.get(i), is((Object) raw.get(i)));
-        }
-    }
-}
-
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/DeprecatedItemMetaCustomValueTest.java b/src/test/java/org/bukkit/craftbukkit/inventory/DeprecatedItemMetaCustomValueTest.java
deleted file mode 100644
index 0ab65ac7310cfc184b1d41b417c0a1db184f199e..0000000000000000000000000000000000000000
--- a/src/test/java/org/bukkit/craftbukkit/inventory/DeprecatedItemMetaCustomValueTest.java
+++ /dev/null
@@ -1,313 +0,0 @@
-package org.bukkit.craftbukkit.inventory;
-
-import static org.junit.Assert.*;
-import java.io.StringReader;
-import java.lang.reflect.Array;
-import java.nio.ByteBuffer;
-import java.util.Map;
-import java.util.UUID;
-import net.minecraft.server.NBTTagCompound;
-import org.bukkit.Bukkit;
-import org.bukkit.Material;
-import org.bukkit.NamespacedKey;
-import org.bukkit.configuration.file.YamlConfiguration;
-import org.bukkit.inventory.ItemStack;
-import org.bukkit.inventory.meta.ItemMeta;
-import org.bukkit.inventory.meta.tags.CustomItemTagContainer;
-import org.bukkit.inventory.meta.tags.ItemTagAdapterContext;
-import org.bukkit.inventory.meta.tags.ItemTagType;
-import org.bukkit.support.AbstractTestingBase;
-import org.junit.Before;
-import org.junit.Test;
-
-public class DeprecatedItemMetaCustomValueTest extends AbstractTestingBase {
-
-    private static NamespacedKey VALID_KEY;
-
-    @Before
-    public void setup() {
-        VALID_KEY = new NamespacedKey("test", "validkey");
-    }
-
-    /*
-        Sets a test
-     */
-    @Test(expected = IllegalArgumentException.class)
-    public void testSetNoAdapter() {
-        ItemMeta itemMeta = createNewItemMeta();
-        itemMeta.getCustomTagContainer().setCustomTag(VALID_KEY, new PrimitiveTagType<>(boolean.class), true);
-    }
-
-    /*
-        Contains a tag
-     */
-    @Test(expected = IllegalArgumentException.class)
-    public void testHasNoAdapter() {
-        ItemMeta itemMeta = createNewItemMeta();
-        itemMeta.getCustomTagContainer().setCustomTag(VALID_KEY, ItemTagType.INTEGER, 1); // We gotta set this so we at least try to compare it
-        itemMeta.getCustomTagContainer().hasCustomTag(VALID_KEY, new PrimitiveTagType<>(boolean.class));
-    }
-
-    /*
-        Getting a tag
-     */
-    @Test(expected = IllegalArgumentException.class)
-    public void testGetNoAdapter() {
-        ItemMeta itemMeta = createNewItemMeta();
-        itemMeta.getCustomTagContainer().setCustomTag(VALID_KEY, ItemTagType.INTEGER, 1); //We gotta set this so we at least try to compare it
-        itemMeta.getCustomTagContainer().getCustomTag(VALID_KEY, new PrimitiveTagType<>(boolean.class));
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    public void testGetWrongType() {
-        ItemMeta itemMeta = createNewItemMeta();
-        itemMeta.getCustomTagContainer().setCustomTag(VALID_KEY, ItemTagType.INTEGER, 1);
-        itemMeta.getCustomTagContainer().getCustomTag(VALID_KEY, ItemTagType.STRING);
-    }
-
-    @Test
-    public void testDifferentNamespace() {
-        NamespacedKey namespacedKeyA = new NamespacedKey("plugin-a", "damage");
-        NamespacedKey namespacedKeyB = new NamespacedKey("plugin-b", "damage");
-
-        ItemMeta meta = createNewItemMeta();
-        meta.getCustomTagContainer().setCustomTag(namespacedKeyA, ItemTagType.LONG, 15L);
-        meta.getCustomTagContainer().setCustomTag(namespacedKeyB, ItemTagType.LONG, 160L);
-
-        assertEquals(15L, (long) meta.getCustomTagContainer().getCustomTag(namespacedKeyA, ItemTagType.LONG));
-        assertEquals(160L, (long) meta.getCustomTagContainer().getCustomTag(namespacedKeyB, ItemTagType.LONG));
-    }
-
-    private ItemMeta createNewItemMeta() {
-        return Bukkit.getItemFactory().getItemMeta(Material.DIAMOND_PICKAXE);
-    }
-
-    private NamespacedKey requestKey(String keyName) {
-        return new NamespacedKey("test-plugin", keyName.toLowerCase());
-    }
-
-    /*
-        Removing a tag
-     */
-    @Test
-    public void testNBTTagStoring() {
-        CraftMetaItem itemMeta = createComplexItemMeta();
-
-        NBTTagCompound compound = new NBTTagCompound();
-        itemMeta.applyToItem(compound);
-
-        assertEquals(itemMeta, new CraftMetaItem(compound));
-    }
-
-    @Test
-    public void testMapStoring() {
-        CraftMetaItem itemMeta = createComplexItemMeta();
-
-        Map<String, Object> serialize = itemMeta.serialize();
-        assertEquals(itemMeta, new CraftMetaItem(serialize));
-    }
-
-    @Test
-    public void testYAMLStoring() {
-        ItemStack stack = new ItemStack(Material.DIAMOND);
-        CraftMetaItem meta = createComplexItemMeta();
-        stack.setItemMeta(meta);
-
-        YamlConfiguration configuration = new YamlConfiguration();
-        configuration.set("testpath", stack);
-
-        String configValue = configuration.saveToString();
-        YamlConfiguration loadedConfig = YamlConfiguration.loadConfiguration(new StringReader(configValue));
-
-        assertEquals(stack, loadedConfig.getSerializable("testpath", ItemStack.class));
-        assertNotEquals(new ItemStack(Material.DIAMOND), loadedConfig.getSerializable("testpath", ItemStack.class));
-    }
-
-    @Test
-    public void testCorrectType() {
-        ItemStack stack = new ItemStack(Material.DIAMOND);
-        CraftMetaItem meta = createComplexItemMeta();
-
-        meta.getCustomTagContainer().setCustomTag(requestKey("int"), ItemTagType.STRING, "1");
-        meta.getCustomTagContainer().setCustomTag(requestKey("double"), ItemTagType.STRING, "1.33");
-        stack.setItemMeta(meta);
-
-        YamlConfiguration configuration = new YamlConfiguration();
-        configuration.set("testpath", stack);
-
-        String configValue = configuration.saveToString();
-        YamlConfiguration loadedConfig = YamlConfiguration.loadConfiguration(new StringReader(configValue));
-        ItemStack newStack = loadedConfig.getSerializable("testpath", ItemStack.class);
-
-        assertTrue(newStack.getItemMeta().getCustomTagContainer().hasCustomTag(requestKey("int"), ItemTagType.STRING));
-        assertEquals(newStack.getItemMeta().getCustomTagContainer().getCustomTag(requestKey("int"), ItemTagType.STRING), "1");
-
-        assertTrue(newStack.getItemMeta().getCustomTagContainer().hasCustomTag(requestKey("double"), ItemTagType.STRING));
-        assertEquals(newStack.getItemMeta().getCustomTagContainer().getCustomTag(requestKey("double"), ItemTagType.STRING), "1.33");
-    }
-
-    private CraftMetaItem createComplexItemMeta() {
-        CraftMetaItem itemMeta = (CraftMetaItem) createNewItemMeta();
-        itemMeta.setDisplayName("Item Display Name");
-
-        itemMeta.getCustomTagContainer().setCustomTag(requestKey("custom-long"), ItemTagType.LONG, 4L); //Add random primitive values
-        itemMeta.getCustomTagContainer().setCustomTag(requestKey("custom-byte-array"), ItemTagType.BYTE_ARRAY, new byte[]{
-            0, 1, 2, 10
-        });
-        itemMeta.getCustomTagContainer().setCustomTag(requestKey("custom-string"), ItemTagType.STRING, "Hello there world");
-        itemMeta.getCustomTagContainer().setCustomTag(requestKey("custom-int"), ItemTagType.INTEGER, 3);
-        itemMeta.getCustomTagContainer().setCustomTag(requestKey("custom-double"), ItemTagType.DOUBLE, 3.123);
-
-        CustomItemTagContainer innerContainer = itemMeta.getCustomTagContainer().getAdapterContext().newTagContainer(); //Add a inner container
-        innerContainer.setCustomTag(VALID_KEY, ItemTagType.LONG, 5L);
-        itemMeta.getCustomTagContainer().setCustomTag(requestKey("custom-inner-compound"), ItemTagType.TAG_CONTAINER, innerContainer);
-        return itemMeta;
-    }
-
-    /*
-        Test complex object storage
-     */
-    @Test
-    public void storeUUIDOnItemTest() {
-        ItemMeta itemMeta = createNewItemMeta();
-        UUIDItemTagType uuidItemTagType = new UUIDItemTagType();
-        UUID uuid = UUID.fromString("434eea72-22a6-4c61-b5ef-945874a5c478");
-
-        itemMeta.getCustomTagContainer().setCustomTag(VALID_KEY, uuidItemTagType, uuid);
-        assertTrue(itemMeta.getCustomTagContainer().hasCustomTag(VALID_KEY, uuidItemTagType));
-        assertEquals(uuid, itemMeta.getCustomTagContainer().getCustomTag(VALID_KEY, uuidItemTagType));
-    }
-
-    @Test
-    public void encapsulatedContainers() {
-        NamespacedKey innerKey = new NamespacedKey("plugin-a", "inner");
-
-        ItemMeta meta = createNewItemMeta();
-        ItemTagAdapterContext context = meta.getCustomTagContainer().getAdapterContext();
-
-        CustomItemTagContainer thirdContainer = context.newTagContainer();
-        thirdContainer.setCustomTag(VALID_KEY, ItemTagType.LONG, 3L);
-
-        CustomItemTagContainer secondContainer = context.newTagContainer();
-        secondContainer.setCustomTag(VALID_KEY, ItemTagType.LONG, 2L);
-        secondContainer.setCustomTag(innerKey, ItemTagType.TAG_CONTAINER, thirdContainer);
-
-        meta.getCustomTagContainer().setCustomTag(VALID_KEY, ItemTagType.LONG, 1L);
-        meta.getCustomTagContainer().setCustomTag(innerKey, ItemTagType.TAG_CONTAINER, secondContainer);
-
-        assertEquals(3L, meta.getCustomTagContainer()
-                .getCustomTag(innerKey, ItemTagType.TAG_CONTAINER)
-                .getCustomTag(innerKey, ItemTagType.TAG_CONTAINER)
-                .getCustomTag(VALID_KEY, ItemTagType.LONG).longValue());
-
-        assertEquals(2L, meta.getCustomTagContainer()
-                .getCustomTag(innerKey, ItemTagType.TAG_CONTAINER)
-                .getCustomTag(VALID_KEY, ItemTagType.LONG).longValue());
-
-        assertEquals(1L, meta.getCustomTagContainer()
-                .getCustomTag(VALID_KEY, ItemTagType.LONG).longValue());
-    }
-
-    class UUIDItemTagType implements ItemTagType<byte[], UUID> {
-
-        @Override
-        public Class<byte[]> getPrimitiveType() {
-            return byte[].class;
-        }
-
-        @Override
-        public Class<UUID> getComplexType() {
-            return UUID.class;
-        }
-
-        @Override
-        public byte[] toPrimitive(UUID complex, ItemTagAdapterContext context) {
-            ByteBuffer bb = ByteBuffer.wrap(new byte[16]);
-            bb.putLong(complex.getMostSignificantBits());
-            bb.putLong(complex.getLeastSignificantBits());
-            return bb.array();
-        }
-
-        @Override
-        public UUID fromPrimitive(byte[] primitive, ItemTagAdapterContext context) {
-            ByteBuffer bb = ByteBuffer.wrap(primitive);
-            long firstLong = bb.getLong();
-            long secondLong = bb.getLong();
-            return new UUID(firstLong, secondLong);
-        }
-    }
-
-    @Test
-    public void testPrimitiveCustomTags() {
-        ItemMeta itemMeta = createNewItemMeta();
-
-        testPrimitiveCustomTag(itemMeta, ItemTagType.BYTE, (byte) 1);
-        testPrimitiveCustomTag(itemMeta, ItemTagType.SHORT, (short) 1);
-        testPrimitiveCustomTag(itemMeta, ItemTagType.INTEGER, 1);
-        testPrimitiveCustomTag(itemMeta, ItemTagType.LONG, 1L);
-        testPrimitiveCustomTag(itemMeta, ItemTagType.FLOAT, 1.34F);
-        testPrimitiveCustomTag(itemMeta, ItemTagType.DOUBLE, 151.123);
-
-        testPrimitiveCustomTag(itemMeta, ItemTagType.STRING, "test");
-
-        testPrimitiveCustomTag(itemMeta, ItemTagType.BYTE_ARRAY, new byte[]{
-            1, 4, 2, Byte.MAX_VALUE
-        });
-        testPrimitiveCustomTag(itemMeta, ItemTagType.INTEGER_ARRAY, new int[]{
-            1, 4, 2, Integer.MAX_VALUE
-        });
-        testPrimitiveCustomTag(itemMeta, ItemTagType.LONG_ARRAY, new long[]{
-            1L, 4L, 2L, Long.MAX_VALUE
-        });
-    }
-
-    private <T, Z> void testPrimitiveCustomTag(ItemMeta meta, ItemTagType<T, Z> type, Z value) {
-        NamespacedKey tagKey = new NamespacedKey("test", String.valueOf(type.hashCode()));
-
-        meta.getCustomTagContainer().setCustomTag(tagKey, type, value);
-        assertTrue(meta.getCustomTagContainer().hasCustomTag(tagKey, type));
-
-        Z foundValue = meta.getCustomTagContainer().getCustomTag(tagKey, type);
-        if (foundValue.getClass().isArray()) { // Compare arrays using reflection access
-            int length = Array.getLength(foundValue);
-            int originalLength = Array.getLength(value);
-            for (int i = 0; i < length && i < originalLength; i++) {
-                assertEquals(Array.get(value, i), Array.get(foundValue, i));
-            }
-        } else {
-            assertEquals(foundValue, value);
-        }
-
-        meta.getCustomTagContainer().removeCustomTag(tagKey);
-        assertFalse(meta.getCustomTagContainer().hasCustomTag(tagKey, type));
-    }
-
-    class PrimitiveTagType<T> implements ItemTagType<T, T> {
-
-        private final Class<T> primitiveType;
-
-        PrimitiveTagType(Class<T> primitiveType) {
-            this.primitiveType = primitiveType;
-        }
-
-        @Override
-        public Class<T> getPrimitiveType() {
-            return primitiveType;
-        }
-
-        @Override
-        public Class<T> getComplexType() {
-            return primitiveType;
-        }
-
-        @Override
-        public T toPrimitive(T complex, ItemTagAdapterContext context) {
-            return complex;
-        }
-
-        @Override
-        public T fromPrimitive(T primitive, ItemTagAdapterContext context) {
-            return primitive;
-        }
-    }
-}
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/FactoryItemMaterialTest.java b/src/test/java/org/bukkit/craftbukkit/inventory/FactoryItemMaterialTest.java
deleted file mode 100644
index 7580eb290d417f311da63bb0571450518d41a0bb..0000000000000000000000000000000000000000
--- a/src/test/java/org/bukkit/craftbukkit/inventory/FactoryItemMaterialTest.java
+++ /dev/null
@@ -1,153 +0,0 @@
-package org.bukkit.craftbukkit.inventory;
-
-import static org.hamcrest.Matchers.*;
-import static org.junit.Assert.*;
-import java.util.ArrayList;
-import java.util.List;
-import org.bukkit.Material;
-import org.bukkit.inventory.ItemFactory;
-import org.bukkit.inventory.ItemStack;
-import org.bukkit.inventory.meta.ItemMeta;
-import org.bukkit.support.AbstractTestingBase;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.junit.runners.Parameterized;
-import org.junit.runners.Parameterized.Parameter;
-import org.junit.runners.Parameterized.Parameters;
-
-@RunWith(Parameterized.class)
-public class FactoryItemMaterialTest extends AbstractTestingBase {
-    static final ItemFactory factory = CraftItemFactory.instance();
-    static final StringBuilder buffer = new StringBuilder();
-    static final Material[] materials;
-
-    static {
-        Material[] local_materials = Material.values();
-        List<Material> list = new ArrayList<Material>(local_materials.length);
-        for (Material material : local_materials) {
-            if (INVALIDATED_MATERIALS.contains(material)) {
-                continue;
-            }
-
-            list.add(material);
-        }
-        materials = list.toArray(new Material[list.size()]);
-    }
-
-    static String name(Enum<?> from, Enum<?> to) {
-        if (from.getClass() == to.getClass()) {
-            return buffer.delete(0, Integer.MAX_VALUE).append(from.getClass().getName()).append(' ').append(from.name()).append(" to ").append(to.name()).toString();
-        }
-        return buffer.delete(0, Integer.MAX_VALUE).append(from.getClass().getName()).append('(').append(from.name()).append(") to ").append(to.getClass().getName()).append('(').append(to.name()).append(')').toString();
-    }
-
-    @Parameters(name="Material[{index}]:{0}")
-    public static List<Object[]> data() {
-        List<Object[]> list = new ArrayList<Object[]>();
-        for (Material material : materials) {
-            list.add(new Object[] {material});
-        }
-        return list;
-    }
-
-    @Parameter(0) public Material material;
-
-    @Test
-    public void itemStack() {
-        ItemStack bukkitStack = new ItemStack(material);
-        CraftItemStack craftStack = CraftItemStack.asCraftCopy(bukkitStack);
-        ItemMeta meta = factory.getItemMeta(material);
-        if (meta == null) {
-            assertThat(material, is(Material.AIR));
-        } else {
-            assertTrue(factory.isApplicable(meta, bukkitStack));
-            assertTrue(factory.isApplicable(meta, craftStack));
-        }
-    }
-
-    @Test
-    public void generalCase() {
-        CraftMetaItem meta = (CraftMetaItem) factory.getItemMeta(material);
-        if (meta == null) {
-            assertThat(material, is(Material.AIR));
-        } else {
-            assertTrue(factory.isApplicable(meta, material));
-            assertTrue(meta.applicableTo(material));
-
-            meta = meta.clone();
-            assertTrue(factory.isApplicable(meta, material));
-            assertTrue(meta.applicableTo(material));
-        }
-    }
-
-    @Test
-    public void asMetaFor() {
-        final CraftMetaItem baseMeta = (CraftMetaItem) factory.getItemMeta(material);
-        if (baseMeta == null) {
-            assertThat(material, is(Material.AIR));
-            return;
-        }
-
-        for (Material other : materials) {
-            final ItemStack bukkitStack = new ItemStack(other);
-            final CraftItemStack craftStack = CraftItemStack.asCraftCopy(bukkitStack);
-            final CraftMetaItem otherMeta = (CraftMetaItem) factory.asMetaFor(baseMeta, other);
-
-            final String testName = name(material, other);
-
-            if (otherMeta == null) {
-                assertThat(testName, other, is(Material.AIR));
-                continue;
-            }
-
-            assertTrue(testName, factory.isApplicable(otherMeta, craftStack));
-            assertTrue(testName, factory.isApplicable(otherMeta, bukkitStack));
-            assertTrue(testName, factory.isApplicable(otherMeta, other));
-            assertTrue(testName, otherMeta.applicableTo(other));
-        }
-    }
-
-    @Test
-    public void blankEqualities() {
-        if (material == Material.AIR) {
-            return;
-        }
-        final CraftMetaItem baseMeta = (CraftMetaItem) factory.getItemMeta(material);
-        final CraftMetaItem baseMetaClone = baseMeta.clone();
-
-        final ItemStack baseMetaStack = new ItemStack(material);
-        baseMetaStack.setItemMeta(baseMeta);
-
-        assertThat(baseMeta, is(not(sameInstance(baseMetaStack.getItemMeta()))));
-
-        assertTrue(factory.equals(baseMeta, null));
-        assertTrue(factory.equals(null, baseMeta));
-
-        assertTrue(factory.equals(baseMeta, baseMetaClone));
-        assertTrue(factory.equals(baseMetaClone, baseMeta));
-
-        assertThat(baseMeta, is(not(sameInstance(baseMetaClone))));
-
-        assertThat(baseMeta, is(baseMetaClone));
-        assertThat(baseMetaClone, is(baseMeta));
-
-        for (Material other : materials) {
-            final String testName = name(material, other);
-
-            final CraftMetaItem otherMeta = (CraftMetaItem) factory.asMetaFor(baseMetaClone, other);
-
-            if (otherMeta == null) {
-                assertThat(testName, other, is(Material.AIR));
-                continue;
-            }
-
-            assertTrue(testName, factory.equals(baseMeta, otherMeta));
-            assertTrue(testName, factory.equals(otherMeta, baseMeta));
-
-            assertThat(testName, baseMeta, is(otherMeta));
-            assertThat(testName, otherMeta, is(baseMeta));
-
-            assertThat(testName, baseMeta.hashCode(), is(otherMeta.hashCode()));
-        }
-    }
-}
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/ItemFactoryTest.java b/src/test/java/org/bukkit/craftbukkit/inventory/ItemFactoryTest.java
deleted file mode 100644
index 07006a23f2170a6b5699d35557e90c79a13c9edf..0000000000000000000000000000000000000000
--- a/src/test/java/org/bukkit/craftbukkit/inventory/ItemFactoryTest.java
+++ /dev/null
@@ -1,44 +0,0 @@
-package org.bukkit.craftbukkit.inventory;
-
-import static org.hamcrest.Matchers.*;
-import static org.junit.Assert.*;
-import java.lang.reflect.Field;
-import java.lang.reflect.Modifier;
-import java.util.Collection;
-import java.util.HashSet;
-import java.util.zip.ZipEntry;
-import java.util.zip.ZipInputStream;
-import net.minecraft.server.IAttribute;
-import net.minecraft.server.IDynamicTexture;
-import org.bukkit.support.AbstractTestingBase;
-import org.junit.Test;
-
-public class ItemFactoryTest extends AbstractTestingBase {
-
-    @Test
-    public void testKnownAttributes() throws Throwable {
-        final ZipInputStream nmsZipStream = new ZipInputStream(IDynamicTexture.class/* Magic class that isn't imported! */.getProtectionDomain().getCodeSource().getLocation().openStream());
-        final Collection<String> names = new HashSet<String>();
-        for (ZipEntry clazzEntry; (clazzEntry = nmsZipStream.getNextEntry()) != null; ) {
-            final String entryName = clazzEntry.getName();
-            if (!(entryName.endsWith(".class") && entryName.startsWith("net/minecraft/server/"))) {
-                continue;
-            }
-
-            final Class<?> clazz = Class.forName(entryName.substring(0, entryName.length() - ".class".length()).replace('/', '.'), false, ClassLoader.getSystemClassLoader());
-            assertThat(entryName, clazz, is(not(nullValue())));
-            for (final Field field : clazz.getDeclaredFields()) {
-                if (IAttribute.class.isAssignableFrom(field.getType()) && Modifier.isStatic(field.getModifiers())) {
-                    field.setAccessible(true);
-                    final String attributeName = ((IAttribute) field.get(null)).getName();
-                    assertThat("Logical error: duplicate name `" + attributeName + "' in " + clazz.getName(), names.add(attributeName), is(true));
-                    assertThat(clazz.getName(), CraftItemFactory.KNOWN_NBT_ATTRIBUTE_NAMES, hasItem(attributeName));
-                }
-            }
-        }
-
-        nmsZipStream.close();
-
-        assertThat("Extra values detected", CraftItemFactory.KNOWN_NBT_ATTRIBUTE_NAMES, is(names));
-    }
-}
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/ItemMetaCloneTest.java b/src/test/java/org/bukkit/craftbukkit/inventory/ItemMetaCloneTest.java
deleted file mode 100644
index cefedd7d1e568d046b2e6f2ee75ffcf13754c5bb..0000000000000000000000000000000000000000
--- a/src/test/java/org/bukkit/craftbukkit/inventory/ItemMetaCloneTest.java
+++ /dev/null
@@ -1,21 +0,0 @@
-package org.bukkit.craftbukkit.inventory;
-
-import static org.hamcrest.Matchers.*;
-import static org.junit.Assert.*;
-import java.lang.reflect.Method;
-import org.bukkit.Material;
-import org.junit.Test;
-
-public class ItemMetaCloneTest {
-
-    @Test
-    public void testClone() throws Throwable {
-        for (Material material : ItemStackTest.COMPOUND_MATERIALS) {
-            Class<?> clazz = CraftItemFactory.instance().getItemMeta(material).getClass();
-
-            Method clone = clazz.getDeclaredMethod("clone");
-            assertNotNull("Class " + clazz + " does not override clone()", clone);
-            assertThat("Class " + clazz + " clone return type does not match", clone.getReturnType(), is(equalTo(clazz)));
-        }
-    }
-}
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/ItemMetaImplementationOverrideTest.java b/src/test/java/org/bukkit/craftbukkit/inventory/ItemMetaImplementationOverrideTest.java
deleted file mode 100644
index 80be169551be9a9f007fb235d865f5146986a422..0000000000000000000000000000000000000000
--- a/src/test/java/org/bukkit/craftbukkit/inventory/ItemMetaImplementationOverrideTest.java
+++ /dev/null
@@ -1,80 +0,0 @@
-package org.bukkit.craftbukkit.inventory;
-
-import static org.hamcrest.Matchers.*;
-import static org.junit.Assert.*;
-import java.lang.reflect.Method;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.concurrent.Callable;
-import org.bukkit.Material;
-import org.bukkit.configuration.serialization.DelegateDeserialization;
-import org.bukkit.craftbukkit.Overridden;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.junit.runners.Parameterized;
-import org.junit.runners.Parameterized.Parameter;
-import org.junit.runners.Parameterized.Parameters;
-
-@RunWith(Parameterized.class)
-public class ItemMetaImplementationOverrideTest {
-    static final Class<CraftMetaItem> parent = CraftMetaItem.class;
-
-    @Parameters(name="[{index}]:{1}")
-    public static List<Object[]> data() {
-        final List<Object[]> testData = new ArrayList<Object[]>();
-        List<Class<? extends CraftMetaItem>> classes = new ArrayList<Class<? extends CraftMetaItem>>();
-
-        for (Material material : ItemStackTest.COMPOUND_MATERIALS) {
-            Class<? extends CraftMetaItem> clazz = CraftItemFactory.instance().getItemMeta(material).getClass().asSubclass(parent);
-            if (clazz != parent) {
-                classes.add(clazz);
-            }
-        }
-
-        List<Method> list = new ArrayList<Method>();
-
-        for (Method method: parent.getDeclaredMethods()) {
-            if (method.isAnnotationPresent(Overridden.class)) {
-                list.add(method);
-            }
-        }
-
-        for (final Class<?> clazz : classes) {
-            for (final Method method : list) {
-                testData.add(
-                    new Object[] {
-                        new Callable<Method>() {
-                            @Override
-                            public Method call() throws Exception {
-                                return clazz.getDeclaredMethod(method.getName(), method.getParameterTypes());
-                            }
-                        },
-                        clazz.getSimpleName() + " contains " + method.getName()
-                    }
-                );
-            }
-
-            testData.add(
-                new Object[] {
-                    new Callable<DelegateDeserialization>() {
-                        @Override
-                        public DelegateDeserialization call() throws Exception {
-                            return clazz.getAnnotation(DelegateDeserialization.class);
-                        }
-                    },
-                    clazz.getSimpleName() + " contains annotation " + DelegateDeserialization.class
-                }
-            );
-        }
-
-        return testData;
-    }
-
-    @Parameter(0) public Callable<?> test;
-    @Parameter(1) public String name;
-
-    @Test
-    public void testClass() throws Throwable {
-        assertThat(name, test.call(), is(not(nullValue())));
-    }
-}
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/ItemMetaTest.java b/src/test/java/org/bukkit/craftbukkit/inventory/ItemMetaTest.java
deleted file mode 100644
index d73141839730a129508e2e27c8d2abcbc74367bb..0000000000000000000000000000000000000000
--- a/src/test/java/org/bukkit/craftbukkit/inventory/ItemMetaTest.java
+++ /dev/null
@@ -1,420 +0,0 @@
-package org.bukkit.craftbukkit.inventory;
-
-import static org.hamcrest.Matchers.*;
-import static org.junit.Assert.*;
-
-import java.util.*;
-
-import com.destroystokyo.paper.inventory.meta.ArmorStandMeta; // Paper
-import net.minecraft.server.Block;
-import net.minecraft.server.IRegistry;
-import net.minecraft.server.ITileEntity;
-import net.minecraft.server.Item;
-import net.minecraft.server.ItemBlock;
-import net.minecraft.server.ItemBlockWallable;
-import net.minecraft.server.NBTTagCompound;
-import org.bukkit.Bukkit;
-import org.bukkit.Color;
-import org.bukkit.DyeColor;
-import org.bukkit.FireworkEffect;
-import org.bukkit.FireworkEffect.Type;
-import org.bukkit.Material;
-import org.bukkit.NamespacedKey;
-import org.bukkit.attribute.Attribute;
-import org.bukkit.attribute.AttributeModifier;
-import org.bukkit.block.banner.Pattern;
-import org.bukkit.block.banner.PatternType;
-import org.bukkit.craftbukkit.block.data.CraftBlockData;
-import org.bukkit.craftbukkit.inventory.ItemStackTest.BukkitWrapper;
-import org.bukkit.craftbukkit.inventory.ItemStackTest.CraftWrapper;
-import org.bukkit.craftbukkit.inventory.ItemStackTest.StackProvider;
-import org.bukkit.craftbukkit.inventory.ItemStackTest.StackWrapper;
-import org.bukkit.enchantments.Enchantment;
-import org.bukkit.entity.TropicalFish;
-import org.bukkit.inventory.ItemStack;
-import org.bukkit.inventory.meta.BannerMeta;
-import org.bukkit.inventory.meta.BlockDataMeta;
-import org.bukkit.inventory.meta.BlockStateMeta;
-import org.bukkit.inventory.meta.BookMeta;
-import org.bukkit.inventory.meta.CrossbowMeta;
-import org.bukkit.inventory.meta.EnchantmentStorageMeta;
-import org.bukkit.inventory.meta.FireworkEffectMeta;
-import org.bukkit.inventory.meta.FireworkMeta;
-import org.bukkit.inventory.meta.ItemMeta;
-import org.bukkit.inventory.meta.KnowledgeBookMeta;
-import org.bukkit.inventory.meta.LeatherArmorMeta;
-import org.bukkit.inventory.meta.MapMeta;
-import org.bukkit.inventory.meta.PotionMeta;
-import org.bukkit.inventory.meta.TropicalFishBucketMeta;
-import org.bukkit.potion.PotionData;
-import org.bukkit.potion.PotionEffectType;
-import org.bukkit.potion.PotionType;
-import org.bukkit.support.AbstractTestingBase;
-import org.junit.Test;
-
-public class ItemMetaTest extends AbstractTestingBase {
-
-    static final int MAX_FIREWORK_POWER = 127; // Please update ItemStackFireworkTest if/when this gets changed.
-
-    @Test(expected=IllegalArgumentException.class)
-    public void testPowerLimitExact() {
-        newFireworkMeta().setPower(MAX_FIREWORK_POWER + 1);
-    }
-
-    @Test(expected=IllegalArgumentException.class)
-    public void testPowerLimitMax() {
-        newFireworkMeta().setPower(Integer.MAX_VALUE);
-    }
-
-    @Test(expected=IllegalArgumentException.class)
-    public void testPowerLimitMin() {
-        newFireworkMeta().setPower(Integer.MIN_VALUE);
-    }
-
-    @Test(expected=IllegalArgumentException.class)
-    public void testPowerLimitNegative() {
-        newFireworkMeta().setPower(-1);
-    }
-
-    @Test
-    public void testPowers() {
-        for (int i = 0; i <= MAX_FIREWORK_POWER; i++) {
-            FireworkMeta firework = newFireworkMeta();
-            firework.setPower(i);
-            assertThat(String.valueOf(i), firework.getPower(), is(i));
-        }
-    }
-
-    @Test
-    public void testConflictingEnchantment() {
-        ItemMeta itemMeta = Bukkit.getItemFactory().getItemMeta(Material.DIAMOND_PICKAXE);
-        assertThat(itemMeta.hasConflictingEnchant(Enchantment.DURABILITY), is(false));
-
-        itemMeta.addEnchant(Enchantment.SILK_TOUCH, 1, false);
-        assertThat(itemMeta.hasConflictingEnchant(Enchantment.DURABILITY), is(false));
-        assertThat(itemMeta.hasConflictingEnchant(Enchantment.LOOT_BONUS_BLOCKS), is(true));
-        assertThat(itemMeta.hasConflictingEnchant(null), is(false));
-    }
-
-    // Paper start
-    private void testItemMeta(ItemStack stack) {
-        assertThat("Should not have ItemMeta", stack.hasItemMeta(), is(false));
-
-        stack.setDurability((short) 0);
-        assertThat("ItemStack with zero durability should not have ItemMeta", stack.hasItemMeta(), is(false));
-
-        stack.setDurability((short) 2);
-        assertThat("ItemStack with non-zero durability should have ItemMeta", stack.hasItemMeta(), is(true));
-
-        stack.setLore(Collections.singletonList("Lore"));
-        assertThat("ItemStack with lore and durability should have ItemMeta", stack.hasItemMeta(), is(true));
-
-        stack.setDurability((short) 0);
-        assertThat("ItemStack with lore should have ItemMeta", stack.hasItemMeta(), is(true));
-
-        stack.setLore(null);
-    }
-
-    @Test
-    public void testHasItemMeta() {
-        ItemStack itemStack = new ItemStack(Material.SHEARS);
-
-        testItemMeta(itemStack);
-        testItemMeta(CraftItemStack.asCraftCopy(itemStack));
-    }
-    // Paper end
-
-    @Test
-    public void testConflictingStoredEnchantment() {
-        EnchantmentStorageMeta itemMeta = (EnchantmentStorageMeta) Bukkit.getItemFactory().getItemMeta(Material.ENCHANTED_BOOK);
-        assertThat(itemMeta.hasConflictingStoredEnchant(Enchantment.DURABILITY), is(false));
-
-        itemMeta.addStoredEnchant(Enchantment.SILK_TOUCH, 1, false);
-        assertThat(itemMeta.hasConflictingStoredEnchant(Enchantment.DURABILITY), is(false));
-        assertThat(itemMeta.hasConflictingStoredEnchant(Enchantment.LOOT_BONUS_BLOCKS), is(true));
-        assertThat(itemMeta.hasConflictingStoredEnchant(null), is(false));
-    }
-
-    @Test
-    public void testConflictingEnchantments() {
-        ItemMeta itemMeta = Bukkit.getItemFactory().getItemMeta(Material.DIAMOND_PICKAXE);
-        itemMeta.addEnchant(Enchantment.DURABILITY, 6, true);
-        itemMeta.addEnchant(Enchantment.DIG_SPEED, 6, true);
-        assertThat(itemMeta.hasConflictingEnchant(Enchantment.LOOT_BONUS_BLOCKS), is(false));
-
-        itemMeta.addEnchant(Enchantment.SILK_TOUCH, 1, false);
-        assertThat(itemMeta.hasConflictingEnchant(Enchantment.LOOT_BONUS_BLOCKS), is(true));
-        assertThat(itemMeta.hasConflictingEnchant(null), is(false));
-    }
-
-    @Test
-    public void testConflictingStoredEnchantments() {
-        EnchantmentStorageMeta itemMeta = (EnchantmentStorageMeta) Bukkit.getItemFactory().getItemMeta(Material.ENCHANTED_BOOK);
-        itemMeta.addStoredEnchant(Enchantment.DURABILITY, 6, true);
-        itemMeta.addStoredEnchant(Enchantment.DIG_SPEED, 6, true);
-        assertThat(itemMeta.hasConflictingStoredEnchant(Enchantment.LOOT_BONUS_BLOCKS), is(false));
-
-        itemMeta.addStoredEnchant(Enchantment.SILK_TOUCH, 1, false);
-        assertThat(itemMeta.hasConflictingStoredEnchant(Enchantment.LOOT_BONUS_BLOCKS), is(true));
-        assertThat(itemMeta.hasConflictingStoredEnchant(null), is(false));
-    }
-
-    private static FireworkMeta newFireworkMeta() {
-        return ((FireworkMeta) Bukkit.getItemFactory().getItemMeta(Material.FIREWORK_ROCKET));
-    }
-
-    @Test
-    public void testCrazyEquality() {
-        CraftItemStack craft = CraftItemStack.asCraftCopy(new ItemStack(Material.STONE));
-        craft.setItemMeta(craft.getItemMeta());
-        ItemStack bukkit = new ItemStack(craft);
-        assertThat(craft, is(bukkit));
-        assertThat(bukkit, is((ItemStack) craft));
-    }
-
-    @Test
-    public void testBlockStateMeta() {
-        List<Block> queue = new ArrayList<>();
-
-        for (Item item : IRegistry.ITEM) {
-            if (item instanceof ItemBlock) {
-                queue.add(((ItemBlock) item).getBlock());
-            }
-            if (item instanceof ItemBlockWallable) {
-                queue.add(((ItemBlockWallable) item).wallBlock);
-            }
-        }
-
-        for (Block block : queue) {
-            if (block != null) {
-                ItemStack stack = CraftItemStack.asNewCraftStack(Item.getItemOf(block));
-
-                // Command blocks aren't unit testable atm
-                if (stack.getType() == Material.COMMAND_BLOCK || stack.getType() == Material.CHAIN_COMMAND_BLOCK || stack.getType() == Material.REPEATING_COMMAND_BLOCK) {
-                    return;
-                }
-
-                ItemMeta meta = stack.getItemMeta();
-                if (block instanceof ITileEntity) {
-                    assertTrue(stack + " has meta of type " + meta + " expected BlockStateMeta", meta instanceof BlockStateMeta);
-
-                    BlockStateMeta blockState = (BlockStateMeta) meta;
-                    assertNotNull(stack + " has null block state", blockState.getBlockState());
-
-                    blockState.setBlockState(blockState.getBlockState());
-                } else {
-                    assertTrue(stack + " has unexpected meta of type BlockStateMeta (but is not a tile)", !(meta instanceof BlockStateMeta));
-                }
-            }
-        }
-    }
-
-    @Test
-    public void testEachExtraData() {
-        final List<StackProvider> providers = Arrays.asList(
-            new StackProvider(Material.WRITABLE_BOOK) {
-                @Override ItemStack operate(final ItemStack cleanStack) {
-                    final BookMeta meta = (BookMeta) cleanStack.getItemMeta();
-                    meta.setAuthor("Some author");
-                    meta.setPages("Page 1", "Page 2");
-                    meta.setTitle("A title");
-                    cleanStack.setItemMeta(meta);
-                    return cleanStack;
-                }
-            },
-            new StackProvider(Material.WRITTEN_BOOK) {
-                @Override ItemStack operate(final ItemStack cleanStack) {
-                    final BookMeta meta = (BookMeta) cleanStack.getItemMeta();
-                    meta.setAuthor("Some author");
-                    meta.setPages("Page 1", "Page 2");
-                    meta.setTitle("A title");
-                    cleanStack.setItemMeta(meta);
-                    return cleanStack;
-                }
-            },
-            /* Skulls rely on a running server instance
-            new StackProvider(Material.SKULL_ITEM) {
-                @Override ItemStack operate(final ItemStack cleanStack) {
-                    final SkullMeta meta = (SkullMeta) cleanStack.getItemMeta();
-                    meta.setOwner("Notch");
-                    cleanStack.setItemMeta(meta);
-                    return cleanStack;
-                }
-            },
-            */
-            new StackProvider(Material.FILLED_MAP) {
-                @Override ItemStack operate(final ItemStack cleanStack) {
-                    final MapMeta meta = (MapMeta) cleanStack.getItemMeta();
-                    meta.setScaling(true);
-                    cleanStack.setItemMeta(meta);
-                    return cleanStack;
-                }
-            },
-            new StackProvider(Material.LEATHER_BOOTS) {
-                @Override ItemStack operate(final ItemStack cleanStack) {
-                    final LeatherArmorMeta meta = (LeatherArmorMeta) cleanStack.getItemMeta();
-                    meta.setColor(Color.FUCHSIA);
-                    cleanStack.setItemMeta(meta);
-                    return cleanStack;
-                }
-            },
-            new StackProvider(Material.POTION) {
-                @Override ItemStack operate(final ItemStack cleanStack) {
-                    final PotionMeta meta = (PotionMeta) cleanStack.getItemMeta();
-                    meta.setBasePotionData(new PotionData(PotionType.UNCRAFTABLE, false, false));
-                    meta.addCustomEffect(PotionEffectType.CONFUSION.createEffect(1, 1), false);
-                    cleanStack.setItemMeta(meta);
-                    return cleanStack;
-                }
-            },
-            new StackProvider(Material.FIREWORK_ROCKET) {
-                @Override ItemStack operate(final ItemStack cleanStack) {
-                    final FireworkMeta meta = (FireworkMeta) cleanStack.getItemMeta();
-                    meta.addEffect(FireworkEffect.builder().withColor(Color.GREEN).withFade(Color.OLIVE).with(Type.BALL_LARGE).build());
-                    cleanStack.setItemMeta(meta);
-                    return cleanStack;
-                }
-            },
-            new StackProvider(Material.ENCHANTED_BOOK) {
-                @Override ItemStack operate(final ItemStack cleanStack) {
-                    final EnchantmentStorageMeta meta = (EnchantmentStorageMeta) cleanStack.getItemMeta();
-                    meta.addStoredEnchant(Enchantment.ARROW_FIRE, 1, true);
-                    cleanStack.setItemMeta(meta);
-                    return cleanStack;
-                }
-            },
-            new StackProvider(Material.FIREWORK_STAR) {
-                @Override ItemStack operate(final ItemStack cleanStack) {
-                    final FireworkEffectMeta meta = (FireworkEffectMeta) cleanStack.getItemMeta();
-                    meta.setEffect(FireworkEffect.builder().withColor(Color.MAROON, Color.BLACK).with(Type.CREEPER).withFlicker().build());
-                    cleanStack.setItemMeta(meta);
-                    return cleanStack;
-                }
-            },
-            new StackProvider(Material.WHITE_BANNER) {
-                @Override ItemStack operate(ItemStack cleanStack) {
-                    final BannerMeta meta = (BannerMeta) cleanStack.getItemMeta();
-                    meta.setBaseColor(DyeColor.CYAN);
-                    meta.addPattern(new Pattern(DyeColor.WHITE, PatternType.BRICKS));
-                    cleanStack.setItemMeta(meta);
-                    return cleanStack;
-                }
-            },
-            /* No distinguishing features, add back with virtual entity API
-            new StackProvider(Material.ZOMBIE_SPAWN_EGG) {
-                @Override ItemStack operate(ItemStack cleanStack) {
-                    final SpawnEggMeta meta = (SpawnEggMeta) cleanStack.getItemMeta();
-                    meta.setSpawnedType(EntityType.ZOMBIE);
-                    cleanStack.setItemMeta(meta);
-                    return cleanStack;
-                }
-            },
-            */
-            new StackProvider(Material.KNOWLEDGE_BOOK) {
-                @Override ItemStack operate(ItemStack cleanStack) {
-                    final KnowledgeBookMeta meta = (KnowledgeBookMeta) cleanStack.getItemMeta();
-                    meta.addRecipe(new NamespacedKey("minecraft", "test"), new NamespacedKey("plugin", "test"));
-                    cleanStack.setItemMeta(meta);
-                    return cleanStack;
-                }
-            },
-            new StackProvider(Material.TROPICAL_FISH_BUCKET) {
-                @Override ItemStack operate(ItemStack cleanStack) {
-                    final TropicalFishBucketMeta meta = (TropicalFishBucketMeta) cleanStack.getItemMeta();
-                    meta.setBodyColor(DyeColor.ORANGE);
-                    meta.setPatternColor(DyeColor.BLACK);
-                    meta.setPattern(TropicalFish.Pattern.DASHER);
-                    cleanStack.setItemMeta(meta);
-                    return cleanStack;
-                }
-            },
-            new StackProvider(Material.CROSSBOW) {
-                @Override ItemStack operate(ItemStack cleanStack) {
-                    final CrossbowMeta meta = (CrossbowMeta) cleanStack.getItemMeta();
-                    meta.addChargedProjectile(new ItemStack(Material.ARROW));
-                    cleanStack.setItemMeta(meta);
-                    return cleanStack;
-                }
-            },
-            new StackProvider(Material.ARMOR_STAND) {
-                @Override ItemStack operate(ItemStack cleanStack) {
-                    final CraftMetaArmorStand meta = (CraftMetaArmorStand) cleanStack.getItemMeta();
-                    meta.entityTag = new NBTTagCompound();
-                    meta.entityTag.setBoolean("Small", true);
-                    meta.setInvisible(true); // Paper
-                    cleanStack.setItemMeta(meta);
-                    return cleanStack;
-                }
-            },
-            new StackProvider(Material.SUSPICIOUS_STEW) {
-                @Override ItemStack operate(ItemStack cleanStack) {
-                    final CraftMetaSuspiciousStew meta = ((CraftMetaSuspiciousStew) cleanStack.getItemMeta());
-                    meta.addCustomEffect(PotionEffectType.CONFUSION.createEffect(1, 0), false);
-                    cleanStack.setItemMeta(meta);
-                    return cleanStack;
-                }
-            }
-        );
-
-        assertThat("Forgotten test?", providers, hasSize(ItemStackTest.COMPOUND_MATERIALS.length - 4/* Normal item meta, skulls, eggs and tile entities */));
-
-        for (final StackProvider provider : providers) {
-            downCastTest(new BukkitWrapper(provider));
-            downCastTest(new CraftWrapper(provider));
-        }
-    }
-
-    @Test
-    public void testAttributeModifiers() {
-        UUID sameUUID = UUID.randomUUID();
-        ItemMeta itemMeta = Bukkit.getItemFactory().getItemMeta(Material.DIAMOND_PICKAXE);
-        itemMeta.addAttributeModifier(Attribute.GENERIC_ATTACK_SPEED, new AttributeModifier(sameUUID, "Test Modifier", 10, AttributeModifier.Operation.ADD_NUMBER));
-
-        ItemMeta equalMeta = Bukkit.getItemFactory().getItemMeta(Material.DIAMOND_PICKAXE);
-        equalMeta.addAttributeModifier(Attribute.GENERIC_ATTACK_SPEED, new AttributeModifier(sameUUID, "Test Modifier", 10, AttributeModifier.Operation.ADD_NUMBER));
-
-        assertThat(itemMeta.equals(equalMeta), is(true));
-
-        ItemMeta itemMeta2 = Bukkit.getItemFactory().getItemMeta(Material.DIAMOND_PICKAXE);
-        itemMeta2.addAttributeModifier(Attribute.GENERIC_ATTACK_SPEED, new AttributeModifier(sameUUID, "Test Modifier", 10, AttributeModifier.Operation.ADD_NUMBER));
-
-        ItemMeta notEqualMeta2 = Bukkit.getItemFactory().getItemMeta(Material.DIAMOND_PICKAXE);
-        notEqualMeta2.addAttributeModifier(Attribute.GENERIC_ATTACK_SPEED, new AttributeModifier(sameUUID, "Test Modifier", 11, AttributeModifier.Operation.ADD_NUMBER));
-
-        assertThat(itemMeta2.equals(notEqualMeta2), is(false));
-    }
-
-    @Test
-    public void testBlockData() {
-        BlockDataMeta itemMeta = (BlockDataMeta) Bukkit.getItemFactory().getItemMeta(Material.CHEST);
-        itemMeta.setBlockData(CraftBlockData.newData(null, "minecraft:chest[waterlogged=true]"));
-        assertThat(itemMeta.getBlockData(Material.CHEST), is(CraftBlockData.newData(null, "minecraft:chest[waterlogged=true]")));
-    }
-
-    private void downCastTest(final StackWrapper provider) {
-        final String name = provider.toString();
-        final ItemStack blank = new ItemStack(Material.STONE);
-        final ItemStack craftBlank = CraftItemStack.asCraftCopy(blank);
-
-        // Check that equality and similarity works for each meta implementation
-        assertThat(name, provider.stack(), is(provider.stack()));
-        assertThat(name, provider.stack().isSimilar(provider.stack()), is(true));
-
-        downCastTest(name, provider.stack(), blank);
-        blank.setItemMeta(blank.getItemMeta());
-        downCastTest(name, provider.stack(), blank);
-
-        downCastTest(name, provider.stack(), craftBlank);
-        craftBlank.setItemMeta(craftBlank.getItemMeta());
-        downCastTest(name, provider.stack(), craftBlank);
-    }
-
-    private void downCastTest(final String name, final ItemStack stack, final ItemStack blank) {
-        assertThat(name, stack, is(not(blank)));
-        assertThat(name, stack.getItemMeta(), is(not(blank.getItemMeta())));
-
-        stack.setType(Material.STONE);
-
-        assertThat(name, stack, is(blank));
-    }
-}
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackBookTest.java b/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackBookTest.java
deleted file mode 100644
index c8e8fbedf6b728fad572898e2deb0ede991266eb..0000000000000000000000000000000000000000
--- a/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackBookTest.java
+++ /dev/null
@@ -1,231 +0,0 @@
-package org.bukkit.craftbukkit.inventory;
-
-import com.google.common.base.Joiner;
-import java.util.Arrays;
-import java.util.List;
-import org.bukkit.Material;
-import org.bukkit.inventory.ItemStack;
-import org.bukkit.inventory.meta.BookMeta;
-import org.junit.runner.RunWith;
-import org.junit.runners.Parameterized;
-import org.junit.runners.Parameterized.Parameters;
-
-@RunWith(Parameterized.class)
-public class ItemStackBookTest extends ItemStackTest {
-
-    @Parameters(name="[{index}]:{" + NAME_PARAMETER + "}")
-    public static List<Object[]> data() {
-        return StackProvider.compound(operators(), "%s %s", NAME_PARAMETER, Material.WRITTEN_BOOK, Material.WRITABLE_BOOK);
-    }
-
-    @SuppressWarnings("unchecked")
-    static List<Object[]> operators() {
-        return CompoundOperator.compound(
-            Joiner.on('+'),
-            NAME_PARAMETER,
-            Long.parseLong("1110", 2),
-            ItemStackLoreEnchantmentTest.operators(),
-            Arrays.asList(
-                new Object[] {
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            BookMeta meta = (BookMeta) cleanStack.getItemMeta();
-                            meta.addPage("Page 1", "Page 2");
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            return cleanStack;
-                        }
-                    },
-                    "Pages vs. Null"
-                },
-                new Object[] {
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            BookMeta meta = (BookMeta) cleanStack.getItemMeta();
-                            meta.addPage("Page 1", "Page 2");
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            cleanStack.setItemMeta(cleanStack.getItemMeta());
-                            return cleanStack;
-                        }
-                    },
-                    "Pages vs. blank"
-                },
-                new Object[] {
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            BookMeta meta = (BookMeta) cleanStack.getItemMeta();
-                            meta.addPage("Page 1", "Page 2");
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            BookMeta meta = (BookMeta) cleanStack.getItemMeta();
-                            meta.addPage("Page 2", "Page 1");
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    "Pages switched"
-                },
-                new Object[] {
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            BookMeta meta = (BookMeta) cleanStack.getItemMeta();
-                            meta.addPage("Page 1", "Page 2");
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            BookMeta meta = (BookMeta) cleanStack.getItemMeta();
-                            meta.addPage("Page 1");
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    "Pages short"
-                }
-            ),
-            Arrays.asList(
-                new Object[] {
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            BookMeta meta = (BookMeta) cleanStack.getItemMeta();
-                            meta.setAuthor("AnAuthor");
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            return cleanStack;
-                        }
-                    },
-                    "Author vs. Null"
-                },
-                new Object[] {
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            BookMeta meta = (BookMeta) cleanStack.getItemMeta();
-                            meta.setAuthor("AnAuthor");
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            cleanStack.setItemMeta(cleanStack.getItemMeta());
-                            return cleanStack;
-                        }
-                    },
-                    "Author vs. blank"
-                },
-                new Object[] {
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            BookMeta meta = (BookMeta) cleanStack.getItemMeta();
-                            meta.setAuthor("AnAuthor");
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            BookMeta meta = (BookMeta) cleanStack.getItemMeta();
-                            meta.setAuthor("AnotherAuthor");
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    "Authors"
-                }
-            ),
-            Arrays.asList(
-                new Object[] {
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            BookMeta meta = (BookMeta) cleanStack.getItemMeta();
-                            meta.setTitle("Some title");
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            return cleanStack;
-                        }
-                    },
-                    "Title vs. Null"
-                },
-                new Object[] {
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            BookMeta meta = (BookMeta) cleanStack.getItemMeta();
-                            meta.setTitle("Some title");
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            cleanStack.setItemMeta(cleanStack.getItemMeta());
-                            return cleanStack;
-                        }
-                    },
-                    "title vs. blank"
-                },
-                new Object[] {
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            BookMeta meta = (BookMeta) cleanStack.getItemMeta();
-                            meta.setTitle("Some title");
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            BookMeta meta = (BookMeta) cleanStack.getItemMeta();
-                            meta.setTitle("Different title");
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    "Titles"
-                }
-            )
-        );
-    }
-}
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackEnchantStorageTest.java b/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackEnchantStorageTest.java
deleted file mode 100644
index 27ce215563ba379ce35f4f32aee48af8965d54cf..0000000000000000000000000000000000000000
--- a/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackEnchantStorageTest.java
+++ /dev/null
@@ -1,114 +0,0 @@
-package org.bukkit.craftbukkit.inventory;
-
-import com.google.common.base.Joiner;
-import java.util.Arrays;
-import java.util.List;
-import org.bukkit.Material;
-import org.bukkit.enchantments.Enchantment;
-import org.bukkit.inventory.ItemStack;
-import org.bukkit.inventory.meta.EnchantmentStorageMeta;
-import org.junit.runner.RunWith;
-import org.junit.runners.Parameterized;
-import org.junit.runners.Parameterized.Parameters;
-
-@RunWith(Parameterized.class)
-public class ItemStackEnchantStorageTest extends ItemStackTest {
-
-    @Parameters(name="[{index}]:{" + NAME_PARAMETER + "}")
-    public static List<Object[]> data() {
-        return StackProvider.compound(operators(), "%s %s", NAME_PARAMETER, Material.ENCHANTED_BOOK);
-    }
-
-    @SuppressWarnings("unchecked")
-    static List<Object[]> operators() {
-        return CompoundOperator.compound(
-            Joiner.on('+'),
-            NAME_PARAMETER,
-            Long.parseLong("10", 2),
-            ItemStackLoreEnchantmentTest.operators(),
-            Arrays.asList(
-                new Object[] {
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            EnchantmentStorageMeta meta = (EnchantmentStorageMeta) cleanStack.getItemMeta();
-                            meta.addStoredEnchant(Enchantment.DURABILITY, 1, true);
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            EnchantmentStorageMeta meta = (EnchantmentStorageMeta) cleanStack.getItemMeta();
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    "Enchantable vs Blank"
-                },
-                new Object[] {
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            EnchantmentStorageMeta meta = (EnchantmentStorageMeta) cleanStack.getItemMeta();
-                            meta.addStoredEnchant(Enchantment.KNOCKBACK, 1, true);
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            return cleanStack;
-                        }
-                    },
-                    "Enchantable vs Null"
-                },
-                new Object[] {
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            EnchantmentStorageMeta meta = (EnchantmentStorageMeta) cleanStack.getItemMeta();
-                            meta.addStoredEnchant(Enchantment.DAMAGE_UNDEAD, 1, true);
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            EnchantmentStorageMeta meta = (EnchantmentStorageMeta) cleanStack.getItemMeta();
-                            meta.addStoredEnchant(Enchantment.DAMAGE_UNDEAD, 1, true);
-                            meta.addStoredEnchant(Enchantment.FIRE_ASPECT, 1, true);
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    "Enchantable vs More"
-                },
-                new Object[] {
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            EnchantmentStorageMeta meta = (EnchantmentStorageMeta) cleanStack.getItemMeta();
-                            meta.addStoredEnchant(Enchantment.PROTECTION_FIRE, 1, true);
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            EnchantmentStorageMeta meta = (EnchantmentStorageMeta) cleanStack.getItemMeta();
-                            meta.addEnchant(Enchantment.PROTECTION_FIRE, 2, true);
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    "Enchantable vs Other"
-                }
-            )
-        );
-    }
-}
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackFireworkChargeTest.java b/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackFireworkChargeTest.java
deleted file mode 100644
index eedc02b18cec37e796b63c28dc345524751cbe24..0000000000000000000000000000000000000000
--- a/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackFireworkChargeTest.java
+++ /dev/null
@@ -1,136 +0,0 @@
-package org.bukkit.craftbukkit.inventory;
-
-import com.google.common.base.Joiner;
-import java.util.Arrays;
-import java.util.List;
-import org.bukkit.Color;
-import org.bukkit.FireworkEffect;
-import org.bukkit.FireworkEffect.Type;
-import org.bukkit.Material;
-import org.bukkit.inventory.ItemStack;
-import org.bukkit.inventory.meta.FireworkEffectMeta;
-import org.junit.runner.RunWith;
-import org.junit.runners.Parameterized;
-import org.junit.runners.Parameterized.Parameters;
-
-@RunWith(Parameterized.class)
-public class ItemStackFireworkChargeTest extends ItemStackTest {
-
-    @Parameters(name="[{index}]:{" + NAME_PARAMETER + "}")
-    public static List<Object[]> data() {
-        return StackProvider.compound(operators(), "%s %s", NAME_PARAMETER, Material.FIREWORK_STAR);
-    }
-
-    @SuppressWarnings("unchecked")
-    static List<Object[]> operators() {
-        return CompoundOperator.compound(
-            Joiner.on('+'),
-            NAME_PARAMETER,
-            Long.parseLong("10", 2),
-            ItemStackLoreEnchantmentTest.operators(),
-            Arrays.asList(
-                new Object[] {
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            FireworkEffectMeta meta = (FireworkEffectMeta) cleanStack.getItemMeta();
-                            meta.setEffect(FireworkEffect.builder().withColor(Color.WHITE).build());
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            FireworkEffectMeta meta = (FireworkEffectMeta) cleanStack.getItemMeta();
-                            meta.setEffect(FireworkEffect.builder().withColor(Color.BLACK).build());
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    "Effect Color 1 vs. Effect Color 2"
-                },
-                new Object[] {
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            FireworkEffectMeta meta = (FireworkEffectMeta) cleanStack.getItemMeta();
-                            meta.setEffect(FireworkEffect.builder().withColor(Color.WHITE).with(Type.CREEPER).build());
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            FireworkEffectMeta meta = (FireworkEffectMeta) cleanStack.getItemMeta();
-                            meta.setEffect(FireworkEffect.builder().withColor(Color.WHITE).with(Type.BURST).build());
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    "Effect type 1 vs. Effect type 2"
-                },
-                new Object[] {
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            FireworkEffectMeta meta = (FireworkEffectMeta) cleanStack.getItemMeta();
-                            meta.setEffect(FireworkEffect.builder().withColor(Color.WHITE).withFade(Color.BLUE).build());
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            FireworkEffectMeta meta = (FireworkEffectMeta) cleanStack.getItemMeta();
-                            meta.setEffect(FireworkEffect.builder().withColor(Color.WHITE).withFade(Color.RED).build());
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    "Effect fade 1 vs. Effect fade 2"
-                },
-                new Object[] {
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            FireworkEffectMeta meta = (FireworkEffectMeta) cleanStack.getItemMeta();
-                            meta.setEffect(FireworkEffect.builder().withColor(Color.WHITE).withFlicker().build());
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            FireworkEffectMeta meta = (FireworkEffectMeta) cleanStack.getItemMeta();
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    "Effect vs. Null"
-                },
-                new Object[] {
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            FireworkEffectMeta meta = (FireworkEffectMeta) cleanStack.getItemMeta();
-                            meta.setEffect(FireworkEffect.builder().withColor(Color.WHITE).withTrail().build());
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            return cleanStack;
-                        }
-                    },
-                    "Effect vs. None"
-                }
-            )
-        );
-    }
-}
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackFireworkTest.java b/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackFireworkTest.java
deleted file mode 100644
index 6caf4341e3f3c846eee6bde3bc622f6c11ec899f..0000000000000000000000000000000000000000
--- a/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackFireworkTest.java
+++ /dev/null
@@ -1,198 +0,0 @@
-package org.bukkit.craftbukkit.inventory;
-
-import com.google.common.base.Joiner;
-import java.util.Arrays;
-import java.util.List;
-import org.bukkit.Color;
-import org.bukkit.FireworkEffect;
-import org.bukkit.FireworkEffect.Type;
-import org.bukkit.Material;
-import org.bukkit.inventory.ItemStack;
-import org.bukkit.inventory.meta.FireworkMeta;
-import org.junit.runner.RunWith;
-import org.junit.runners.Parameterized;
-import org.junit.runners.Parameterized.Parameters;
-
-@RunWith(Parameterized.class)
-public class ItemStackFireworkTest extends ItemStackTest {
-
-    @Parameters(name="[{index}]:{" + NAME_PARAMETER + "}")
-    public static List<Object[]> data() {
-        return StackProvider.compound(operators(), "%s %s", NAME_PARAMETER, Material.FIREWORK_ROCKET);
-    }
-
-    @SuppressWarnings("unchecked")
-    static List<Object[]> operators() {
-        return CompoundOperator.compound(
-            Joiner.on('+'),
-            NAME_PARAMETER,
-            Long.parseLong("110", 2),
-            ItemStackLoreEnchantmentTest.operators(),
-            Arrays.asList(
-                new Object[] {
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            FireworkMeta meta = (FireworkMeta) cleanStack.getItemMeta();
-                            meta.addEffect(FireworkEffect.builder().withColor(Color.WHITE).build());
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            FireworkMeta meta = (FireworkMeta) cleanStack.getItemMeta();
-                            meta.addEffect(FireworkEffect.builder().withColor(Color.BLACK).build());
-                            meta.addEffect(FireworkEffect.builder().withColor(Color.GREEN).build());
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    "Effect Color 1 vs. Effect Color 2"
-                },
-                new Object[] {
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            FireworkMeta meta = (FireworkMeta) cleanStack.getItemMeta();
-                            meta.addEffect(FireworkEffect.builder().withColor(Color.WHITE).with(Type.CREEPER).build());
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            FireworkMeta meta = (FireworkMeta) cleanStack.getItemMeta();
-                            meta.addEffect(FireworkEffect.builder().withColor(Color.WHITE).with(Type.BURST).build());
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    "Effect type 1 vs. Effect type 2"
-                },
-                new Object[] {
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            FireworkMeta meta = (FireworkMeta) cleanStack.getItemMeta();
-                            meta.addEffect(FireworkEffect.builder().withColor(Color.WHITE).withFade(Color.BLUE).build());
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            FireworkMeta meta = (FireworkMeta) cleanStack.getItemMeta();
-                            meta.addEffect(FireworkEffect.builder().withColor(Color.WHITE).withFade(Color.RED).build());
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    "Effect fade 1 vs. Effect fade 2"
-                },
-                new Object[] {
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            FireworkMeta meta = (FireworkMeta) cleanStack.getItemMeta();
-                            meta.addEffect(FireworkEffect.builder().withColor(Color.WHITE).withFlicker().build());
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            FireworkMeta meta = (FireworkMeta) cleanStack.getItemMeta();
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    "Effect vs. Null"
-                },
-                new Object[] {
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            FireworkMeta meta = (FireworkMeta) cleanStack.getItemMeta();
-                            meta.addEffect(FireworkEffect.builder().withColor(Color.WHITE).withTrail().build());
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            return cleanStack;
-                        }
-                    },
-                    "Effect vs. None"
-                }
-            ),
-            Arrays.asList(
-                new Object[] {
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            FireworkMeta meta = (FireworkMeta) cleanStack.getItemMeta();
-                            meta.setPower(127);
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            FireworkMeta meta = (FireworkMeta) cleanStack.getItemMeta();
-                            meta.setPower(100);
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    "Height vs. Other"
-                },
-                new Object[] {
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            FireworkMeta meta = (FireworkMeta) cleanStack.getItemMeta();
-                            meta.setPower(42);
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            FireworkMeta meta = (FireworkMeta) cleanStack.getItemMeta();
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    "Height vs. Null"
-                },
-                new Object[] {
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            FireworkMeta meta = (FireworkMeta) cleanStack.getItemMeta();
-                            meta.setPower(10);
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            return cleanStack;
-                        }
-                    },
-                    "Height vs. None"
-                }
-            )
-        );
-    }
-}
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackLeatherTest.java b/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackLeatherTest.java
deleted file mode 100644
index b18ca7552f2bee23ae28910d25d83c1d730439ea..0000000000000000000000000000000000000000
--- a/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackLeatherTest.java
+++ /dev/null
@@ -1,92 +0,0 @@
-package org.bukkit.craftbukkit.inventory;
-
-import com.google.common.base.Joiner;
-import java.util.Arrays;
-import java.util.List;
-import org.bukkit.Color;
-import org.bukkit.Material;
-import org.bukkit.inventory.ItemStack;
-import org.bukkit.inventory.meta.LeatherArmorMeta;
-import org.junit.runner.RunWith;
-import org.junit.runners.Parameterized;
-import org.junit.runners.Parameterized.Parameters;
-
-@RunWith(Parameterized.class)
-public class ItemStackLeatherTest extends ItemStackTest {
-
-    @Parameters(name="[{index}]:{" + NAME_PARAMETER + "}")
-    public static List<Object[]> data() {
-        return StackProvider.compound(operators(), "%s %s", NAME_PARAMETER, Material.LEATHER_BOOTS, Material.LEATHER_CHESTPLATE, Material.LEATHER_HELMET, Material.LEATHER_LEGGINGS);
-    }
-
-    @SuppressWarnings("unchecked")
-    static List<Object[]> operators() {
-        return CompoundOperator.compound(
-            Joiner.on('+'),
-            NAME_PARAMETER,
-            Long.parseLong("10", 2),
-            ItemStackLoreEnchantmentTest.operators(),
-            Arrays.asList(
-                new Object[] {
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            LeatherArmorMeta meta = (LeatherArmorMeta) cleanStack.getItemMeta();
-                            meta.setColor(Color.FUCHSIA);
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            return cleanStack;
-                        }
-                    },
-                    "Color vs Null"
-                },
-                new Object[] {
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            LeatherArmorMeta meta = (LeatherArmorMeta) cleanStack.getItemMeta();
-                            meta.setColor(Color.GRAY);
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            LeatherArmorMeta meta = (LeatherArmorMeta) cleanStack.getItemMeta();
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    "Color vs Blank"
-                },
-                new Object[] {
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            LeatherArmorMeta meta = (LeatherArmorMeta) cleanStack.getItemMeta();
-                            meta.setColor(Color.MAROON);
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            LeatherArmorMeta meta = (LeatherArmorMeta) cleanStack.getItemMeta();
-                            meta.setColor(Color.ORANGE);
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    "Color vs Other"
-                }
-            )
-        );
-    }
-}
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackLoreEnchantmentTest.java b/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackLoreEnchantmentTest.java
deleted file mode 100644
index fe4680dcd8f1f4601413a653aeab3cd97dacf37f..0000000000000000000000000000000000000000
--- a/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackLoreEnchantmentTest.java
+++ /dev/null
@@ -1,325 +0,0 @@
-package org.bukkit.craftbukkit.inventory;
-
-import com.google.common.base.Joiner;
-import java.util.Arrays;
-import java.util.List;
-import org.bukkit.enchantments.Enchantment;
-import org.bukkit.inventory.ItemStack;
-import org.bukkit.inventory.meta.ItemMeta;
-import org.bukkit.inventory.meta.Repairable;
-import org.junit.runner.RunWith;
-import org.junit.runners.Parameterized;
-import org.junit.runners.Parameterized.Parameters;
-
-@RunWith(Parameterized.class)
-public class ItemStackLoreEnchantmentTest extends ItemStackTest {
-
-    @Parameters(name="[{index}]:{" + NAME_PARAMETER + "}")
-    public static List<Object[]> data() {
-        return StackProvider.compound(operators(), "%s %s", NAME_PARAMETER, ItemStackTest.COMPOUND_MATERIALS);
-    }
-
-    @SuppressWarnings("unchecked")
-    static List<Object[]> operators() {
-        return CompoundOperator.compound(
-            Joiner.on('+'),
-            NAME_PARAMETER,
-            ~0L,
-            Arrays.asList(
-                new Object[] {
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            ItemMeta meta = cleanStack.getItemMeta();
-                            meta.setLore(Arrays.asList("First Lore", "Second Lore"));
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            return cleanStack;
-                        }
-                    },
-                    "Lore vs Null"
-                },
-                new Object[] {
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            ItemMeta meta = cleanStack.getItemMeta();
-                            meta.setLore(Arrays.asList("Some lore"));
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            ItemMeta meta = cleanStack.getItemMeta();
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    "Lore vs Blank"
-                },
-                new Object[] {
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            ItemMeta meta = cleanStack.getItemMeta();
-                            meta.setLore(Arrays.asList("Some more lore", "Another lore"));
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            ItemMeta meta = cleanStack.getItemMeta();
-                            meta.setLore(Arrays.asList("Some more lore"));
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    "Lore vs Other"
-                }
-            ),
-            Arrays.asList(
-                new Object[] {
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            ItemMeta meta = cleanStack.getItemMeta();
-                            meta.setDisplayName("TestItemName");
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            return cleanStack;
-                        }
-                    },
-                    "Name vs Null"
-                },
-                new Object[] {
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            ItemMeta meta = cleanStack.getItemMeta();
-                            meta.setDisplayName("AnotherItemName");
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            ItemMeta meta = cleanStack.getItemMeta();
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    "Name vs Blank"
-                },
-                new Object[] {
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            ItemMeta meta = cleanStack.getItemMeta();
-                            meta.setDisplayName("The original ItemName");
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            ItemMeta meta = cleanStack.getItemMeta();
-                            meta.setDisplayName("The other name");
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    "Name vs Other"
-                }
-            ),
-            Arrays.asList(
-                new Object[] {
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            cleanStack.addUnsafeEnchantment(Enchantment.DIG_SPEED, 2);
-                            return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            return cleanStack;
-                        }
-                    },
-                    "EnchantStack vs Null"
-                },
-                new Object[] {
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            cleanStack.addUnsafeEnchantment(Enchantment.OXYGEN, 1);
-                            return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            ItemMeta meta = cleanStack.getItemMeta();
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    "EnchantStack vs Blank"
-                },
-                new Object[] {
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            cleanStack.addUnsafeEnchantment(Enchantment.ARROW_DAMAGE, 1);
-                            return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            cleanStack.addUnsafeEnchantment(Enchantment.ARROW_FIRE, 1);
-                            return cleanStack;
-                        }
-                    },
-                    "EnchantStack vs OtherEnchantStack"
-                },
-                new Object[] {
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            ItemMeta meta = cleanStack.getItemMeta();
-                            meta.addEnchant(Enchantment.DURABILITY, 1, true);
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            ItemMeta meta = cleanStack.getItemMeta();
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    "Enchant vs Blank"
-                },
-                new Object[] {
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            ItemMeta meta = cleanStack.getItemMeta();
-                            meta.addEnchant(Enchantment.KNOCKBACK, 1, true);
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            return cleanStack;
-                        }
-                    },
-                    "Enchant vs Null"
-                },
-                new Object[] {
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            ItemMeta meta = cleanStack.getItemMeta();
-                            meta.addEnchant(Enchantment.PROTECTION_FIRE, 1, true);
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            ItemMeta meta = cleanStack.getItemMeta();
-                            meta.addEnchant(Enchantment.PROTECTION_FIRE, 2, true);
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    "Enchant vs Other"
-                }
-            ),
-            Arrays.asList(
-                new Object[] {
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            ItemMeta meta = cleanStack.getItemMeta();
-                            ((Repairable) meta).setRepairCost(42);
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            return cleanStack;
-                        }
-                    },
-                    "Repair vs Null"
-                },
-                new Object[] {
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            ItemMeta meta = cleanStack.getItemMeta();
-                            ((Repairable) meta).setRepairCost(36);
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            ItemMeta meta = cleanStack.getItemMeta();
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    "Repair vs Blank"
-                },
-                new Object[] {
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            ItemMeta meta = cleanStack.getItemMeta();
-                            ((Repairable) meta).setRepairCost(89);
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            ItemMeta meta = cleanStack.getItemMeta();
-                            ((Repairable) meta).setRepairCost(88);
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    "Repair vs Other"
-                }
-            )
-        );
-    }
-}
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackMapTest.java b/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackMapTest.java
deleted file mode 100644
index 3d356095fdf605e9fde20d2ee314e499beb4570d..0000000000000000000000000000000000000000
--- a/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackMapTest.java
+++ /dev/null
@@ -1,129 +0,0 @@
-package org.bukkit.craftbukkit.inventory;
-
-import com.google.common.base.Joiner;
-import java.util.Arrays;
-import java.util.List;
-import org.bukkit.Material;
-import org.bukkit.inventory.ItemStack;
-import org.bukkit.inventory.meta.MapMeta;
-import org.junit.runner.RunWith;
-import org.junit.runners.Parameterized;
-import org.junit.runners.Parameterized.Parameters;
-
-@RunWith(Parameterized.class)
-public class ItemStackMapTest extends ItemStackTest {
-
-    @Parameters(name="[{index}]:{" + NAME_PARAMETER + "}")
-    public static List<Object[]> data() {
-        return StackProvider.compound(operators(), "%s %s", NAME_PARAMETER, Material.FILLED_MAP);
-    }
-
-    @SuppressWarnings("unchecked")
-    static List<Object[]> operators() {
-        return CompoundOperator.compound(
-            Joiner.on('+'),
-            NAME_PARAMETER,
-            Long.parseLong("10", 2),
-            ItemStackLoreEnchantmentTest.operators(),
-            Arrays.asList(
-                new Object[] {
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            MapMeta meta = (MapMeta) cleanStack.getItemMeta();
-                            meta.setScaling(true);
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            MapMeta meta = (MapMeta) cleanStack.getItemMeta();
-                            meta.setScaling(false);
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    "Scale vs. Unscale"
-                },
-                new Object[] {
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            MapMeta meta = (MapMeta) cleanStack.getItemMeta();
-                            meta.setScaling(true);
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            MapMeta meta = (MapMeta) cleanStack.getItemMeta();
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    "Scale vs. Blank"
-                },
-                new Object[] {
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            MapMeta meta = (MapMeta) cleanStack.getItemMeta();
-                            meta.setScaling(false);
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            MapMeta meta = (MapMeta) cleanStack.getItemMeta();
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    "Unscale vs. Blank"
-                },
-                new Object[] {
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            MapMeta meta = (MapMeta) cleanStack.getItemMeta();
-                            meta.setScaling(true);
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            return cleanStack;
-                        }
-                    },
-                    "Scale vs. None"
-                },
-                new Object[] {
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            MapMeta meta = (MapMeta) cleanStack.getItemMeta();
-                            meta.setScaling(false);
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            return cleanStack;
-                        }
-                    },
-                    "Unscale vs. None"
-                }
-            )
-        );
-    }
-}
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackPotionsTest.java b/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackPotionsTest.java
deleted file mode 100644
index 06aea5212132543ccfc3bbbd15dd47720fafcb26..0000000000000000000000000000000000000000
--- a/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackPotionsTest.java
+++ /dev/null
@@ -1,156 +0,0 @@
-package org.bukkit.craftbukkit.inventory;
-
-import com.google.common.base.Joiner;
-import java.util.Arrays;
-import java.util.List;
-import org.bukkit.Material;
-import org.bukkit.inventory.ItemStack;
-import org.bukkit.inventory.meta.PotionMeta;
-import org.bukkit.potion.PotionEffectType;
-import org.junit.runner.RunWith;
-import org.junit.runners.Parameterized;
-import org.junit.runners.Parameterized.Parameters;
-
-@RunWith(Parameterized.class)
-public class ItemStackPotionsTest extends ItemStackTest {
-
-    @Parameters(name="[{index}]:{" + NAME_PARAMETER + "}")
-    public static List<Object[]> data() {
-        return StackProvider.compound(operators(), "%s %s", NAME_PARAMETER, Material.POTION);
-    }
-
-    @SuppressWarnings("unchecked")
-    static List<Object[]> operators() {
-        return CompoundOperator.compound(
-            Joiner.on('+'),
-            NAME_PARAMETER,
-            Long.parseLong("10", 2),
-            ItemStackLoreEnchantmentTest.operators(),
-            Arrays.asList(
-                new Object[] {
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            final PotionMeta meta = (PotionMeta) cleanStack.getItemMeta();
-                            meta.addCustomEffect(PotionEffectType.CONFUSION.createEffect(1, 1), false);
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            return cleanStack;
-                        }
-                    },
-                    "Potion vs Null"
-                },
-                new Object[] {
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            final PotionMeta meta = (PotionMeta) cleanStack.getItemMeta();
-                            meta.addCustomEffect(PotionEffectType.HARM.createEffect(2, 1), false);
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            final PotionMeta meta = (PotionMeta) cleanStack.getItemMeta();
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    "Potion vs Blank"
-                },
-                new Object[] {
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            final PotionMeta meta = (PotionMeta) cleanStack.getItemMeta();
-                            meta.addCustomEffect(PotionEffectType.SLOW_DIGGING.createEffect(1, 1), false);
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            final PotionMeta meta = (PotionMeta) cleanStack.getItemMeta();
-                            meta.addCustomEffect(PotionEffectType.FAST_DIGGING.createEffect(1, 1), false);
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    "Potion vs Harder"
-                },
-                new Object[] {
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            final PotionMeta meta = (PotionMeta) cleanStack.getItemMeta();
-                            meta.addCustomEffect(PotionEffectType.JUMP.createEffect(1, 1), false);
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            final PotionMeta meta = (PotionMeta) cleanStack.getItemMeta();
-                            meta.addCustomEffect(PotionEffectType.JUMP.createEffect(1, 1), false);
-                            meta.addCustomEffect(PotionEffectType.REGENERATION.createEffect(1, 1), false);
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    "Potion vs Better"
-                },
-                new Object[] {
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            final PotionMeta meta = (PotionMeta) cleanStack.getItemMeta();
-                            meta.addCustomEffect(PotionEffectType.SPEED.createEffect(10, 1), false);
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            final PotionMeta meta = (PotionMeta) cleanStack.getItemMeta();
-                            meta.addCustomEffect(PotionEffectType.SPEED.createEffect(5, 1), false);
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    "Potion vs Faster"
-                },
-                new Object[] {
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            final PotionMeta meta = (PotionMeta) cleanStack.getItemMeta();
-                            meta.addCustomEffect(PotionEffectType.INCREASE_DAMAGE.createEffect(1, 1), false);
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            final PotionMeta meta = (PotionMeta) cleanStack.getItemMeta();
-                            meta.addCustomEffect(PotionEffectType.INCREASE_DAMAGE.createEffect(1, 2), false);
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    "Potion vs Stronger"
-                }
-            )
-        );
-    }
-}
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackSkullTest.java b/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackSkullTest.java
deleted file mode 100644
index 3067f60320868ce80f2a16b9f3f0b9746ad8b07e..0000000000000000000000000000000000000000
--- a/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackSkullTest.java
+++ /dev/null
@@ -1,92 +0,0 @@
-package org.bukkit.craftbukkit.inventory;
-
-import com.google.common.base.Joiner;
-import java.util.Arrays;
-import java.util.List;
-import org.bukkit.Material;
-import org.bukkit.inventory.ItemStack;
-import org.bukkit.inventory.meta.SkullMeta;
-import org.junit.runner.RunWith;
-import org.junit.runners.Parameterized;
-import org.junit.runners.Parameterized.Parameters;
-
-@RunWith(Parameterized.class)
-public class ItemStackSkullTest extends ItemStackTest {
-
-    @Parameters(name="[{index}]:{" + NAME_PARAMETER + "}")
-    public static List<Object[]> data() {
-        return StackProvider.compound(operators(), "%s %s", NAME_PARAMETER, Material.PLAYER_HEAD);
-    }
-
-    @SuppressWarnings("unchecked")
-    static List<Object[]> operators() {
-        return CompoundOperator.compound(
-            Joiner.on('+'),
-            NAME_PARAMETER,
-            Long.parseLong("10", 2),
-            ItemStackLoreEnchantmentTest.operators(),
-            Arrays.asList(
-                new Object[] {
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            SkullMeta meta = (SkullMeta) cleanStack.getItemMeta();
-                            meta.setOwner("Notch");
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            SkullMeta meta = (SkullMeta) cleanStack.getItemMeta();
-                            meta.setOwner("Dinnerbone");
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    "Name 1 vs. Name 2"
-                },
-                new Object[] {
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            SkullMeta meta = (SkullMeta) cleanStack.getItemMeta();
-                            meta.setOwner("Notch");
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            SkullMeta meta = (SkullMeta) cleanStack.getItemMeta();
-                            meta.setOwner(null);
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    "Name vs. Null"
-                },
-                new Object[] {
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            SkullMeta meta = (SkullMeta) cleanStack.getItemMeta();
-                            meta.setOwner("Notch");
-                            cleanStack.setItemMeta(meta);
-                            return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        @Override
-                        public ItemStack operate(ItemStack cleanStack) {
-                            return cleanStack;
-                        }
-                    },
-                    "Name vs. None"
-                }
-            )
-        );
-    }
-}
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackTest.java b/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackTest.java
deleted file mode 100644
index f9c67008a70b29b68fd2be559b2a4540270f0a27..0000000000000000000000000000000000000000
--- a/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackTest.java
+++ /dev/null
@@ -1,494 +0,0 @@
-package org.bukkit.craftbukkit.inventory;
-
-import static org.bukkit.support.Matchers.*;
-import static org.hamcrest.Matchers.*;
-import static org.junit.Assert.*;
-import com.google.common.base.Joiner;
-import com.google.common.collect.ImmutableList;
-import java.io.ByteArrayInputStream;
-import java.io.ByteArrayOutputStream;
-import java.io.IOException;
-import java.io.ObjectInputStream;
-import java.io.ObjectOutputStream;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-import org.bukkit.Material;
-import org.bukkit.configuration.InvalidConfigurationException;
-import org.bukkit.configuration.file.YamlConfiguration;
-import org.bukkit.inventory.ItemFactory;
-import org.bukkit.inventory.ItemStack;
-import org.bukkit.inventory.meta.ItemMeta;
-import org.bukkit.support.AbstractTestingBase;
-import org.bukkit.util.io.BukkitObjectInputStream;
-import org.bukkit.util.io.BukkitObjectOutputStream;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.junit.runners.Parameterized;
-import org.junit.runners.Parameterized.Parameter;
-import org.junit.runners.Parameterized.Parameters;
-import org.yaml.snakeyaml.external.biz.base64Coder.Base64Coder;
-
-@RunWith(Parameterized.class)
-public class ItemStackTest extends AbstractTestingBase {
-    abstract static class StackProvider {
-        final Material material;
-
-        StackProvider(Material material) {
-            this.material = material;
-        }
-
-        ItemStack bukkit() {
-            return operate(cleanStack(material, false));
-        }
-
-        ItemStack craft() {
-            return operate(cleanStack(material, true));
-        }
-
-        abstract ItemStack operate(ItemStack cleanStack);
-
-        static ItemStack cleanStack(Material material, boolean craft) {
-            final ItemStack stack = new ItemStack(material);
-            return craft ? CraftItemStack.asCraftCopy(stack) : stack;
-        }
-
-        @Override
-        public String toString() {
-            return material.toString();
-        }
-
-        /**
-         * For each item in parameterList, it will apply nameFormat at nameIndex.
-         * For each item in parameterList for each item in materials, it will create a stack provider at each array index that contains an Operator.
-         *
-         * @param parameterList
-         * @param nameFormat
-         * @param nameIndex
-         * @param materials
-         * @return
-         */
-        static List<Object[]> compound(final List<Object[]> parameterList, final String nameFormat, final int nameIndex, final Material...materials) {
-            final List<Object[]> out = new ArrayList<Object[]>();
-            for (Object[] params : parameterList) {
-                final int len = params.length;
-                for (final Material material : materials) {
-                    final Object[] paramsOut = params.clone();
-                    for (int i = 0; i < len; i++) {
-                        final Object param = paramsOut[i];
-                        if (param instanceof Operator) {
-                            final Operator operator = (Operator) param;
-                            paramsOut[i] = new StackProvider(material) {
-                                @Override
-                                ItemStack operate(ItemStack cleanStack) {
-                                    return operator.operate(cleanStack);
-                                }
-                            };
-                        }
-                    }
-                    paramsOut[nameIndex] = String.format(nameFormat, paramsOut[nameIndex], material);
-                    out.add(paramsOut);
-                }
-            }
-            return out;
-        }
-    }
-
-    interface Operator {
-        ItemStack operate(ItemStack cleanStack);
-    }
-
-    static class CompoundOperator implements Operator {
-        static class RecursiveContainer {
-            final Joiner joiner;
-            final Object[] strings;
-            final int nameParameter;
-            final List<Object[]> stack;
-            final List<Object[]> out;
-            final List<Object[]>[] lists;
-
-            RecursiveContainer(Joiner joiner, Object[] strings, int nameParameter, List<Object[]> stack, List<Object[]> out, List<Object[]>[] lists) {
-                this.joiner = joiner;
-                this.strings = strings;
-                this.nameParameter = nameParameter;
-                this.stack = stack;
-                this.out = out;
-                this.lists = lists;
-            }
-        }
-        final Operator[] operators;
-
-        CompoundOperator(Operator...operators) {
-            this.operators = operators;
-        }
-
-        @Override
-        public ItemStack operate(ItemStack cleanStack) {
-            for (Operator operator : operators) {
-                operator.operate(cleanStack);
-            }
-            return cleanStack;
-        }
-
-        @Override
-        public String toString() {
-            return Arrays.toString(operators);
-        }
-
-
-        /**
-         * This combines different tests into one large collection, combining no two tests from the same list.
-         * @param joiner used to join names
-         * @param nameParameter index of the name parameter
-         * @param singletonBitmask a list of bits representing the 'singletons' located in your originalLists. Lowest order bits represent the first items in originalLists.
-         *      Singletons are exponentially linked with each other, such that,
-         *      the output will contain every unique subset of only items from the singletons,
-         *      as well as every unique subset that contains at least one item from each non-singleton.
-         * @param originalLists
-         * @return
-         */
-        static List<Object[]> compound(final Joiner joiner, final int nameParameter, final long singletonBitmask, final List<Object[]>...originalLists) {
-
-            final List<Object[]> out = new ArrayList<Object[]>();
-            final List<List<Object[]>> singletons = new ArrayList<List<Object[]>>();
-            final List<List<Object[]>> notSingletons = new ArrayList<List<Object[]>>();
-
-            { // Separate and prime the 'singletons'
-                int i = 0;
-                for (List<Object[]> list : originalLists) {
-                    (((singletonBitmask >>> i++) & 0x1) == 0x1 ? singletons : notSingletons).add(list);
-                }
-            }
-
-            for (final List<Object[]> primarySingleton : singletons) {
-                // Iterate over our singletons, to multiply the 'out' each time
-                for (final Object[] entry : out.toArray(EMPTY_ARRAY)) {
-                    // Iterate over a snapshot of 'out' to prevent CMEs / infinite iteration
-                    final int len = entry.length;
-                    for (final Object[] singleton : primarySingleton) {
-                        // Iterate over each item in our singleton for the current 'out' entry
-                        final Object[] toOut = entry.clone();
-                        for (int i = 0; i < len; i++) {
-                            // Iterate over each parameter
-                            if (i == nameParameter) {
-                                toOut[i] = joiner.join(toOut[i], singleton[i]);
-                            } else if (toOut[i] instanceof Operator) {
-                                final Operator op1 = (Operator) toOut[i];
-                                final Operator op2 = (Operator) singleton[i];
-                                toOut[i] = new Operator() {
-                                    @Override
-                                    public ItemStack operate(final ItemStack cleanStack) {
-                                        return op2.operate(op1.operate(cleanStack));
-                                    }
-                                };
-                            }
-                        }
-                        out.add(toOut);
-                    }
-                }
-                out.addAll(primarySingleton);
-            }
-
-            @SuppressWarnings("unchecked")
-            final List<Object[]>[] lists = new List[notSingletons.size() + 1];
-            notSingletons.toArray(lists);
-            lists[lists.length - 1] = out;
-
-            final RecursiveContainer methodParams = new RecursiveContainer(joiner, new Object[lists.length], nameParameter, new ArrayList<Object[]>(lists.length), new ArrayList<Object[]>(), lists);
-
-            recursivelyCompound(methodParams, 0);
-            methodParams.out.addAll(out);
-
-            return methodParams.out;
-        }
-
-        private static void recursivelyCompound(final RecursiveContainer methodParams, final int level) {
-            final List<Object[]> stack = methodParams.stack;
-
-            if (level == methodParams.lists.length) {
-                final Object[] firstParams = stack.get(0);
-                final int len = firstParams.length;
-                final int stackSize = stack.size();
-                final Object[] params = new Object[len];
-
-                for (int i = 0; i < len; i++) {
-                    final Object firstParam = firstParams[i];
-
-                    if (firstParam instanceof Operator) {
-                        final Operator[] operators = new Operator[stackSize];
-                        for (int j = 0; j < stackSize; j++) {
-                            operators[j] = (Operator) stack.get(j)[i];
-                        }
-
-                        params[i] = new CompoundOperator(operators);
-                    } else if (i == methodParams.nameParameter) {
-                        final Object[] strings = methodParams.strings;
-                        for (int j = 0; j < stackSize; j++) {
-                            strings[j] = stack.get(j)[i];
-                        }
-
-                        params[i] = methodParams.joiner.join(strings);
-                    } else {
-                        params[i] = firstParam;
-                    }
-                }
-
-                methodParams.out.add(params);
-            } else {
-                final int marker = stack.size();
-
-                for (final Object[] params : methodParams.lists[level]) {
-                    stack.add(params);
-                    recursivelyCompound(methodParams, level + 1);
-                    stack.remove(marker);
-                }
-            }
-        }
-    }
-
-    interface StackWrapper {
-        ItemStack stack();
-    }
-
-    static class CraftWrapper implements StackWrapper {
-        final StackProvider provider;
-
-        CraftWrapper(StackProvider provider) {
-            this.provider = provider;
-        }
-
-        @Override
-        public ItemStack stack() {
-            return provider.craft();
-        }
-
-        @Override
-        public String toString() {
-            return "Craft " + provider;
-        }
-    }
-
-    static class BukkitWrapper implements StackWrapper {
-        final StackProvider provider;
-
-        BukkitWrapper(StackProvider provider) {
-            this.provider = provider;
-        }
-
-        @Override
-        public ItemStack stack() {
-            return provider.bukkit();
-        }
-
-        @Override
-        public String toString() {
-            return "Bukkit " + provider;
-        }
-    }
-
-    static class NoOpProvider extends StackProvider {
-
-        NoOpProvider(Material material) {
-            super(material);
-        }
-
-        @Override
-        ItemStack operate(ItemStack cleanStack) {
-            return cleanStack;
-        }
-
-        @Override
-        public String toString() {
-            return "NoOp " + super.toString();
-        }
-    }
-
-    @Parameters(name="[{index}]:{" + NAME_PARAMETER + "}")
-    public static List<Object[]> data() {
-        return ImmutableList.of(); // TODO, test basic durability issues
-    }
-
-    static final Object[][] EMPTY_ARRAY = new Object[0][];
-    /**
-     * Materials that generate unique item meta types.
-     */
-    static final Material[] COMPOUND_MATERIALS;
-    static final int NAME_PARAMETER = 2;
-    static {
-        final ItemFactory factory = CraftItemFactory.instance();
-        final Map<Class<? extends ItemMeta>, Material> possibleMaterials = new HashMap<Class<? extends ItemMeta>, Material>();
-        ItemMeta meta;
-        for (final Material material : Material.values()) {
-            meta = factory.getItemMeta(material);
-            if (meta == null || possibleMaterials.containsKey(meta.getClass()))
-                continue;
-            possibleMaterials.put(meta.getClass(), material);
-
-        }
-        COMPOUND_MATERIALS = possibleMaterials.values().toArray(new Material[possibleMaterials.size()]);
-    }
-
-    @Parameter(0) public StackProvider provider;
-    @Parameter(1) public StackProvider unequalProvider;
-    @Parameter(NAME_PARAMETER) public String name;
-
-    @Test
-    public void testBukkitInequality() {
-        final StackWrapper bukkitWrapper = new CraftWrapper(provider);
-        testInequality(bukkitWrapper, new BukkitWrapper(unequalProvider));
-        testInequality(bukkitWrapper, new BukkitWrapper(new NoOpProvider(provider.material)));
-    }
-
-    @Test
-    public void testCraftInequality() {
-        final StackWrapper craftWrapper = new CraftWrapper(provider);
-        testInequality(craftWrapper, new CraftWrapper(unequalProvider));
-        testInequality(craftWrapper, new CraftWrapper(new NoOpProvider(provider.material)));
-    }
-
-    @Test
-    public void testMixedInequality() {
-        final StackWrapper craftWrapper = new CraftWrapper(provider);
-        testInequality(craftWrapper, new BukkitWrapper(unequalProvider));
-        testInequality(craftWrapper, new BukkitWrapper(new NoOpProvider(provider.material)));
-
-        final StackWrapper bukkitWrapper = new CraftWrapper(provider);
-        testInequality(bukkitWrapper, new CraftWrapper(unequalProvider));
-        testInequality(bukkitWrapper, new CraftWrapper(new NoOpProvider(provider.material)));
-    }
-
-    static void testInequality(StackWrapper provider, StackWrapper unequalProvider) {
-        final ItemStack stack = provider.stack();
-        final ItemStack stack2 = provider.stack();
-        assertThat(stack, allOf(equalTo(stack), sameHash(stack)));
-        assertThat(stack, is(not(sameInstance(stack2))));
-        assertThat(stack, allOf(equalTo(stack2), sameHash(stack2)));
-
-        final ItemStack unequalStack = unequalProvider.stack();
-        final ItemStack unequalStack2 = unequalProvider.stack();
-        assertThat(unequalStack, allOf(equalTo(unequalStack), sameHash(unequalStack)));
-        assertThat(unequalStack, is(not(sameInstance(unequalStack2))));
-        assertThat(unequalStack, allOf(equalTo(unequalStack2), sameHash(unequalStack2)));
-
-        assertThat(stack, is(not(unequalStack)));
-        assertThat(unequalStack, is(not(stack)));
-
-        final ItemStack newStack = new ItemStack(stack2);
-        assertThat(newStack, allOf(equalTo(stack), sameHash(stack)));
-        assertThat(newStack, is(not(unequalStack)));
-        assertThat(newStack.getItemMeta(), allOf(equalTo(stack.getItemMeta()), sameHash(stack.getItemMeta())));
-        assertThat(newStack.getItemMeta(), is(not(unequalStack.getItemMeta())));
-
-        final ItemStack craftStack = CraftItemStack.asCraftCopy(stack2);
-        assertThat(craftStack, allOf(equalTo(stack), sameHash(stack)));
-        assertThat(craftStack, is(not(unequalStack)));
-        assertThat(craftStack.getItemMeta(), allOf(equalTo(stack.getItemMeta()), sameHash(stack.getItemMeta())));
-        assertThat(craftStack.getItemMeta(), is(not(unequalStack.getItemMeta())));
-
-        final ItemStack newUnequalStack = new ItemStack(unequalStack2);
-        assertThat(newUnequalStack, allOf(equalTo(unequalStack), sameHash(unequalStack)));
-        assertThat(newUnequalStack, is(not(stack)));
-        assertThat(newUnequalStack.getItemMeta(), allOf(equalTo(unequalStack.getItemMeta()), sameHash(unequalStack.getItemMeta())));
-        assertThat(newUnequalStack.getItemMeta(), is(not(stack.getItemMeta())));
-
-        final ItemStack newUnequalCraftStack = CraftItemStack.asCraftCopy(unequalStack2);
-        assertThat(newUnequalCraftStack, allOf(equalTo(unequalStack), sameHash(unequalStack)));
-        assertThat(newUnequalCraftStack, is(not(stack)));
-        assertThat(newUnequalCraftStack.getItemMeta(), allOf(equalTo(unequalStack.getItemMeta()), sameHash(unequalStack.getItemMeta())));
-        assertThat(newUnequalCraftStack.getItemMeta(), is(not(stack.getItemMeta())));
-    }
-
-    @Test
-    public void testBukkitYamlDeserialize() throws Throwable {
-        testYamlDeserialize(new BukkitWrapper(provider), new BukkitWrapper(unequalProvider));
-    }
-
-    @Test
-    public void testCraftYamlDeserialize() throws Throwable {
-        testYamlDeserialize(new CraftWrapper(provider), new CraftWrapper(unequalProvider));
-    }
-
-    @Test
-    public void testBukkitStreamDeserialize() throws Throwable {
-        testStreamDeserialize(new BukkitWrapper(provider), new BukkitWrapper(unequalProvider));
-    }
-
-    @Test
-    public void testCraftStreamDeserialize() throws Throwable {
-        testStreamDeserialize(new CraftWrapper(provider), new CraftWrapper(unequalProvider));
-    }
-
-    static void testStreamDeserialize(StackWrapper provider, StackWrapper unequalProvider) throws Throwable {
-        final ItemStack stack = provider.stack();
-        final ItemStack unequalStack = unequalProvider.stack();
-
-        ByteArrayOutputStream out = new ByteArrayOutputStream();
-        ObjectOutputStream oos = null;
-        try {
-            oos = new BukkitObjectOutputStream(out);
-
-            oos.writeObject(stack);
-            oos.writeObject(unequalStack);
-        } finally {
-            if (oos != null) {
-                try {
-                    oos.close();
-                } catch (IOException ex) {
-                }
-            }
-        }
-
-        final String data = new String(Base64Coder.encode(out.toByteArray()));
-
-        ObjectInputStream ois = null;
-
-        final ItemStack readFirst;
-        final ItemStack readSecond;
-
-        try {
-            ByteArrayInputStream in = new ByteArrayInputStream(out.toByteArray());
-            ois = new BukkitObjectInputStream(in);
-
-            readFirst = (ItemStack) ois.readObject();
-            readSecond = (ItemStack) ois.readObject();
-        } finally {
-            if (ois != null) {
-                try {
-                    ois.close();
-                } catch (IOException ex) {
-                }
-            }
-        }
-
-        testEqualities(data, readFirst, readSecond, stack, unequalStack);
-    }
-
-    static void testYamlDeserialize(StackWrapper provider, StackWrapper unequalProvider) {
-        final ItemStack stack = provider.stack();
-        final ItemStack unequalStack = unequalProvider.stack();
-        final YamlConfiguration configOut = new YamlConfiguration();
-
-        configOut.set("provider", stack);
-        configOut.set("unequal", unequalStack);
-
-        final String out = '\n' + configOut.saveToString();
-        final YamlConfiguration configIn = new YamlConfiguration();
-
-        try {
-            configIn.loadFromString(out);
-        } catch (InvalidConfigurationException ex) {
-            throw new RuntimeException(out, ex);
-        }
-
-        testEqualities(out, configIn.getItemStack("provider"), configIn.getItemStack("unequal"), stack, unequalStack);
-    }
-
-    static void testEqualities(String information, ItemStack primaryRead, ItemStack unequalRead, ItemStack primaryOriginal, ItemStack unequalOriginal) {
-        assertThat(information, primaryRead, allOf(equalTo(primaryOriginal), sameHash(primaryOriginal)));
-        assertThat(information, unequalRead, allOf(equalTo(unequalOriginal), sameHash(unequalOriginal)));
-        assertThat(information, primaryRead, is(not(unequalOriginal)));
-        assertThat(information, primaryRead, is(not(unequalRead)));
-    }
-}
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/NMSCraftItemStackTest.java b/src/test/java/org/bukkit/craftbukkit/inventory/NMSCraftItemStackTest.java
deleted file mode 100644
index 5f5781230dab9e151ccf3260f1c42e906b655e7e..0000000000000000000000000000000000000000
--- a/src/test/java/org/bukkit/craftbukkit/inventory/NMSCraftItemStackTest.java
+++ /dev/null
@@ -1,33 +0,0 @@
-package org.bukkit.craftbukkit.inventory;
-
-import static org.hamcrest.Matchers.*;
-import static org.junit.Assert.*;
-import net.minecraft.server.Enchantments;
-import org.bukkit.inventory.ItemStack;
-import org.bukkit.support.AbstractTestingBase;
-import org.junit.Test;
-
-public class NMSCraftItemStackTest extends AbstractTestingBase {
-
-    @Test
-    public void testCloneEnchantedItem() throws Exception {
-        net.minecraft.server.ItemStack nmsItemStack = new net.minecraft.server.ItemStack(net.minecraft.server.Items.POTION);
-        nmsItemStack.addEnchantment(Enchantments.DAMAGE_ALL, 1);
-        ItemStack itemStack = CraftItemStack.asCraftMirror(nmsItemStack);
-        ItemStack clone = itemStack.clone();
-        assertThat(clone.getType(), is(itemStack.getType()));
-        assertThat(clone.getAmount(), is(itemStack.getAmount()));
-        assertThat(clone.getDurability(), is(itemStack.getDurability()));
-        assertThat(clone.getEnchantments(), is(itemStack.getEnchantments()));
-        assertThat(clone.getData(), is(itemStack.getData()));
-        assertThat(clone, is(itemStack));
-    }
-
-    @Test
-    public void testCloneNullItem() throws Exception {
-        net.minecraft.server.ItemStack nmsItemStack = null;
-        ItemStack itemStack = CraftItemStack.asCraftMirror(nmsItemStack);
-        ItemStack clone = itemStack.clone();
-        assertThat(clone, is(itemStack));
-    }
-}
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/PersistentDataContainerTest.java b/src/test/java/org/bukkit/craftbukkit/inventory/PersistentDataContainerTest.java
deleted file mode 100644
index 6feee747e1ee0fc7fb57dc7ee91b7290d6cc348d..0000000000000000000000000000000000000000
--- a/src/test/java/org/bukkit/craftbukkit/inventory/PersistentDataContainerTest.java
+++ /dev/null
@@ -1,329 +0,0 @@
-package org.bukkit.craftbukkit.inventory;
-
-import static org.junit.Assert.*;
-import java.io.StringReader;
-import java.lang.reflect.Array;
-import java.nio.ByteBuffer;
-import java.util.Map;
-import java.util.UUID;
-import net.minecraft.server.NBTTagCompound;
-import org.bukkit.Bukkit;
-import org.bukkit.Material;
-import org.bukkit.NamespacedKey;
-import org.bukkit.configuration.file.YamlConfiguration;
-import org.bukkit.inventory.ItemStack;
-import org.bukkit.inventory.meta.ItemMeta;
-import org.bukkit.persistence.PersistentDataAdapterContext;
-import org.bukkit.persistence.PersistentDataContainer;
-import org.bukkit.persistence.PersistentDataType;
-import org.bukkit.support.AbstractTestingBase;
-import org.junit.Before;
-import org.junit.Test;
-
-public class PersistentDataContainerTest extends AbstractTestingBase {
-
-    private static NamespacedKey VALID_KEY;
-
-    @Before
-    public void setup() {
-        VALID_KEY = new NamespacedKey("test", "validkey");
-    }
-
-    /*
-        Sets a test
-     */
-    @Test(expected = IllegalArgumentException.class)
-    public void testSetNoAdapter() {
-        ItemMeta itemMeta = createNewItemMeta();
-        itemMeta.getPersistentDataContainer().set(VALID_KEY, new PrimitiveTagType<>(boolean.class), true);
-    }
-
-    /*
-        Contains a tag
-     */
-    @Test(expected = IllegalArgumentException.class)
-    public void testHasNoAdapter() {
-        ItemMeta itemMeta = createNewItemMeta();
-        itemMeta.getPersistentDataContainer().set(VALID_KEY, PersistentDataType.INTEGER, 1); // We gotta set this so we at least try to compare it
-        itemMeta.getPersistentDataContainer().has(VALID_KEY, new PrimitiveTagType<>(boolean.class));
-    }
-
-    /*
-        Getting a tag
-     */
-    @Test(expected = IllegalArgumentException.class)
-    public void testGetNoAdapter() {
-        ItemMeta itemMeta = createNewItemMeta();
-        itemMeta.getPersistentDataContainer().set(VALID_KEY, PersistentDataType.INTEGER, 1); //We gotta set this so we at least try to compare it
-        itemMeta.getPersistentDataContainer().get(VALID_KEY, new PrimitiveTagType<>(boolean.class));
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    public void testGetWrongType() {
-        ItemMeta itemMeta = createNewItemMeta();
-        itemMeta.getPersistentDataContainer().set(VALID_KEY, PersistentDataType.INTEGER, 1);
-        itemMeta.getPersistentDataContainer().get(VALID_KEY, PersistentDataType.STRING);
-    }
-
-    @Test
-    public void testDifferentNamespace() {
-        NamespacedKey namespacedKeyA = new NamespacedKey("plugin-a", "damage");
-        NamespacedKey namespacedKeyB = new NamespacedKey("plugin-b", "damage");
-
-        ItemMeta meta = createNewItemMeta();
-        meta.getPersistentDataContainer().set(namespacedKeyA, PersistentDataType.LONG, 15L);
-        meta.getPersistentDataContainer().set(namespacedKeyB, PersistentDataType.LONG, 160L);
-
-        assertEquals(15L, (long) meta.getPersistentDataContainer().get(namespacedKeyA, PersistentDataType.LONG));
-        assertEquals(160L, (long) meta.getPersistentDataContainer().get(namespacedKeyB, PersistentDataType.LONG));
-    }
-
-    private ItemMeta createNewItemMeta() {
-        return Bukkit.getItemFactory().getItemMeta(Material.DIAMOND_PICKAXE);
-    }
-
-    private NamespacedKey requestKey(String keyName) {
-        return new NamespacedKey("test-plugin", keyName.toLowerCase());
-    }
-
-    /*
-        Removing a tag
-     */
-    @Test
-    public void testNBTTagStoring() {
-        CraftMetaItem itemMeta = createComplexItemMeta();
-
-        NBTTagCompound compound = new NBTTagCompound();
-        itemMeta.applyToItem(compound);
-
-        assertEquals(itemMeta, new CraftMetaItem(compound));
-    }
-
-    @Test
-    public void testMapStoring() {
-        CraftMetaItem itemMeta = createComplexItemMeta();
-
-        Map<String, Object> serialize = itemMeta.serialize();
-        assertEquals(itemMeta, new CraftMetaItem(serialize));
-    }
-
-    @Test
-    public void testYAMLStoring() {
-        ItemStack stack = new ItemStack(Material.DIAMOND);
-        CraftMetaItem meta = createComplexItemMeta();
-        stack.setItemMeta(meta);
-
-        YamlConfiguration configuration = new YamlConfiguration();
-        configuration.set("testpath", stack);
-
-        String configValue = configuration.saveToString();
-        YamlConfiguration loadedConfig = YamlConfiguration.loadConfiguration(new StringReader(configValue));
-
-        assertEquals(stack, loadedConfig.getSerializable("testpath", ItemStack.class));
-        assertNotEquals(new ItemStack(Material.DIAMOND), loadedConfig.getSerializable("testpath", ItemStack.class));
-    }
-
-    @Test
-    public void testCorrectType() {
-        ItemStack stack = new ItemStack(Material.DIAMOND);
-        CraftMetaItem meta = createComplexItemMeta();
-
-        meta.getPersistentDataContainer().set(requestKey("int"), PersistentDataType.STRING, "1");
-        meta.getPersistentDataContainer().set(requestKey("double"), PersistentDataType.STRING, "1.33");
-        stack.setItemMeta(meta);
-
-        YamlConfiguration configuration = new YamlConfiguration();
-        configuration.set("testpath", stack);
-
-        String configValue = configuration.saveToString();
-        YamlConfiguration loadedConfig = YamlConfiguration.loadConfiguration(new StringReader(configValue));
-        ItemStack newStack = loadedConfig.getSerializable("testpath", ItemStack.class);
-
-        assertTrue(newStack.getItemMeta().getPersistentDataContainer().has(requestKey("int"), PersistentDataType.STRING));
-        assertEquals(newStack.getItemMeta().getPersistentDataContainer().get(requestKey("int"), PersistentDataType.STRING), "1");
-
-        assertTrue(newStack.getItemMeta().getPersistentDataContainer().has(requestKey("double"), PersistentDataType.STRING));
-        assertEquals(newStack.getItemMeta().getPersistentDataContainer().get(requestKey("double"), PersistentDataType.STRING), "1.33");
-    }
-
-    private CraftMetaItem createComplexItemMeta() {
-        CraftMetaItem itemMeta = (CraftMetaItem) createNewItemMeta();
-        itemMeta.setDisplayName("Item Display Name");
-
-        itemMeta.getPersistentDataContainer().set(requestKey("custom-long"), PersistentDataType.LONG, 4L); //Add random primitive values
-        itemMeta.getPersistentDataContainer().set(requestKey("custom-byte-array"), PersistentDataType.BYTE_ARRAY, new byte[]{
-            0, 1, 2, 10
-        });
-        itemMeta.getPersistentDataContainer().set(requestKey("custom-string"), PersistentDataType.STRING, "Hello there world");
-        itemMeta.getPersistentDataContainer().set(requestKey("custom-int"), PersistentDataType.INTEGER, 3);
-        itemMeta.getPersistentDataContainer().set(requestKey("custom-double"), PersistentDataType.DOUBLE, 3.123);
-
-        PersistentDataContainer innerContainer = itemMeta.getPersistentDataContainer().getAdapterContext().newPersistentDataContainer(); //Add a inner container
-        innerContainer.set(VALID_KEY, PersistentDataType.LONG, 5L);
-        itemMeta.getPersistentDataContainer().set(requestKey("custom-inner-compound"), PersistentDataType.TAG_CONTAINER, innerContainer);
-        return itemMeta;
-    }
-
-    /*
-        Test complex object storage
-     */
-    @Test
-    public void storeUUIDOnItemTest() {
-        ItemMeta itemMeta = createNewItemMeta();
-        UUIDPersistentDataType uuidPersistentDataType = new UUIDPersistentDataType();
-        UUID uuid = UUID.fromString("434eea72-22a6-4c61-b5ef-945874a5c478");
-
-        itemMeta.getPersistentDataContainer().set(VALID_KEY, uuidPersistentDataType, uuid);
-        assertTrue(itemMeta.getPersistentDataContainer().has(VALID_KEY, uuidPersistentDataType));
-        assertEquals(uuid, itemMeta.getPersistentDataContainer().get(VALID_KEY, uuidPersistentDataType));
-    }
-
-    @Test
-    public void encapsulatedContainers() {
-        NamespacedKey innerKey = new NamespacedKey("plugin-a", "inner");
-
-        ItemMeta meta = createNewItemMeta();
-        PersistentDataAdapterContext context = meta.getPersistentDataContainer().getAdapterContext();
-
-        PersistentDataContainer thirdContainer = context.newPersistentDataContainer();
-        thirdContainer.set(VALID_KEY, PersistentDataType.LONG, 3L);
-
-        PersistentDataContainer secondContainer = context.newPersistentDataContainer();
-        secondContainer.set(VALID_KEY, PersistentDataType.LONG, 2L);
-        secondContainer.set(innerKey, PersistentDataType.TAG_CONTAINER, thirdContainer);
-
-        meta.getPersistentDataContainer().set(VALID_KEY, PersistentDataType.LONG, 1L);
-        meta.getPersistentDataContainer().set(innerKey, PersistentDataType.TAG_CONTAINER, secondContainer);
-
-        assertEquals(3L, meta.getPersistentDataContainer()
-                .get(innerKey, PersistentDataType.TAG_CONTAINER)
-                .get(innerKey, PersistentDataType.TAG_CONTAINER)
-                .get(VALID_KEY, PersistentDataType.LONG).longValue());
-
-        assertEquals(2L, meta.getPersistentDataContainer()
-                .get(innerKey, PersistentDataType.TAG_CONTAINER)
-                .get(VALID_KEY, PersistentDataType.LONG).longValue());
-
-        assertEquals(1L, meta.getPersistentDataContainer()
-                .get(VALID_KEY, PersistentDataType.LONG).longValue());
-    }
-
-    class UUIDPersistentDataType implements PersistentDataType<byte[], UUID> {
-
-        @Override
-        public Class<byte[]> getPrimitiveType() {
-            return byte[].class;
-        }
-
-        @Override
-        public Class<UUID> getComplexType() {
-            return UUID.class;
-        }
-
-        @Override
-        public byte[] toPrimitive(UUID complex, PersistentDataAdapterContext context) {
-            ByteBuffer bb = ByteBuffer.wrap(new byte[16]);
-            bb.putLong(complex.getMostSignificantBits());
-            bb.putLong(complex.getLeastSignificantBits());
-            return bb.array();
-        }
-
-        @Override
-        public UUID fromPrimitive(byte[] primitive, PersistentDataAdapterContext context) {
-            ByteBuffer bb = ByteBuffer.wrap(primitive);
-            long firstLong = bb.getLong();
-            long secondLong = bb.getLong();
-            return new UUID(firstLong, secondLong);
-        }
-    }
-
-    @Test
-    public void testPrimitiveCustomTags() {
-        ItemMeta itemMeta = createNewItemMeta();
-
-        testPrimitiveCustomTag(itemMeta, PersistentDataType.BYTE, (byte) 1);
-        testPrimitiveCustomTag(itemMeta, PersistentDataType.SHORT, (short) 1);
-        testPrimitiveCustomTag(itemMeta, PersistentDataType.INTEGER, 1);
-        testPrimitiveCustomTag(itemMeta, PersistentDataType.LONG, 1L);
-        testPrimitiveCustomTag(itemMeta, PersistentDataType.FLOAT, 1.34F);
-        testPrimitiveCustomTag(itemMeta, PersistentDataType.DOUBLE, 151.123);
-
-        testPrimitiveCustomTag(itemMeta, PersistentDataType.STRING, "test");
-
-        testPrimitiveCustomTag(itemMeta, PersistentDataType.BYTE_ARRAY, new byte[]{
-            1, 4, 2, Byte.MAX_VALUE
-        });
-        testPrimitiveCustomTag(itemMeta, PersistentDataType.INTEGER_ARRAY, new int[]{
-            1, 4, 2, Integer.MAX_VALUE
-        });
-        testPrimitiveCustomTag(itemMeta, PersistentDataType.LONG_ARRAY, new long[]{
-            1L, 4L, 2L, Long.MAX_VALUE
-        });
-    }
-
-    private <T, Z> void testPrimitiveCustomTag(ItemMeta meta, PersistentDataType<T, Z> type, Z value) {
-        NamespacedKey tagKey = new NamespacedKey("test", String.valueOf(type.hashCode()));
-
-        meta.getPersistentDataContainer().set(tagKey, type, value);
-        assertTrue(meta.getPersistentDataContainer().has(tagKey, type));
-
-        Z foundValue = meta.getPersistentDataContainer().get(tagKey, type);
-        if (foundValue.getClass().isArray()) { // Compare arrays using reflection access
-            int length = Array.getLength(foundValue);
-            int originalLength = Array.getLength(value);
-            for (int i = 0; i < length && i < originalLength; i++) {
-                assertEquals(Array.get(value, i), Array.get(foundValue, i));
-            }
-        } else {
-            assertEquals(foundValue, value);
-        }
-
-        meta.getPersistentDataContainer().remove(tagKey);
-        assertFalse(meta.getPersistentDataContainer().has(tagKey, type));
-    }
-
-    class PrimitiveTagType<T> implements PersistentDataType<T, T> {
-
-        private final Class<T> primitiveType;
-
-        PrimitiveTagType(Class<T> primitiveType) {
-            this.primitiveType = primitiveType;
-        }
-
-        @Override
-        public Class<T> getPrimitiveType() {
-            return primitiveType;
-        }
-
-        @Override
-        public Class<T> getComplexType() {
-            return primitiveType;
-        }
-
-        @Override
-        public T toPrimitive(T complex, PersistentDataAdapterContext context) {
-            return complex;
-        }
-
-        @Override
-        public T fromPrimitive(T primitive, PersistentDataAdapterContext context) {
-            return primitive;
-        }
-    }
-
-    @Test
-    public void testItemMetaClone() {
-        ItemMeta itemMeta = createNewItemMeta();
-        PersistentDataContainer container = itemMeta.getPersistentDataContainer();
-        itemMeta.getPersistentDataContainer().set(VALID_KEY, PersistentDataType.STRING, "notch");
-
-        ItemMeta clonedMeta = itemMeta.clone();
-        PersistentDataContainer clonedContainer = clonedMeta.getPersistentDataContainer();
-
-        assertNotSame(container, clonedContainer);
-        assertEquals(container, clonedContainer);
-
-        clonedContainer.set(VALID_KEY, PersistentDataType.STRING, "dinnerbone");
-        assertNotEquals(container, clonedContainer);
-    }
-}
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/PlayerInventoryTest.java b/src/test/java/org/bukkit/craftbukkit/inventory/PlayerInventoryTest.java
deleted file mode 100644
index 6f56e56afb58cd227231027aa22bbfeb390b3420..0000000000000000000000000000000000000000
--- a/src/test/java/org/bukkit/craftbukkit/inventory/PlayerInventoryTest.java
+++ /dev/null
@@ -1,77 +0,0 @@
-package org.bukkit.craftbukkit.inventory;
-
-import static org.junit.Assert.*;
-import net.minecraft.server.ItemStack;
-import net.minecraft.server.Items;
-import net.minecraft.server.PlayerInventory;
-import org.bukkit.support.AbstractTestingBase;
-import org.junit.Test;
-
-public class PlayerInventoryTest extends AbstractTestingBase {
-
-    @Test
-    public void testCanHold() throws Exception {
-        ItemStack itemStackApple = new ItemStack(Items.APPLE);
-        ItemStack itemStack1Coal = new ItemStack(Items.COAL);
-        ItemStack itemStack32Coal = new ItemStack(Items.COAL, 32);
-        ItemStack itemStack63Coal = new ItemStack(Items.COAL, 63);
-        ItemStack itemStack64Coal = new ItemStack(Items.COAL, 64);
-
-        // keep one slot empty
-        PlayerInventory inventory = new PlayerInventory(null);
-        for (int i = 0; i < inventory.items.size() - 1; i++) {
-            inventory.setItem(i, itemStackApple);
-        }
-
-        // one slot empty
-        assertEquals(1, inventory.canHold(itemStack1Coal));
-        assertEquals(32, inventory.canHold(itemStack32Coal));
-        assertEquals(64, inventory.canHold(itemStack64Coal));
-
-        // no free space with a stack of the item to check in the inventory
-        inventory.setItem(inventory.items.size() - 1, itemStack64Coal);
-
-        assertEquals(0, inventory.canHold(itemStack1Coal));
-        assertEquals(0, inventory.canHold(itemStack32Coal));
-        assertEquals(0, inventory.canHold(itemStack64Coal));
-
-        // no free space without a stack of the item to check in the inventory
-        inventory.setItem(inventory.items.size() - 1, itemStackApple);
-
-        assertEquals(0, inventory.canHold(itemStack1Coal));
-        assertEquals(0, inventory.canHold(itemStack32Coal));
-        assertEquals(0, inventory.canHold(itemStack64Coal));
-
-        // free space for 32 items in one slot
-        inventory.setItem(inventory.items.size() - 1, itemStack32Coal);
-
-        assertEquals(1, inventory.canHold(itemStack1Coal));
-        assertEquals(32, inventory.canHold(itemStack32Coal));
-        assertEquals(32, inventory.canHold(itemStack64Coal));
-
-        // free space for 1 item in two slots
-        inventory.setItem(inventory.items.size() - 1, itemStack63Coal);
-        inventory.setItem(inventory.items.size() - 2, itemStack63Coal);
-
-        assertEquals(1, inventory.canHold(itemStack1Coal));
-        assertEquals(2, inventory.canHold(itemStack32Coal));
-        assertEquals(2, inventory.canHold(itemStack64Coal));
-
-        // free space for 32 items in non-empty off-hand slot
-        inventory.setItem(inventory.items.size() - 1, itemStackApple);
-        inventory.setItem(inventory.items.size() - 2, itemStackApple);
-        inventory.setItem(inventory.items.size() + inventory.armor.size(), itemStack32Coal);
-
-        assertEquals(1, inventory.canHold(itemStack1Coal));
-        assertEquals(32, inventory.canHold(itemStack32Coal));
-        assertEquals(32, inventory.canHold(itemStack64Coal));
-
-        // free space for 1 item in non-empty off-hand slot and another slot
-        inventory.setItem(inventory.items.size() - 1, itemStack63Coal);
-        inventory.setItem(inventory.items.size() + inventory.armor.size(), itemStack63Coal);
-
-        assertEquals(1, inventory.canHold(itemStack1Coal));
-        assertEquals(2, inventory.canHold(itemStack32Coal));
-        assertEquals(2, inventory.canHold(itemStack64Coal));
-    }
-}
diff --git a/src/test/java/org/bukkit/craftbukkit/legacy/EvilTest.java b/src/test/java/org/bukkit/craftbukkit/legacy/EvilTest.java
deleted file mode 100644
index 23e5d98cf72d8bccd56087d71507036046cd1104..0000000000000000000000000000000000000000
--- a/src/test/java/org/bukkit/craftbukkit/legacy/EvilTest.java
+++ /dev/null
@@ -1,23 +0,0 @@
-package org.bukkit.craftbukkit.legacy;
-
-import org.bukkit.Material;
-import org.junit.Assert;
-import org.junit.Test;
-
-public class EvilTest {
-
-    @Test
-    public void testFrom() {
-        Assert.assertEquals(Material.LEGACY_STONE, CraftEvil.getMaterial(1));
-    }
-
-    @Test
-    public void testTo() {
-        Assert.assertEquals(1, CraftEvil.getId(Material.LEGACY_STONE));
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    public void testIllegal() {
-        Material.STONE.getId();
-    }
-}
diff --git a/src/test/java/org/bukkit/craftbukkit/legacy/LegacyTest.java b/src/test/java/org/bukkit/craftbukkit/legacy/LegacyTest.java
deleted file mode 100644
index 7b132de5536da5d8a3d6ffe08e45248f93846199..0000000000000000000000000000000000000000
--- a/src/test/java/org/bukkit/craftbukkit/legacy/LegacyTest.java
+++ /dev/null
@@ -1,106 +0,0 @@
-package org.bukkit.craftbukkit.legacy;
-
-import java.util.Arrays;
-import java.util.HashSet;
-import java.util.Set;
-import org.bukkit.Material;
-import org.bukkit.material.MaterialData;
-import org.bukkit.support.AbstractTestingBase;
-import org.junit.Assert;
-import org.junit.Test;
-
-public class LegacyTest extends AbstractTestingBase {
-
-    private final Set<Material> INVALIDATED_MATERIALS = new HashSet<>(Arrays.asList(Material.ACACIA_BUTTON, Material.ACACIA_PRESSURE_PLATE, Material.ACACIA_TRAPDOOR, Material.AIR, Material.ATTACHED_MELON_STEM, Material.ATTACHED_PUMPKIN_STEM,
-            Material.BIRCH_BUTTON, Material.BIRCH_PRESSURE_PLATE, Material.BIRCH_TRAPDOOR, Material.BLACK_WALL_BANNER, Material.BLUE_WALL_BANNER, Material.BROWN_WALL_BANNER, Material.BUBBLE_COLUMN, Material.CAVE_AIR, Material.CREEPER_WALL_HEAD,
-            Material.CYAN_WALL_BANNER, Material.DARK_OAK_BUTTON, Material.DARK_OAK_PRESSURE_PLATE, Material.DARK_OAK_TRAPDOOR, Material.DARK_PRISMARINE_SLAB, Material.DARK_PRISMARINE_STAIRS, Material.DEBUG_STICK, Material.DONKEY_SPAWN_EGG,
-            Material.DRAGON_WALL_HEAD, Material.DRIED_KELP, Material.DRIED_KELP_BLOCK, Material.ELDER_GUARDIAN_SPAWN_EGG, Material.EVOKER_SPAWN_EGG, Material.GRAY_WALL_BANNER, Material.GREEN_WALL_BANNER, Material.HUSK_SPAWN_EGG,
-            Material.JUNGLE_BUTTON, Material.JUNGLE_PRESSURE_PLATE, Material.JUNGLE_TRAPDOOR, Material.KELP, Material.KELP_PLANT, Material.LIGHT_BLUE_WALL_BANNER, Material.LIGHT_GRAY_WALL_BANNER, Material.LIME_WALL_BANNER, Material.LLAMA_SPAWN_EGG,
-            Material.MAGENTA_WALL_BANNER, Material.MULE_SPAWN_EGG, Material.ORANGE_WALL_BANNER, Material.PARROT_SPAWN_EGG, Material.PHANTOM_SPAWN_EGG, Material.PINK_WALL_BANNER, Material.PLAYER_WALL_HEAD, Material.POLAR_BEAR_SPAWN_EGG,
-            Material.POTTED_ACACIA_SAPLING, Material.POTTED_ALLIUM, Material.POTTED_AZURE_BLUET, Material.POTTED_BIRCH_SAPLING, Material.POTTED_BLUE_ORCHID, Material.POTTED_BROWN_MUSHROOM, Material.POTTED_DANDELION, Material.POTTED_DARK_OAK_SAPLING,
-            Material.POTTED_DEAD_BUSH, Material.POTTED_FERN, Material.POTTED_JUNGLE_SAPLING, Material.POTTED_OAK_SAPLING, Material.POTTED_ORANGE_TULIP, Material.POTTED_OXEYE_DAISY, Material.POTTED_PINK_TULIP, Material.POTTED_POPPY,
-            Material.POTTED_RED_MUSHROOM, Material.POTTED_RED_TULIP, Material.POTTED_SPRUCE_SAPLING, Material.POTTED_WHITE_TULIP, Material.PRISMARINE_BRICK_SLAB, Material.PRISMARINE_BRICK_STAIRS, Material.PRISMARINE_SLAB, Material.PRISMARINE_STAIRS,
-            Material.PUMPKIN, Material.PURPLE_SHULKER_BOX, Material.PURPLE_WALL_BANNER, Material.RED_WALL_BANNER, Material.SEAGRASS, Material.SKELETON_HORSE_SPAWN_EGG, Material.SKELETON_WALL_SKULL, Material.SPRUCE_BUTTON, Material.SPRUCE_PRESSURE_PLATE, Material.SPRUCE_TRAPDOOR,
-            Material.STRAY_SPAWN_EGG, Material.STRIPPED_ACACIA_LOG, Material.STRIPPED_BIRCH_LOG, Material.STRIPPED_DARK_OAK_LOG, Material.STRIPPED_JUNGLE_LOG, Material.STRIPPED_OAK_LOG, Material.STRIPPED_SPRUCE_LOG, Material.TALL_SEAGRASS,
-            Material.TRIDENT, Material.TURTLE_EGG, Material.TURTLE_HELMET, Material.SCUTE, Material.TURTLE_SPAWN_EGG, Material.VEX_SPAWN_EGG, Material.VINDICATOR_SPAWN_EGG, Material.VOID_AIR, Material.WHITE_BED,
-            Material.WITHER_SKELETON_SPAWN_EGG, Material.WITHER_SKELETON_WALL_SKULL, Material.YELLOW_WALL_BANNER, Material.ZOMBIE_HORSE_SPAWN_EGG, Material.ZOMBIE_VILLAGER_SPAWN_EGG, Material.ZOMBIE_WALL_HEAD,
-            Material.COD_BUCKET, Material.COD_SPAWN_EGG, Material.PUFFERFISH_BUCKET, Material.PUFFERFISH_SPAWN_EGG, Material.SALMON_BUCKET, Material.SALMON_SPAWN_EGG,
-            Material.TROPICAL_FISH_BUCKET, Material.DROWNED_SPAWN_EGG, Material.TROPICAL_FISH_SPAWN_EGG,
-            Material.BLUE_ICE, Material.BRAIN_CORAL, Material.BRAIN_CORAL_BLOCK, Material.BRAIN_CORAL_FAN, Material.BUBBLE_CORAL, Material.BUBBLE_CORAL_BLOCK, Material.BUBBLE_CORAL_FAN, Material.CONDUIT, Material.DEAD_BRAIN_CORAL_BLOCK,
-            Material.DEAD_BUBBLE_CORAL_BLOCK, Material.DEAD_FIRE_CORAL_BLOCK, Material.DEAD_HORN_CORAL_BLOCK, Material.DEAD_TUBE_CORAL_BLOCK, Material.DOLPHIN_SPAWN_EGG, Material.FIRE_CORAL, Material.FIRE_CORAL_BLOCK, Material.FIRE_CORAL_FAN,
-            Material.HEART_OF_THE_SEA, Material.HORN_CORAL, Material.HORN_CORAL_BLOCK, Material.HORN_CORAL_FAN, Material.NAUTILUS_SHELL, Material.PHANTOM_MEMBRANE, Material.SEA_PICKLE, Material.TUBE_CORAL, Material.TUBE_CORAL_BLOCK,
-            Material.TUBE_CORAL_FAN, Material.STRIPPED_ACACIA_WOOD, Material.STRIPPED_BIRCH_WOOD, Material.STRIPPED_DARK_OAK_WOOD, Material.STRIPPED_JUNGLE_WOOD, Material.STRIPPED_OAK_WOOD, Material.STRIPPED_SPRUCE_WOOD,
-            Material.ACACIA_WOOD, Material.BIRCH_WOOD, Material.DARK_OAK_WOOD, Material.JUNGLE_WOOD, Material.OAK_WOOD, Material.SPRUCE_WOOD,
-            Material.TUBE_CORAL_WALL_FAN, Material.BRAIN_CORAL_WALL_FAN, Material.BUBBLE_CORAL_WALL_FAN, Material.FIRE_CORAL_WALL_FAN, Material.HORN_CORAL_WALL_FAN, Material.DEAD_TUBE_CORAL_WALL_FAN, Material.DEAD_BRAIN_CORAL_WALL_FAN,
-            Material.DEAD_BUBBLE_CORAL_WALL_FAN, Material.DEAD_FIRE_CORAL_WALL_FAN, Material.DEAD_HORN_CORAL_WALL_FAN, Material.DEAD_TUBE_CORAL_FAN, Material.DEAD_BRAIN_CORAL_FAN, Material.DEAD_BUBBLE_CORAL_FAN, Material.DEAD_FIRE_CORAL_FAN,
-            Material.DEAD_HORN_CORAL_FAN, Material.DEAD_BRAIN_CORAL, Material.DEAD_BUBBLE_CORAL, Material.DEAD_FIRE_CORAL, Material.DEAD_HORN_CORAL, Material.DEAD_TUBE_CORAL,
-            // 1.14
-            Material.ACACIA_SIGN, Material.ACACIA_WALL_SIGN, Material.ANDESITE_SLAB, Material.ANDESITE_STAIRS, Material.ANDESITE_WALL, Material.BAMBOO, Material.BAMBOO_SAPLING, Material.BARREL, Material.BELL, Material.BIRCH_SIGN, Material.BIRCH_WALL_SIGN,
-            Material.BLACK_DYE, Material.BLAST_FURNACE, Material.BLUE_DYE, Material.BRICK_WALL, Material.BROWN_DYE, Material.CAMPFIRE, Material.CARTOGRAPHY_TABLE, Material.CAT_SPAWN_EGG, Material.CORNFLOWER, Material.CREEPER_BANNER_PATTERN, Material.CROSSBOW,
-            Material.DARK_OAK_SIGN, Material.DARK_OAK_WALL_SIGN, Material.DIORITE_SLAB, Material.DIORITE_STAIRS, Material.DIORITE_WALL, Material.END_STONE_BRICK_SLAB, Material.END_STONE_BRICK_STAIRS, Material.END_STONE_BRICK_WALL, Material.FLETCHING_TABLE,
-            Material.FLOWER_BANNER_PATTERN, Material.GRANITE_SLAB, Material.GRANITE_STAIRS, Material.GRANITE_WALL, Material.GREEN_DYE, Material.GRINDSTONE, Material.RAVAGER_SPAWN_EGG, Material.JIGSAW, Material.JUNGLE_SIGN, Material.JUNGLE_WALL_SIGN,
-            Material.LANTERN, Material.LECTERN, Material.LILY_OF_THE_VALLEY, Material.LOOM, Material.MOJANG_BANNER_PATTERN, Material.MOSSY_COBBLESTONE_SLAB, Material.MOSSY_COBBLESTONE_STAIRS, Material.MOSSY_STONE_BRICK_SLAB, Material.MOSSY_STONE_BRICK_STAIRS,
-            Material.MOSSY_STONE_BRICK_WALL, Material.NETHER_BRICK_WALL, Material.OAK_SIGN, Material.OAK_WALL_SIGN, Material.PANDA_SPAWN_EGG, Material.PILLAGER_SPAWN_EGG, Material.POLISHED_ANDESITE_SLAB, Material.POLISHED_ANDESITE_STAIRS, Material.POLISHED_DIORITE_SLAB,
-            Material.POLISHED_DIORITE_STAIRS, Material.POLISHED_GRANITE_SLAB, Material.POLISHED_GRANITE_STAIRS, Material.POTTED_BAMBOO, Material.POTTED_CORNFLOWER, Material.POTTED_LILY_OF_THE_VALLEY, Material.POTTED_WITHER_ROSE, Material.PRISMARINE_WALL, Material.RED_DYE,
-            Material.RED_NETHER_BRICK_SLAB, Material.RED_NETHER_BRICK_STAIRS, Material.RED_NETHER_BRICK_WALL, Material.RED_SANDSTONE_WALL, Material.SANDSTONE_WALL, Material.SCAFFOLDING, Material.SKULL_BANNER_PATTERN, Material.SMITHING_TABLE, Material.SMOKER,
-            Material.SMOOTH_QUARTZ_SLAB, Material.SMOOTH_QUARTZ_STAIRS, Material.SMOOTH_RED_SANDSTONE_SLAB, Material.SMOOTH_RED_SANDSTONE_STAIRS, Material.SMOOTH_SANDSTONE_SLAB, Material.SMOOTH_SANDSTONE_STAIRS, Material.STONE_SLAB, Material.SPRUCE_SIGN,
-            Material.SPRUCE_WALL_SIGN, Material.STONECUTTER, Material.STONE_BRICK_WALL, Material.STONE_STAIRS, Material.SUSPICIOUS_STEW, Material.SWEET_BERRIES, Material.SWEET_BERRY_BUSH, Material.WHITE_DYE, Material.WITHER_ROSE, Material.YELLOW_DYE,
-            Material.COMPOSTER, Material.TRADER_LLAMA_SPAWN_EGG, Material.WANDERING_TRADER_SPAWN_EGG, Material.FOX_SPAWN_EGG, Material.LEATHER_HORSE_ARMOR, Material.GLOBE_BANNER_PATTERN, Material.CUT_RED_SANDSTONE_SLAB, Material.CUT_SANDSTONE_SLAB,
-            // 1.15
-            Material.BEEHIVE, Material.BEE_NEST, Material.BEE_SPAWN_EGG, Material.HONEYCOMB, Material.HONEYCOMB_BLOCK, Material.HONEY_BLOCK, Material.HONEY_BOTTLE,
-            //
-            Material.LEGACY_AIR, Material.LEGACY_DEAD_BUSH, Material.LEGACY_BURNING_FURNACE, Material.LEGACY_WALL_SIGN, Material.LEGACY_REDSTONE_TORCH_OFF, Material.LEGACY_SKULL, Material.LEGACY_REDSTONE_COMPARATOR_ON, Material.LEGACY_WALL_BANNER, Material.LEGACY_MONSTER_EGG));
-
-    private final Set<Material> INVERSION_FAILS = new HashSet<>(Arrays.asList(Material.LEGACY_DOUBLE_STEP, Material.LEGACY_GLOWING_REDSTONE_ORE, Material.LEGACY_DIODE_BLOCK_ON, Material.LEGACY_REDSTONE_LAMP_ON, Material.LEGACY_WOOD_DOUBLE_STEP,
-            Material.LEGACY_DAYLIGHT_DETECTOR_INVERTED, Material.LEGACY_DOUBLE_STONE_SLAB2, Material.LEGACY_PURPUR_DOUBLE_SLAB, Material.LEGACY_WHEAT, Material.LEGACY_SIGN, Material.LEGACY_WOOD_DOOR, Material.LEGACY_IRON_DOOR, Material.LEGACY_SUGAR_CANE,
-            Material.LEGACY_CAKE, Material.LEGACY_BED, Material.LEGACY_DIODE, Material.LEGACY_NETHER_STALK, Material.LEGACY_BREWING_STAND_ITEM, Material.LEGACY_CAULDRON_ITEM, Material.LEGACY_REDSTONE_COMPARATOR, Material.LEGACY_SPRUCE_DOOR_ITEM,
-            Material.LEGACY_BIRCH_DOOR_ITEM, Material.LEGACY_JUNGLE_DOOR_ITEM, Material.LEGACY_ACACIA_DOOR_ITEM, Material.LEGACY_DARK_OAK_DOOR_ITEM, Material.LEGACY_STATIONARY_LAVA, Material.LEGACY_STATIONARY_WATER));
-
-    @Test
-    public void toLegacyMaterial() {
-        for (Material material : Material.values()) {
-            if (!INVALIDATED_MATERIALS.contains(material) && !material.isLegacy()) {
-                MaterialData converted = CraftLegacy.toLegacyData(material);
-
-                Assert.assertNotEquals("Could not toLegacy " + material, Material.LEGACY_AIR, converted.getItemType());
-
-                if (!INVALIDATED_MATERIALS.contains(converted.getItemType())) {
-                    Assert.assertNotEquals("Could not fromLegacy(toLegacy) " + converted + "(" + material + ")", Material.AIR, CraftLegacy.fromLegacy(converted));
-                }
-                if (!INVERSION_FAILS.contains(material)) {
-                    Assert.assertEquals("Could not fromLegacy(toLegacy) " + converted + "(" + material + ")", material, CraftLegacy.fromLegacy(converted));
-                }
-            }
-        }
-
-        Assert.assertEquals("Could not toLegacy Air", Material.LEGACY_AIR, CraftLegacy.toLegacy(Material.AIR));
-    }
-
-    @Test
-    public void fromLegacyMaterial() {
-        for (Material material : Material.values()) {
-            if (!INVALIDATED_MATERIALS.contains(material) && material.isLegacy()) {
-                Material converted = CraftLegacy.fromLegacy(material);
-                Assert.assertNotEquals("Could not fromLegacy " + material, Material.AIR, converted);
-
-                Assert.assertNotEquals("Could not toLegacy(fromLegacy) " + converted + "(" + material + ")", Material.AIR, CraftLegacy.toLegacy(converted));
-                if (!INVERSION_FAILS.contains(material)) {
-                    Assert.assertEquals("Could not toLegacy(fromLegacy) " + converted + "(" + material + ")", material, CraftLegacy.toLegacy(converted));
-                }
-            }
-        }
-
-        Assert.assertEquals("Could not fromLegacy Air", Material.AIR, CraftLegacy.fromLegacy(Material.LEGACY_AIR));
-    }
-
-    @Test
-    public void testRestricted() {
-        for (Material material : CraftLegacy.values()) {
-            Assert.assertTrue("Must iterate only legacy materials", material.isLegacy());
-        }
-
-        for (Material material : org.bukkit.craftbukkit.util.CraftLegacy.modern_values()) {
-            Assert.assertFalse("Must iterate only modern materials", material.isLegacy());
-        }
-    }
-}
diff --git a/src/test/java/org/bukkit/enchantments/EnchantmentTargetTest.java b/src/test/java/org/bukkit/enchantments/EnchantmentTargetTest.java
deleted file mode 100644
index 983aff0047fca947ba2e584846b74649dc0f5327..0000000000000000000000000000000000000000
--- a/src/test/java/org/bukkit/enchantments/EnchantmentTargetTest.java
+++ /dev/null
@@ -1,41 +0,0 @@
-package org.bukkit.enchantments;
-
-import net.minecraft.server.EnchantmentSlotType;
-import net.minecraft.server.IRegistry;
-import net.minecraft.server.Item;
-import org.bukkit.Material;
-import org.bukkit.craftbukkit.util.CraftMagicNumbers;
-import org.junit.Assert;
-import org.junit.Test;
-
-public class EnchantmentTargetTest {
-
-    @Test
-    public void test() {
-        for (EnchantmentSlotType nmsSlot : EnchantmentSlotType.values()) {
-            EnchantmentTarget bukkitTarget;
-            switch (nmsSlot) {
-                case ARMOR_CHEST:
-                    bukkitTarget = EnchantmentTarget.ARMOR_TORSO;
-                    break;
-                case DIGGER:
-                    bukkitTarget = EnchantmentTarget.TOOL;
-                    break;
-                default:
-                    bukkitTarget = EnchantmentTarget.valueOf(nmsSlot.name());
-                    break;
-            }
-
-            Assert.assertNotNull("No bukkit target for slot " + nmsSlot, bukkitTarget);
-
-            for (Item item : IRegistry.ITEM) {
-                Material material = CraftMagicNumbers.getMaterial(item);
-
-                boolean nms = nmsSlot.canEnchant(item);
-                boolean bukkit = bukkitTarget.includes(material);
-
-                Assert.assertEquals("Slot mismatch for " + bukkitTarget + " and " + material, nms, bukkit);
-            }
-        }
-    }
-}
diff --git a/src/test/java/org/bukkit/entity/EnderDragonPhaseTest.java b/src/test/java/org/bukkit/entity/EnderDragonPhaseTest.java
deleted file mode 100644
index b10fe0cd13d7490454cf896ec3eff010ab172800..0000000000000000000000000000000000000000
--- a/src/test/java/org/bukkit/entity/EnderDragonPhaseTest.java
+++ /dev/null
@@ -1,48 +0,0 @@
-package org.bukkit.entity;
-
-import net.minecraft.server.DragonControllerPhase;
-import org.bukkit.craftbukkit.entity.CraftEnderDragon;
-import org.junit.Assert;
-import org.junit.Test;
-
-public class EnderDragonPhaseTest {
-
-    @Test
-    public void testNotNull() {
-        for (EnderDragon.Phase phase : EnderDragon.Phase.values()) {
-            DragonControllerPhase dragonControllerPhase = CraftEnderDragon.getMinecraftPhase(phase);
-            Assert.assertNotNull(phase.name(), dragonControllerPhase);
-            Assert.assertNotNull(phase.name(), CraftEnderDragon.getBukkitPhase(dragonControllerPhase));
-        }
-    }
-
-    @Test
-    public void testBukkitToMinecraft() {
-        Assert.assertEquals("CIRCLING", CraftEnderDragon.getMinecraftPhase(EnderDragon.Phase.CIRCLING), DragonControllerPhase.HOLDING_PATTERN);
-        Assert.assertEquals("STRAFING", CraftEnderDragon.getMinecraftPhase(EnderDragon.Phase.STRAFING), DragonControllerPhase.STRAFE_PLAYER);
-        Assert.assertEquals("FLY_TO_PORTAL", CraftEnderDragon.getMinecraftPhase(EnderDragon.Phase.FLY_TO_PORTAL), DragonControllerPhase.LANDING_APPROACH);
-        Assert.assertEquals("LAND_ON_PORTAL", CraftEnderDragon.getMinecraftPhase(EnderDragon.Phase.LAND_ON_PORTAL), DragonControllerPhase.LANDING);
-        Assert.assertEquals("LEAVE_PORTAL", CraftEnderDragon.getMinecraftPhase(EnderDragon.Phase.LEAVE_PORTAL), DragonControllerPhase.TAKEOFF);
-        Assert.assertEquals("BREATH_ATTACK", CraftEnderDragon.getMinecraftPhase(EnderDragon.Phase.BREATH_ATTACK), DragonControllerPhase.SITTING_FLAMING);
-        Assert.assertEquals("SEARCH_FOR_BREATH_ATTACK_TARGET", CraftEnderDragon.getMinecraftPhase(EnderDragon.Phase.SEARCH_FOR_BREATH_ATTACK_TARGET), DragonControllerPhase.SITTING_SCANNING);
-        Assert.assertEquals("ROAR_BEFORE_ATTACK", CraftEnderDragon.getMinecraftPhase(EnderDragon.Phase.ROAR_BEFORE_ATTACK), DragonControllerPhase.SITTING_ATTACKING);
-        Assert.assertEquals("CHARGE_PLAYER", CraftEnderDragon.getMinecraftPhase(EnderDragon.Phase.CHARGE_PLAYER), DragonControllerPhase.CHARGING_PLAYER);
-        Assert.assertEquals("DYING", CraftEnderDragon.getMinecraftPhase(EnderDragon.Phase.DYING), DragonControllerPhase.DYING);
-        Assert.assertEquals("HOVER", CraftEnderDragon.getMinecraftPhase(EnderDragon.Phase.HOVER), DragonControllerPhase.HOVER);
-    }
-
-    @Test
-    public void testMinecraftToBukkit() {
-        Assert.assertEquals("CIRCLING", CraftEnderDragon.getBukkitPhase(DragonControllerPhase.HOLDING_PATTERN), EnderDragon.Phase.CIRCLING);
-        Assert.assertEquals("STRAFING", CraftEnderDragon.getBukkitPhase(DragonControllerPhase.STRAFE_PLAYER), EnderDragon.Phase.STRAFING);
-        Assert.assertEquals("FLY_TO_PORTAL", CraftEnderDragon.getBukkitPhase(DragonControllerPhase.LANDING_APPROACH), EnderDragon.Phase.FLY_TO_PORTAL);
-        Assert.assertEquals("LAND_ON_PORTAL", CraftEnderDragon.getBukkitPhase(DragonControllerPhase.LANDING), EnderDragon.Phase.LAND_ON_PORTAL);
-        Assert.assertEquals("LEAVE_PORTAL", CraftEnderDragon.getBukkitPhase(DragonControllerPhase.TAKEOFF), EnderDragon.Phase.LEAVE_PORTAL);
-        Assert.assertEquals("BREATH_ATTACK", CraftEnderDragon.getBukkitPhase(DragonControllerPhase.SITTING_FLAMING), EnderDragon.Phase.BREATH_ATTACK);
-        Assert.assertEquals("SEARCH_FOR_BREATH_ATTACK_TARGET", CraftEnderDragon.getBukkitPhase(DragonControllerPhase.SITTING_SCANNING), EnderDragon.Phase.SEARCH_FOR_BREATH_ATTACK_TARGET);
-        Assert.assertEquals("ROAR_BEFORE_ATTACK", CraftEnderDragon.getBukkitPhase(DragonControllerPhase.SITTING_ATTACKING), EnderDragon.Phase.ROAR_BEFORE_ATTACK);
-        Assert.assertEquals("CHARGE_PLAYER", CraftEnderDragon.getBukkitPhase(DragonControllerPhase.CHARGING_PLAYER), EnderDragon.Phase.CHARGE_PLAYER);
-        Assert.assertEquals("DYING", CraftEnderDragon.getBukkitPhase(DragonControllerPhase.DYING), EnderDragon.Phase.DYING);
-        Assert.assertEquals("HOVER", CraftEnderDragon.getBukkitPhase(DragonControllerPhase.HOVER), EnderDragon.Phase.HOVER);
-    }
-}
diff --git a/src/test/java/org/bukkit/entity/EntityTypesTest.java b/src/test/java/org/bukkit/entity/EntityTypesTest.java
deleted file mode 100644
index 07d978c74bf3a5a0f0d9cd67d043b6e09f29e952..0000000000000000000000000000000000000000
--- a/src/test/java/org/bukkit/entity/EntityTypesTest.java
+++ /dev/null
@@ -1,30 +0,0 @@
-package org.bukkit.entity;
-
-import java.util.Arrays;
-import java.util.Set;
-import java.util.stream.Collectors;
-import net.minecraft.server.EntityTypes;
-import net.minecraft.server.IRegistry;
-import net.minecraft.server.MinecraftKey;
-import org.bukkit.support.AbstractTestingBase;
-import org.junit.Assert;
-import org.junit.Test;
-
-public class EntityTypesTest extends AbstractTestingBase {
-
-    @Test
-    public void testMaps() {
-        Set<EntityType> allBukkit = Arrays.stream(EntityType.values()).filter((b) -> b.getName() != null).collect(Collectors.toSet());
-
-        for (EntityTypes<?>  nms : IRegistry.ENTITY_TYPE) {
-            MinecraftKey key = EntityTypes.getName(nms);
-
-            EntityType bukkit = EntityType.fromName(key.getKey());
-            Assert.assertNotNull("Missing nms->bukkit " + key, bukkit);
-
-            Assert.assertTrue("Duplicate entity nms->" + bukkit, allBukkit.remove(bukkit));
-        }
-
-        Assert.assertTrue("Unmapped bukkit entities " + allBukkit, allBukkit.isEmpty());
-    }
-}
diff --git a/src/test/java/org/bukkit/entity/PandaGeneTest.java b/src/test/java/org/bukkit/entity/PandaGeneTest.java
deleted file mode 100644
index 5505e1490536356162e05c679a034e3941a055c4..0000000000000000000000000000000000000000
--- a/src/test/java/org/bukkit/entity/PandaGeneTest.java
+++ /dev/null
@@ -1,31 +0,0 @@
-package org.bukkit.entity;
-
-import net.minecraft.server.EntityPanda;
-import org.bukkit.craftbukkit.entity.CraftPanda;
-import org.junit.Assert;
-import org.junit.Test;
-
-public class PandaGeneTest {
-
-    @Test
-    public void testBukkit() {
-        for (Panda.Gene gene : Panda.Gene.values()) {
-            EntityPanda.Gene nms = CraftPanda.toNms(gene);
-
-            Assert.assertNotNull("NMS gene null for " + gene, nms);
-            Assert.assertEquals("Recessive status did not match " + gene, gene.isRecessive(), nms.isRecessive());
-            Assert.assertEquals("Gene did not convert back " + gene, gene, CraftPanda.fromNms(nms));
-        }
-    }
-
-    @Test
-    public void testNMS() {
-        for (EntityPanda.Gene gene : EntityPanda.Gene.values()) {
-            Panda.Gene bukkit = CraftPanda.fromNms(gene);
-
-            Assert.assertNotNull("Bukkit gene null for " + gene, bukkit);
-            Assert.assertEquals("Recessive status did not match " + gene, gene.isRecessive(), bukkit.isRecessive());
-            Assert.assertEquals("Gene did not convert back " + gene, gene, CraftPanda.toNms(bukkit));
-        }
-    }
-}
diff --git a/src/test/java/org/bukkit/entity/TropicalFishTest.java b/src/test/java/org/bukkit/entity/TropicalFishTest.java
deleted file mode 100644
index aa70881a77fd7c2d6b1058d9dba4d70e3ae12ba8..0000000000000000000000000000000000000000
--- a/src/test/java/org/bukkit/entity/TropicalFishTest.java
+++ /dev/null
@@ -1,44 +0,0 @@
-package org.bukkit.entity;
-
-import static org.hamcrest.Matchers.*;
-import static org.junit.Assert.*;
-import org.bukkit.DyeColor;
-import org.bukkit.craftbukkit.entity.CraftTropicalFish;
-import org.bukkit.entity.TropicalFish.Pattern;
-import org.junit.Test;
-
-public class TropicalFishTest {
-
-    @Test
-    public void testVariants() {
-        testVariant(65536, DyeColor.ORANGE, DyeColor.WHITE, Pattern.KOB);
-        testVariant(917504, DyeColor.RED, DyeColor.WHITE, Pattern.KOB);
-        testVariant(918273, DyeColor.RED, DyeColor.WHITE, Pattern.BLOCKFISH);
-        testVariant(918529, DyeColor.RED, DyeColor.WHITE, Pattern.BETTY);
-        testVariant(16778497, DyeColor.WHITE, DyeColor.ORANGE, Pattern.CLAYFISH);
-        testVariant(50660352, DyeColor.LIME, DyeColor.LIGHT_BLUE, Pattern.BRINELY);
-        testVariant(50726144, DyeColor.PINK, DyeColor.LIGHT_BLUE, Pattern.SPOTTY);
-        testVariant(50790656, DyeColor.GRAY, DyeColor.LIGHT_BLUE, Pattern.SUNSTREAK);
-        testVariant(67108865, DyeColor.WHITE, DyeColor.YELLOW, Pattern.FLOPPER);
-        testVariant(67110144, DyeColor.WHITE, DyeColor.YELLOW, Pattern.SPOTTY);
-        testVariant(67371265, DyeColor.YELLOW, DyeColor.YELLOW, Pattern.STRIPEY);
-        testVariant(67764993, DyeColor.PURPLE, DyeColor.YELLOW, Pattern.BLOCKFISH);
-        testVariant(101253888, DyeColor.CYAN, DyeColor.PINK, Pattern.DASHER);
-        testVariant(117441025, DyeColor.WHITE, DyeColor.GRAY, Pattern.GLITTER);
-        testVariant(117441280, DyeColor.WHITE, DyeColor.GRAY, Pattern.DASHER);
-        testVariant(117441536, DyeColor.WHITE, DyeColor.GRAY, Pattern.BRINELY);
-        testVariant(117506305, DyeColor.ORANGE, DyeColor.GRAY, Pattern.STRIPEY);
-        testVariant(117899265, DyeColor.GRAY, DyeColor.GRAY, Pattern.FLOPPER);
-        testVariant(118161664, DyeColor.BLUE, DyeColor.GRAY, Pattern.SUNSTREAK);
-        testVariant(134217984, DyeColor.WHITE, DyeColor.LIGHT_GRAY, Pattern.SUNSTREAK);
-        testVariant(234882305, DyeColor.WHITE, DyeColor.RED, Pattern.CLAYFISH);
-        testVariant(235340288, DyeColor.GRAY, DyeColor.RED, Pattern.SNOOPER);
-    }
-
-    private void testVariant(int variant, DyeColor bodyColor, DyeColor patternColor, Pattern pattern) {
-        assertThat("variant write", CraftTropicalFish.getData(patternColor, bodyColor, pattern), is(variant));
-        assertThat("pattern colour read", CraftTropicalFish.getPatternColor(variant), is(patternColor));
-        assertThat("body colour read", CraftTropicalFish.getBodyColor(variant), is(bodyColor));
-        assertThat("pattern read", CraftTropicalFish.getPattern(variant), is(pattern));
-    }
-}
diff --git a/src/test/java/org/bukkit/entity/memory/CraftMemoryKeyTest.java b/src/test/java/org/bukkit/entity/memory/CraftMemoryKeyTest.java
deleted file mode 100644
index f060c9beaf25f7ea4698157a893975f655489827..0000000000000000000000000000000000000000
--- a/src/test/java/org/bukkit/entity/memory/CraftMemoryKeyTest.java
+++ /dev/null
@@ -1,75 +0,0 @@
-package org.bukkit.entity.memory;
-
-import net.minecraft.server.GlobalPos;
-import net.minecraft.server.IRegistry;
-import net.minecraft.server.MemoryModuleType;
-import org.bukkit.Location;
-import org.bukkit.craftbukkit.entity.memory.CraftMemoryKey;
-import org.bukkit.support.AbstractTestingBase;
-import org.junit.Assert;
-import org.junit.Test;
-
-public class CraftMemoryKeyTest extends AbstractTestingBase {
-
-    @Test
-    public void shouldConvertBukkitHomeKeyToNMSRepresentation() {
-        MemoryModuleType<GlobalPos> nmsHomeKey = CraftMemoryKey.fromMemoryKey(MemoryKey.HOME);
-        Assert.assertEquals("MemoryModuleType should be HOME", MemoryModuleType.HOME, nmsHomeKey);
-    }
-
-    @Test
-    public void shouldConvertBukkitJobSiteKeyToNMSRepresentation() {
-        MemoryModuleType<GlobalPos> nmsHomeKey = CraftMemoryKey.fromMemoryKey(MemoryKey.JOB_SITE);
-        Assert.assertEquals("MemoryModuleType should be JOB_SITE", MemoryModuleType.JOB_SITE, nmsHomeKey);
-    }
-
-    @Test
-    public void shouldConvertBukkitMeetingPointKeyToNMSRepresentation() {
-        MemoryModuleType<GlobalPos> nmsHomeKey = CraftMemoryKey.fromMemoryKey(MemoryKey.MEETING_POINT);
-        Assert.assertEquals("MemoryModuleType should be MEETING_POINT", MemoryModuleType.MEETING_POINT, nmsHomeKey);
-    }
-
-    @Test
-    public void shouldConvertNMSHomeKeyToBukkitRepresentation() {
-        MemoryKey<Location> bukkitHomeKey = CraftMemoryKey.toMemoryKey(MemoryModuleType.HOME);
-        Assert.assertEquals("MemoryModuleType should be HOME", MemoryKey.HOME, bukkitHomeKey);
-    }
-
-    @Test
-    public void shouldConvertNMSJobSiteKeyToBukkitRepresentation() {
-        MemoryKey<Location> bukkitJobSiteKey = CraftMemoryKey.toMemoryKey(MemoryModuleType.JOB_SITE);
-        Assert.assertEquals("MemoryKey should be JOB_SITE", MemoryKey.JOB_SITE, bukkitJobSiteKey);
-    }
-
-    @Test
-    public void shouldConvertNMSMeetingPointKeyToBukkitRepresentation() {
-        MemoryKey<Location> bukkitHomeKey = CraftMemoryKey.toMemoryKey(MemoryModuleType.MEETING_POINT);
-        Assert.assertEquals("MemoryKey should be MEETING_POINT", MemoryKey.MEETING_POINT, bukkitHomeKey);
-    }
-
-    @Test
-    public void shouldReturnNullWhenBukkitRepresentationOfKeyisNotAvailable() {
-        MemoryKey bukkitNoKey = CraftMemoryKey.toMemoryKey(MemoryModuleType.MOBS);
-        Assert.assertNull("MemoryModuleType should be null", bukkitNoKey);
-    }
-
-    @Test
-    public void shouldReturnNullWhenBukkitRepresentationOfKeyisNotAvailableAndSerializerIsNotPresent() {
-        for (MemoryModuleType<?> memoryModuleType : IRegistry.MEMORY_MODULE_TYPE) {
-            if (!memoryModuleType.getSerializer().isPresent()) {
-                MemoryKey bukkitNoKey = CraftMemoryKey.toMemoryKey(memoryModuleType);
-                Assert.assertNull("MemoryModuleType should be null", bukkitNoKey);
-            }
-        }
-    }
-
-    @Test
-    public void shouldReturnAnInstanceOfMemoryKeyWhenBukkitRepresentationOfKeyisAvailableAndSerializerIsPresent() {
-        for (MemoryModuleType<?> memoryModuleType : IRegistry.MEMORY_MODULE_TYPE) {
-            if (memoryModuleType.getSerializer().isPresent()) {
-                MemoryKey bukkitNoKey = CraftMemoryKey.toMemoryKey(memoryModuleType);
-                Assert.assertNotNull("MemoryModuleType should not be null", bukkitNoKey);
-            }
-        }
-    }
-}
diff --git a/src/test/java/org/bukkit/map/MapTest.java b/src/test/java/org/bukkit/map/MapTest.java
deleted file mode 100644
index 2dde26d3fd4a51828a0aa6e40831ba33aaebeccc..0000000000000000000000000000000000000000
--- a/src/test/java/org/bukkit/map/MapTest.java
+++ /dev/null
@@ -1,62 +0,0 @@
-
-package org.bukkit.map;
-
-import java.awt.Color;
-import java.util.logging.Level;
-import java.util.logging.Logger;
-import net.minecraft.server.MaterialMapColor;
-import org.junit.Assert;
-import org.junit.Test;
-
-public class MapTest {
-
-    private static final Logger logger = Logger.getLogger("MapTest");
-
-    private static final int[] modifiers = {180, 220, 255, 135};
-
-    @Test
-    public void testColors() {
-        MaterialMapColor[] nmsColors = MaterialMapColor.a;
-        Color[] bukkitColors = MapPalette.colors;
-
-        boolean fail = false;
-        for (int i = 0; i < nmsColors.length; i++) {
-            if (nmsColors[i] == null) {
-                break;
-            }
-            int rgb = nmsColors[i].rgb;
-
-            int r = (rgb >> 16) & 0xFF;
-            int g = (rgb >> 8) & 0xFF;
-            int b = rgb & 0xFF;
-
-            if (i + 1 > bukkitColors.length / 4) {
-                for (int modi : modifiers) {
-                    int mr = (r * modi) / 255;
-                    int mg = (g * modi) / 255;
-                    int mb = (b * modi) / 255;
-                    logger.log(Level.WARNING, "Missing color: c({0}, {1}, {2})", new Object[]{mr, mg, mb});
-                }
-                fail = true;
-            } else {
-                for (int j = 0; j < modifiers.length; j++) {
-                    int modi = modifiers[j];
-                    Color bukkit = bukkitColors[i * 4 + j];
-                    int mr = (r * modi) / 255;
-                    int mg = (g * modi) / 255;
-                    int mb = (b * modi) / 255;
-
-                    if (bukkit.getRed() != mr || bukkit.getGreen() != mg || bukkit.getBlue() != mb) {
-                        logger.log(Level.WARNING, "Incorrect color: {6} {7} c({0}, {1}, {2}) != c({3}, {4}, {5})", new Object[]{
-                            bukkit.getRed(), bukkit.getGreen(), bukkit.getBlue(),
-                            mr, mg, mb,
-                            i, j
-                        });
-                        fail = true;
-                    }
-                }
-            }
-        }
-        Assert.assertFalse(fail);
-    }
-}
diff --git a/src/test/java/org/bukkit/potion/PotionTest.java b/src/test/java/org/bukkit/potion/PotionTest.java
deleted file mode 100644
index d310ffcc47f932ea4498a6e9ecfffec597747263..0000000000000000000000000000000000000000
--- a/src/test/java/org/bukkit/potion/PotionTest.java
+++ /dev/null
@@ -1,50 +0,0 @@
-package org.bukkit.potion;
-
-import static org.junit.Assert.*;
-import java.util.EnumMap;
-import java.util.List;
-import java.util.Map;
-import net.minecraft.server.IRegistry;
-import net.minecraft.server.MinecraftKey;
-import net.minecraft.server.MobEffect;
-import net.minecraft.server.MobEffectList;
-import net.minecraft.server.PotionRegistry;
-import org.bukkit.support.AbstractTestingBase;
-import org.junit.Test;
-
-public class PotionTest extends AbstractTestingBase {
-    @Test
-    public void testEffectCompleteness() throws Throwable {
-        Map<PotionType, String> effects = new EnumMap(PotionType.class);
-        for (Object reg : IRegistry.POTION) {
-            List<MobEffect> eff = ((PotionRegistry)reg).a();
-            if (eff.size() != 1) continue;
-            int id = MobEffectList.getId(eff.get(0).getMobEffect());
-            PotionEffectType type = PotionEffectType.getById(id);
-            assertNotNull(String.valueOf(id), PotionEffectType.getById(id));
-
-            PotionType enumType = PotionType.getByEffect(type);
-            assertNotNull(type.getName(), enumType);
-
-            effects.put(enumType, enumType.name());
-        }
-
-        assertEquals(effects.entrySet().size(), PotionType.values().length - /* PotionTypes with no/shared Effects */ 6);
-    }
-
-    @Test
-    public void testEffectType() {
-        for (MobEffectList nms : IRegistry.MOB_EFFECT) {
-            MinecraftKey key = IRegistry.MOB_EFFECT.getKey(nms);
-
-            int id = MobEffectList.getId(nms);
-            PotionEffectType bukkit = PotionEffectType.getById(id);
-
-            assertNotNull("No Bukkit type for " + key, bukkit);
-            assertFalse("No name for " + key, bukkit.getName().contains("UNKNOWN"));
-
-            PotionEffectType byName = PotionEffectType.getByName(bukkit.getName());
-            assertEquals("Same type not returned by name " + key, bukkit, byName);
-        }
-    }
-}
diff --git a/src/test/java/org/bukkit/support/AbstractTestingBase.java b/src/test/java/org/bukkit/support/AbstractTestingBase.java
deleted file mode 100644
index 46539e87b3436d808bc9d4361cfa040fa6e97f26..0000000000000000000000000000000000000000
--- a/src/test/java/org/bukkit/support/AbstractTestingBase.java
+++ /dev/null
@@ -1,57 +0,0 @@
-package org.bukkit.support;
-
-import com.google.common.collect.ImmutableList;
-import com.google.common.util.concurrent.MoreExecutors;
-import java.util.Collections;
-import java.util.List;
-import java.util.concurrent.CompletableFuture;
-import net.minecraft.server.DispenserRegistry;
-import net.minecraft.server.EnumResourcePackType;
-import net.minecraft.server.LootPredicateManager;
-import net.minecraft.server.LootTableRegistry;
-import net.minecraft.server.ResourceManager;
-import net.minecraft.server.ResourcePackVanilla;
-import net.minecraft.server.TagRegistry;
-import net.minecraft.server.Unit;
-import org.bukkit.Material;
-import org.bukkit.craftbukkit.util.CraftMagicNumbers;
-import org.junit.Assert;
-
-/**
- *  If you are getting: java.lang.ExceptionInInitializerError
- *    at net.minecraft.server.StatisticList.<clinit>(SourceFile:58)
- *    at net.minecraft.server.Item.<clinit>(SourceFile:252)
- *    at net.minecraft.server.Block.<clinit>(Block.java:577)
- *
- *  extend this class to solve it.
- */
-public abstract class AbstractTestingBase {
-    // Materials that only exist in block form (or are legacy)
-    public static final List<Material> INVALIDATED_MATERIALS;
-
-    public static final LootTableRegistry LOOT_TABLE_REGISTRY;
-    public static final TagRegistry TAG_REGISTRY;
-
-    static {
-        DispenserRegistry.init();
-        // Set up resource manager
-        ResourceManager resourceManager = new ResourceManager(EnumResourcePackType.SERVER_DATA, Thread.currentThread());
-        // add tags and loot tables for unit tests
-        resourceManager.a(TAG_REGISTRY = new TagRegistry());
-        resourceManager.a(LOOT_TABLE_REGISTRY = new LootTableRegistry(new LootPredicateManager()));
-        // Register vanilla pack
-        resourceManager.a(MoreExecutors.directExecutor(), MoreExecutors.directExecutor(), Collections.singletonList(new ResourcePackVanilla("minecraft")), CompletableFuture.completedFuture(Unit.INSTANCE)).join();
-
-        DummyServer.setup();
-        DummyEnchantments.setup();
-
-        ImmutableList.Builder<Material> builder = ImmutableList.builder();
-        for (Material m : Material.values()) {
-            if (m.isLegacy() || CraftMagicNumbers.getItem(m) == null) {
-                builder.add(m);
-            }
-        }
-        INVALIDATED_MATERIALS = builder.build();
-        Assert.assertEquals("Expected 554 invalidated materials (got " + INVALIDATED_MATERIALS.size() + ")", 554, INVALIDATED_MATERIALS.size());
-    }
-}
diff --git a/src/test/java/org/bukkit/support/DummyEnchantments.java b/src/test/java/org/bukkit/support/DummyEnchantments.java
deleted file mode 100644
index f3cc27e713a3800203c073b2aaeec319d3b3899f..0000000000000000000000000000000000000000
--- a/src/test/java/org/bukkit/support/DummyEnchantments.java
+++ /dev/null
@@ -1,12 +0,0 @@
-package org.bukkit.support;
-
-import net.minecraft.server.Enchantments;
-
-public class DummyEnchantments {
-    static {
-        Enchantments.DAMAGE_ALL.getClass();
-        org.bukkit.enchantments.Enchantment.stopAcceptingRegistrations();
-    }
-
-    public static void setup() {}
-}
diff --git a/src/test/java/org/bukkit/support/DummyServer.java b/src/test/java/org/bukkit/support/DummyServer.java
deleted file mode 100644
index 912c139ff92dd855ff8033aa52b59d3838898c31..0000000000000000000000000000000000000000
--- a/src/test/java/org/bukkit/support/DummyServer.java
+++ /dev/null
@@ -1,118 +0,0 @@
-package org.bukkit.support;
-
-import java.lang.reflect.InvocationHandler;
-import java.lang.reflect.Method;
-import java.lang.reflect.Proxy;
-import java.util.HashMap;
-import java.util.logging.Logger;
-import org.bukkit.Bukkit;
-import org.bukkit.Material;
-import org.bukkit.NamespacedKey;
-import org.bukkit.Server;
-import org.bukkit.craftbukkit.CraftLootTable;
-import org.bukkit.craftbukkit.block.data.CraftBlockData;
-import org.bukkit.craftbukkit.inventory.CraftItemFactory;
-import org.bukkit.craftbukkit.util.CraftMagicNumbers;
-import org.bukkit.craftbukkit.util.CraftNamespacedKey;
-import org.bukkit.craftbukkit.util.Versioning;
-
-public class DummyServer implements InvocationHandler {
-    private static interface MethodHandler {
-        Object handle(DummyServer server, Object[] args);
-    }
-    private static final HashMap<Method, MethodHandler> methods = new HashMap<Method, MethodHandler>();
-    static {
-        try {
-            methods.put(
-                    Server.class.getMethod("getItemFactory"),
-                    new MethodHandler() {
-                        @Override
-                        public Object handle(DummyServer server, Object[] args) {
-                            return CraftItemFactory.instance();
-                        }
-                    }
-                );
-            methods.put(
-                    Server.class.getMethod("getName"),
-                    new MethodHandler() {
-                        @Override
-                        public Object handle(DummyServer server, Object[] args) {
-                            return DummyServer.class.getName();
-                        }
-                    }
-                );
-            methods.put(
-                    Server.class.getMethod("getVersion"),
-                    new MethodHandler() {
-                        @Override
-                        public Object handle(DummyServer server, Object[] args) {
-                            return DummyServer.class.getPackage().getImplementationVersion();
-                        }
-                    }
-                );
-            methods.put(
-                    Server.class.getMethod("getBukkitVersion"),
-                    new MethodHandler() {
-                        @Override
-                        public Object handle(DummyServer server, Object[] args) {
-                            return Versioning.getBukkitVersion();
-                        }
-                    }
-                );
-            methods.put(
-                    Server.class.getMethod("getLogger"),
-                    new MethodHandler() {
-                        final Logger logger = Logger.getLogger(DummyServer.class.getCanonicalName());
-                        @Override
-                        public Object handle(DummyServer server, Object[] args) {
-                            return logger;
-                        }
-                    }
-                );
-            methods.put(
-                    Server.class.getMethod("getUnsafe"),
-                    new MethodHandler() {
-                        @Override
-                        public Object handle(DummyServer server, Object[] args) {
-                            return CraftMagicNumbers.INSTANCE;
-                        }
-                    }
-                );
-            methods.put(
-                    Server.class.getMethod("createBlockData", Material.class),
-                    new MethodHandler() {
-                        final Logger logger = Logger.getLogger(DummyServer.class.getCanonicalName());
-                        @Override
-                        public Object handle(DummyServer server, Object[] args) {
-                            return CraftBlockData.newData((Material) args[0], null);
-                        }
-                    }
-                );
-            methods.put(Server.class.getMethod("getLootTable", NamespacedKey.class),
-                    new MethodHandler() {
-                        @Override
-                        public Object handle(DummyServer server, Object[] args) {
-                            NamespacedKey key = (NamespacedKey) args[0];
-                            return new CraftLootTable(key, AbstractTestingBase.LOOT_TABLE_REGISTRY.getLootTable(CraftNamespacedKey.toMinecraft(key)));
-                        }
-                    }
-                );
-            Bukkit.setServer(Proxy.getProxyClass(Server.class.getClassLoader(), Server.class).asSubclass(Server.class).getConstructor(InvocationHandler.class).newInstance(new DummyServer()));
-        } catch (Throwable t) {
-            throw new Error(t);
-        }
-    }
-
-    public static void setup() {}
-
-    private DummyServer() {};
-
-    @Override
-    public Object invoke(Object proxy, Method method, Object[] args) {
-        MethodHandler handler = methods.get(method);
-        if (handler != null) {
-            return handler.handle(this, args);
-        }
-        throw new UnsupportedOperationException(String.valueOf(method));
-    }
-}
diff --git a/src/test/java/org/bukkit/support/Matchers.java b/src/test/java/org/bukkit/support/Matchers.java
deleted file mode 100644
index 324bbc7367199b28b07deb622c3c8ce1e16dfac0..0000000000000000000000000000000000000000
--- a/src/test/java/org/bukkit/support/Matchers.java
+++ /dev/null
@@ -1,32 +0,0 @@
-package org.bukkit.support;
-
-import org.hamcrest.BaseMatcher;
-import org.hamcrest.Description;
-import org.hamcrest.Matcher;
-
-public final class Matchers {
-
-    private Matchers() {}
-
-    public static <T> Matcher<T> sameHash(T value) {
-        return new SameHash<T>(value);
-    }
-
-    static class SameHash<T> extends BaseMatcher<T> {
-        private final int expected;
-
-        SameHash(T object) {
-            expected = object.hashCode();
-        }
-
-        @Override
-        public boolean matches(Object item) {
-            return item.hashCode() == expected;
-        }
-
-        @Override
-        public void describeTo(Description description) {
-            description.appendValue(expected);
-        }
-    }
-}
diff --git a/src/test/java/org/bukkit/support/Util.java b/src/test/java/org/bukkit/support/Util.java
deleted file mode 100644
index 2f24d9a4083665b42bb439434c64158dc14fcaf1..0000000000000000000000000000000000000000
--- a/src/test/java/org/bukkit/support/Util.java
+++ /dev/null
@@ -1,31 +0,0 @@
-package org.bukkit.support;
-
-import java.lang.reflect.Field;
-
-public class Util {
-    /*
-    public static <T> T getInternalState(Object object, String fieldName) {
-        return getInternalState(object.getClass(), object, fieldName);
-    }
-    */
-
-    @SuppressWarnings("unchecked")
-    public static <T> T getInternalState(Class<?> clazz, Object object, String fieldName) {
-        Field field;
-        try {
-            field = clazz.getDeclaredField(fieldName);
-        } catch (SecurityException e) {
-            throw new RuntimeException("Not allowed to access " + clazz, e);
-        } catch (NoSuchFieldException e) {
-            throw new RuntimeException("Unable to find field " + fieldName, e);
-        }
-
-        field.setAccessible(true);
-        try {
-            return (T) field.get(object);
-        } catch (IllegalArgumentException e) {
-        } catch (IllegalAccessException e) {
-        }
-        throw new RuntimeException("Unable to get internal value");
-    }
-}
-- 
2.20.1

